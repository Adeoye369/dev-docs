{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"welcome to my Dev Docs","text":""},{"location":"ai-dev-docs/","title":"AI learning Docs","text":""},{"location":"ai-dev-docs/#matplob-lib","title":"Matplob lib","text":"<p>Intro to matplot library</p>"},{"location":"ai-dev-docs/#installation-without-anaconda","title":"Installation without Anaconda","text":"<p>I Will recommend installing anaconda, I will save you a lot of hassle late on. Installation involve first creating a virtual environment.</p> <p>Create a file <code>main.py</code></p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate some linear data\nx = np.linspace(0, 10, 500)\n# y = np.sin(x) # calc. sine-wave of each\ny = np.exp2(x- 3)- 5*x - 11\n\n# Create a line plot\nplt.plot(x, y, label='Sine Function')\nplt.show()\n</code></pre> <p>create a new virtual environment by opening the terminal,</p> <pre><code>&gt;&gt; python -m venv env1 # env1 is the dir name\n&gt;&gt; ./env1/Scripts/activate\n</code></pre> <p>If you are running it for the first time, You will probably encounter an error. So go to your Powershell run as Adminstrator</p> <pre><code>Set-ExecutionPolicy Unrestricted\n</code></pre> <p>Once you have done that a virtual environ of this structure is created </p>"},{"location":"ai-dev-docs/#plotting-multiple-graph-in-one-plot","title":"Plotting Multiple Graph in one plot","text":"<pre><code>t = np.linspace(-10, 50, 50)\n\n# distance covered by A\nyA = 2 * t - 1\n\n# distance covered by B\nyB = t + 2\n\nfig, ax = plt.subplots()\nplt.title(\"Graph of yA and yB distance over time\")\nplt.axhline(y=0, c='lightgray')\nplt.axvline(x=0 , c='lightgray')\n\nax.set_xlim([-10, 20])\nax.set_ylim([-10, 20])\n\nax.plot( t,yA, c='blue', label=\"y = 2t - 1\")\nax.plot( t,yB, c='purple')\n\nplt.axhline(y=5, c='green', linestyle='--', linewidth='0.5')\nplt.axvline(x=3, c=\"green\", linestyle='--', linewidth='0.5')\n</code></pre>"},{"location":"blender-docs/blender-general/","title":"Blender General Notes","text":""},{"location":"blender-docs/blender-general/#importing-my-custom-py-files","title":"Importing my Custom Py files","text":"<ul> <li>Make or have a directory where all your script or re-usable script will be called from.</li> <li>Create a <code>module</code>sub folder in the script directory. This is where you place your custom module python files</li> </ul> <p>Add the directory of your script to your to Blender      - <code>*Preference &gt; file Path &gt; Script Directory*</code>      - Restart your blender for it to update</p> <p>Now you can Import your own custom module like in normal python:</p> <pre><code>import bpy\n\n# located in modules sub directory\nimport abcd \nimport xt_bl_utils\nfrom UtilityFunc import select_edit_bones\n\n\nprint(list(select_edit_bones('LEG')))\n\nxt_bl_utils.deleteAll()\nbpy.ops.mesh.primitive_cylinder_add(radius=5)\n</code></pre>"},{"location":"blender-docs/blender-general/#general-wide-search-in-blender","title":"General Wide search in blender","text":"<p>F3 - shortcut to search all blender (viewport)</p>"},{"location":"blender-docs/blender-general/#make-an-app-template","title":"Make an App Template","text":"<p>Generally your current startup file <code>startup.blend</code> and <code>userpref.blend</code> is stored in:  </p> <p><code>{%AppData%}\\Blender Foundation\\Blender\\4.0\\config</code> </p> <p></p> <p>And the system template files is stored in: <code>C:\\Program Files\\Blender Foundation\\Blender 4.0\\4.0\\scripts\\startup\\bl_app_templates_system</code></p> <p>But your own custom template files will be stored in: <code>{%AppData%}Blender Foundation\\Blender\\4.0\\scripts\\startup\\bl_app_templates_user</code> </p> <ul> <li>First in side your <code>{%AppData%}Blender Foundation\\Blender\\4.0</code> directory create <code>\\scripts\\startup\\bl_app_templates_user</code></li> <li>Create a folder inside <code>bl_app_templates_user</code> with same name as your template name . I will use <code>xtr_template</code></li> <li>After customizing your file is to save on do <code>file &gt; Defaults &gt; Save Start Up</code> or Just save the file, copy, and paste it in <code>xtr_template</code> and rename the blend file to <code>startup.blend</code> then you are good to go.</li> </ul>"},{"location":"blender-docs/blender-node/","title":"Blender Node","text":"<p>This documents the knowledge applicable to all the node views</p> <ul> <li>Shader Node</li> <li>Geometry Node</li> <li>Compositor Node</li> </ul>"},{"location":"blender-docs/blender-node/#cw-shader-connection","title":"CW Shader Connection","text":"<p>Bottom Gradient Connection </p> <p>Edge gradient connection </p> <p>All the setup connected</p> <p></p>"},{"location":"blender-docs/blender-node/#short-cuts","title":"SHORT CUTS","text":"Short Cut Description CTR+J Add Frame Node to selection of Node(s) ALT+P Remove Frame Node from Node(s) ALT+S Switch Connect inputs CTR+H Hide Unused input/outputs values in sel. node CTR+ SHT +RM Drag Lazy connect and Create a Mix node CTR + RM Drag Cut Connect link ALT + RM Drag Lazy connect link SHT + RM Drag Create re-route node link"},{"location":"blender-docs/blender-rig/","title":"Blender Rigs","text":""},{"location":"blender-docs/blender-rig/#face-rig-with-textures","title":"Face Rig with Textures","text":"<ul> <li>Shift + A  - Image &gt; Mesh Plane</li> </ul> <ul> <li>Make sure they read up in order and check <code>Detect image sequence</code> is checked then click import image as plane button</li> </ul> <ul> <li>Image Mesh Plane with Material is created.</li> </ul> <p>Go to you shader editor, change from <code>single image</code> to <code>image sequence</code></p> <p></p> <p>We will be changing the offset for the animation to happen</p>"},{"location":"blender-docs/blender-scripting/","title":"Blender Scripting","text":""},{"location":"blender-docs/blender-scripting/#useful-tricks","title":"Useful tricks","text":""},{"location":"blender-docs/blender-scripting/#align-objects-in-a-grid-of-interval","title":"align objects in a Grid of interval","text":"example of 8 items in interval of 4 <p>say if you have total object 24, to be arranged in 4 rows</p> <pre><code>for idx in range(24):\n    x = idx % 4\n    y = idx // 4 # math.floor(idx/4)\n</code></pre> <p></p>"},{"location":"blender-docs/blender-scripting/#blender-setup","title":"BLENDER SETUP","text":""},{"location":"blender-docs/blender-scripting/#making-blender-work-on-vscode","title":"Making blender work on Vscode","text":"<p>For Vscode to be able to read blender codes</p> <pre><code>pip install fake-bpy-module-latest\n</code></pre> <p>this provides all the necessary bpy module-like</p> <ul> <li> <p>Then install this extension on vscode extension: </p> </li> <li> <p>CTRL + SH + P - blender : start   incase you run into an error, do the follow</p> </li> </ul> <p>goto your directory where blender python is installed:     <code>C:\\Program Files\\Blender Foundation\\Blender 4.2\\4.2\\python</code>   - R+CLK - <code>properties &gt; security</code>   - Under (group or user) scrolled down to <code>User</code> and click <code>Edit</code> button   - check the option to <code>write</code> then ok it</p> <p></p>"},{"location":"blender-docs/blender-scripting/#getting-started-with-blender-addons","title":"Getting Started with blender Addons","text":"<p>minimum file structure</p> <pre><code>my_extension-0.0.1.zip\n\u251c\u2500 __init__.py\n\u251c\u2500 blender_manifest.toml\n\u2514\u2500 (...)\n</code></pre>"},{"location":"blender-docs/blender-scripting/#basic-generic-scripts","title":"BASIC &amp; GENERIC SCRIPTS","text":"<p>The first thing to understand is that everything created in the view port is an object.</p> <p>The first goto is the <code>bpy.context</code> this gives you access to the current selection objects.</p>"},{"location":"blender-docs/blender-scripting/#accessing-active-object","title":"Accessing active object","text":"<p>To access a select single object use <code>bpy.context.object</code> or <code>bpy.context.active_object</code></p> <pre><code>&gt;&gt;&gt; bpy.context.object #bpy.data.objects['sq_00']\n&gt;&gt;&gt; bpy.context.object #bpy.data.objects['Cube']\n</code></pre>"},{"location":"blender-docs/blender-scripting/#accessing-all-selected-objects","title":"Accessing all selected objects","text":"<p>for multiple selected objects use <code>bpy.context.selected_objects</code> it returns a list of select objects</p> <pre><code>bpy.context.selected_objects\n[bpy.data.objects['sq_00'], bpy.data.objects['Cube']]\n</code></pre>"},{"location":"blender-docs/blender-scripting/#making-an-object-active-programmatically","title":"Making an object active programmatically","text":"<pre><code>bpy.context.view_layer.objects.active = bpy.data.objects['eye_01']\n</code></pre>"},{"location":"blender-docs/blender-scripting/#access-data-block-of-active-element","title":"Access DATA-BLOCK of active element","text":"<p>The <code>bpy.context.object.data</code> depending on what you select, it gives you access to the data-block item of such selection</p> <pre><code>&gt;&gt;&gt; bpy.context.object.data #bpy.data.meshes['Cube.001']\n&gt;&gt;&gt; bpy.context.object.data #bpy.data.armatures['Armature']\n&gt;&gt;&gt; bpy.context.object.data #bpy.data.meshes['sq_00']\n&gt;&gt;&gt; bpy.context.object.data #bpy.data.lattices['Lattice']\n</code></pre>"},{"location":"blender-docs/blender-scripting/#check-type-of-object","title":"Check type of object","text":"<pre><code>bpy.context.object.type # 'ARMATURE'\n</code></pre>"},{"location":"blender-docs/blender-scripting/#switch-between-modes","title":"Switch between modes","text":"<p>you can switch between <code>OBJECT, EDIT</code> and other modes.</p> <pre><code>    # Enter Edit mode\n    &gt;&gt;&gt; bpy.ops.object.mode_set(mode = 'EDIT') \n</code></pre> <p>base on the object e.g for bone you have <code>POSE</code> and for Meshes you have <code>VERTEX_MODE</code> and more. You can check it by hovering over the mode </p>"},{"location":"blender-docs/blender-scripting/#listing-all-active-objects-data","title":"Listing all Active objects (DATA)","text":"<pre><code>for n in bpy.data.objects:\n    n.name, n.type, n.__class__.__name__\n'''\n('Camera', 'CAMERA', 'Object')\n('Cylinder', 'MESH', 'Object')\n('Icosphere', 'MESH', 'Object')\n('Light', 'LIGHT', 'Object')\n'''\n</code></pre>"},{"location":"blender-docs/blender-scripting/#select-all-active-objects-ops","title":"Select all Active objects (OPS)","text":"<pre><code># action param: TOGGLE, SELECT, DESELECT, INVERT\nbpy.ops.object.select_all(action='DESELECT')\n</code></pre> <p>here item can take any of the following values:</p> <pre><code># item param: [\u2018MESH\u2019, \u2018CURVE\u2019, \u2018SURFACE\u2019, \u2018META\u2019, \u2018FONT\u2019, \u2018HAIR\u2019, \u2018POINTCLOUD\u2019, \u2018VOLUME\u2019, \n# \u2018GPENCIL\u2019, \u2018ARMATURE\u2019, \u2018LATTICE\u2019, \u2018EMPTY\u2019, \u2018LIGHT\u2019, \u2018LIGHT_PROBE\u2019, \u2018CAMERA\u2019, \u2018SPEAKER\u2019]\nbpy.ops.object.select_by_type(type=item)\n</code></pre>"},{"location":"blender-docs/blender-scripting/#remove-objects-meshsdata","title":"Remove Objects' Meshs(DATA)","text":"<pre><code>for n in bpy.data.objects:\n    if n.type == 'MESH':\n        bpy.data.objects.remove(n)\n</code></pre>"},{"location":"blender-docs/blender-scripting/#remove-all-active-select-ops","title":"Remove all Active  select (OPS)","text":"<pre><code># bpy.ops.object.select_all() # 'SELECT' is default  \nbpy.ops.object.select_all(action='SELECT') # \n\nbpy.ops.object.delete()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#listing-all-active-material-nodes","title":"Listing all Active Material nodes","text":"<pre><code>for n in bpy.data.materials[1].node_tree.nodes:\n    n.name, n.type, n.__class__.__name__\n\n'''\n('Principled BSDF', 'BSDF_PRINCIPLED', 'ShaderNodeBsdfPrincipled')\n('Material Output', 'OUTPUT_MATERIAL', 'ShaderNodeOutputMaterial')\n'''\n</code></pre>"},{"location":"blender-docs/blender-scripting/#delete-active-objects","title":"Delete active object(s)","text":"<pre><code> bpy.ops.object.delete()\n # {'FINISHED'}\n\n ```\n\n## DRIVERS SCRIPTS\n\n### Creating basic driver\n\nCreating new driver on selected object property.\nThis returns the FCurve of the newly created driver\n\n```py\n'''Drivers for x, y, z location'''\nbpy.data.objects[0].driver_add('location')\n# [bpy.data.objects['Cube']...FCurve,\n#  bpy.data.objects['Cube']...FCurve,\n#   bpy.data.objects['Cube']...FCurve]\n\n'''Driver for y location only'''\n&gt;&gt;&gt; bpy.data.objects[0].driver_add('location', 1)\n# bpy.data.objects['Cube']...FCurve\n\n'''Driver for y - euler rotation only'''\n### bpy.context.object\n&gt;&gt;&gt; bpy.data.objects[0].driver_add('rotation_euler', 1)\n# bpy.data.objects['Cube']...FCurve\n</code></pre>"},{"location":"blender-docs/blender-scripting/#simple-driver-demonstration","title":"Simple driver demonstration","text":"<pre><code>import bpy\n\n#def custom_driver(v):\n#    return v * 0.1\n#bpy.app.driver_namespace['my_cus_drv'] = custom_driver\n\ndrv_z_rot_Fcurve = bpy.data.objects[\"Cube\"].driver_add(\"location\",  2)\n\n# Driver section:\ndrv_z_rot = drv_z_rot_Fcurve.driver\n\nvar1_name = \"var\"\n\n# DriverVariable section:\ndrv_z_rot.variables.new()\ndrv_z_rot.variables[0].name = var1_name\ndrv_z_rot.expression = f\"{var1_name}*0.2\"\n\ndrv_z_rot\n\n#DriverTarget section:\n# Types SINGE_PROP, ROTATION_DIFF, LOC_DIFF and CONTEXT_PROP\ndrv_z_rot.variables[var1_name].type = 'TRANSFORMS' \ndrv_z_rot.variables[var1_name].targets[0].id = bpy.data.objects[\"Empty\"]\ndrv_z_rot.variables[var1_name].targets[0].transform_type =\"ROT_Z\"\n</code></pre>"},{"location":"blender-docs/blender-scripting/#driver-to-move-the-materials-offset","title":"Driver to move the materials offset","text":"<pre><code># Add driver to the material\nimg_offset_Fcurve = img1.active_material.node_tree.nodes[\"Image Texture\"].\\\n    image_user.driver_add(\"frame_offset\")\n\nimg_drv = img_offset_Fcurve.driver\n\nvar1 = \"img_var\"\nimg_drv.expression = f\"abs({var1}*10)\"\n\nimg_drv.variables.new()\nimg_drv.variables[0].name = var1\n\nimg_drv.variables[var1].type = 'SINGLE_PROP'\n# ABS PATH: bpy.data.objects[\"arm2_obj\"].pose.bones[\"Bone1\"].location[1]\nimg_drv.variables[var1].targets[0].id = arm1 # bpy.data.objects[\"arm2_obj\"]\nimg_drv.variables[var1].targets[0].data_path = \"pose.bones[0].location[1]\"\n</code></pre>"},{"location":"blender-docs/blender-scripting/#material-related-script","title":"MATERIAL RELATED SCRIPT","text":"demo<pre><code># CREATE a new material\nmat1 = bpy.data.materials.new (name = \"MatBasic\")\n\n# ACCESS individual material id or by name\nbpy.data.materials[0]   \nbpy.data.materials[\"MAT_01\"] \n\n# CREATE a ndoe type  using \nmat1.node_tree.nodes.new(type=\"ShaderNodeBsdfDiffuse\")\n\n# ACCESS material nodes by index or by name\nmat1.node_tree.nodes[0] # \"Material Output\"\nmat1.node_tree.nodes[\"Diffuse BSDF.001\"]\n</code></pre>"},{"location":"blender-docs/blender-scripting/#get-the-active-material-of-object","title":"Get the active material of object","text":"<pre><code>bpy.context.object.active_material # bpy.data.materials['eye_01']\n</code></pre>"},{"location":"blender-docs/blender-scripting/#create-a-simple-icosphere-principled-bdsf-applied","title":"Create a Simple Icosphere Principled BDSF applied","text":"<pre><code>import random\n\ndef createNewMaterial():\n    # create a new material\n    mat = bpy.data.materials.new(name = \"MatA\")\n    # enable the created material\n    mat.use_nodes = True\n\n    # mat1.node_tree.nodes.new(type=\"ShaderNodeBsdfDiffuse\")\n\n    prinBSDF = mat.node_tree.nodes['Principled BSDF']\n    # Set the color of the material\n    prinBSDF.inputs[\"Base Color\"].default_value = (0.1, 0.2, 0.3, 1)\n    # set the roughness \n    prinBSDF.inputs[\"Roughness\"].default_value = 0.3\n    # set the metallic\n      prinBSDF.inputs[\"Metallic\"].default_value = random.uniform(0.1, 1.0)\n\n    return mat\n\n\n''' Creating an Icosphere and apply material '''\ndef createIcoSphere():\n    # create an icosphere and shade smooth it\n    bpy.ops.mesh.primitive_ico_sphere_add(subdivisions=3)\n    bpy.ops.object.shade_smooth()\n\n    # Get the active object i.e icosphere\n    active_object = bpy.context.active_object\n    # Add the material to the object material list\n    ico_mat = createNewMaterial()\n    active_object.data.materials.append(ico_mat)\n\ncreateIcoSphere()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#rig-related","title":"RIG RELATED","text":""},{"location":"blender-docs/blender-scripting/#accessing-the-posebone-and-editbones-of-a-rig","title":"Accessing the PoseBone and EditBones of a rig","text":"<p>Accessing the Edit bones</p> <pre><code>bpy.context.object.data.edit_bones # edit bones list\n\nbpy.context.object.data.edit_bones[0] \n# &gt;&gt;&gt; bpy.data.armatures['arm2']...EditBone\n\nbpy.context.object.data.edit_bones[0].name\n# &gt;&gt;&gt; 'Bone1'\n\nbpy.context.object.data.edit_bones[0].tail\n# Vector((0.0, 0.0, 0.3))\n\nbpy.context.object.data.edit_bones[0].head\n# Vector((0.0, 0.0, 0.0))\n</code></pre> <p>Accessing the Pose Bones</p> <pre><code>bpy.context.object.pose.bones\n# &gt;&gt;&gt; bpy.data.objects['arm2_obj'].pose.bones\n\nbpy.context.object.pose.bones[0] # access first in dict\n## &gt;&gt;&gt; bpy.data.objects['arm2_obj'].pose.bones[\"Bone1\"]\n</code></pre>"},{"location":"blender-docs/blender-scripting/#removedelete-all-amarture-in-bpydataarmartures","title":"remove/delete all amarture in <code>bpy.data.armartures</code>","text":"<pre><code>[bpy.data.armatures.remove(a) for a in bpy.data.armatures]\n[None, None, None]\n</code></pre>"},{"location":"blender-docs/blender-scripting/#getting-location-of-rig-or-object","title":"Getting location of rig or object","text":"<pre><code>bpy.context.active_object # &gt;&gt;&gt; bpy.data.objects['arm2_obj']\n\nbpy.context.active_object.location # &gt;&gt;&gt;  Vector((0.0, 0.5, 0.0))\n\nbpy.context.active_object.location[1] = .5\n</code></pre>"},{"location":"blender-docs/blender-scripting/#create-an-bone-in-a-new-armature-bone","title":"Create an bone in a new Armature bone","text":"<p>You can create a new armature object with <code>bpy.ops</code></p> <pre><code>    bpy.ops.object.armature_add(enter_editmode=False, align='WORLD', \n    location=(0, 0, 0), scale=(1, 1, 1))\n</code></pre> <p>then get the newly created armature object and data consequently</p> <pre><code>    bpy.context.active_object # bpy.data.objects['arm2_obj']\n    bpy.context.active_object.data # bpy.data.armatures['arm2']\n</code></pre> <p>But better still is to use the <code>bpy.data</code> instead of <code>bpy.ops</code></p> <pre><code>import bpy, mathutils\n\ndef create_bone(name, head_pos, tail_pos):\n\n    arm_name = \"arm2\"\n\n    # Create object and Data for the armature\n    arm_data = bpy.data.armatures.new(arm_name)\n    arm_obj = bpy.data.objects.new(f\"{arm_name}_obj\", arm_data)\n\n    # add it to collection and make active in view layer\n    bpy.context.collection.objects.link(arm_obj)\n    bpy.context.view_layer.objects.active = arm_obj\n\n    # Enter the edit mode\n    bpy.ops.object.mode_set(mode='EDIT')\n\n    new_bone = arm_data.edit_bones.new(name)\n    vec = mathutils.Vector(head_pos)\n    new_bone.head = vec\n    new_bone.tail = vec + mathutils.Vector(tail_pos) # example of how to set tail \n\n    # go back to object mode\n    bpy.ops.object.mode_set(mode='OBJECT')\n\n    return new_bone\n\n\ncreate_bone(\"Bone1\", (0,0,0), (0, 0.5, 1))\n</code></pre>"},{"location":"blender-docs/blender-scripting/#adding-constrainst-to-a-bone","title":"Adding constrainst to a bone","text":"<p>Make sure you are in the pose mode</p> <pre><code>bpy.context.object.pose.bones[0].constraints.new(type=\"LIMIT_LOCATION\")\n# Result: bpy.data.objects['arm2_obj'].pose.bones[\"Bone1\"].constraints[\"Limit Location\"]\n\ncons_name = \"Lim_Loc_Bone1\" # constraint_name\narm1.pose.bones[0].constraints.new(type=\"LIMIT_LOCATION\")\narm1.pose.bones[\"Bone1\"].constraints[0].name = cons_name\narm1.pose.bones[\"Bone1\"].constraints[cons_name].use_min_y = True\narm1.pose.bones[\"Bone1\"].constraints[cons_name].min_y = -0.5\n\narm1.pose.bones[\"Bone1\"].constraints[cons_name].use_max_y = True\narm1.pose.bones[\"Bone1\"].constraints[cons_name].max_y = 0.5\n\narm1.pose.bones[\"Bone1\"].constraints[cons_name].owner_space = 'LOCAL'\narm1.pose.bones[\"Bone1\"].constraints[cons_name].use_transform_limit = True\n</code></pre>"},{"location":"blender-docs/blender-scripting/#helper-functions","title":"HELPER FUNCTIONS","text":""},{"location":"blender-docs/blender-scripting/#helper-function-delectall-item","title":"Helper function : DelectAll item","text":"<p>This function will Select and delete all item specified as <code>item</code> if not specified, all selected objects in the scene will be deleted.</p> <pre><code>'''\nFunction to Select and delete all selected item specified\nif not specified, delete all selected\nitem can be:\n\n['MESH', 'CURVE', 'SURFACE', 'META', 'FONT', 'HAIR', 'POINTCLOUD', 'VOLUME', 'GPENCIL', 'ARMATURE', 'LATTICE', 'EMPTY', 'LIGHT', 'LIGHT_PROBE', 'CAMERA', 'SPEAKER']\n'''\ndef deleteAll(item = None):\n\n    if (item == None):\n        # select all objects\n        bpy.ops.object.select_all(action='SELECT')\n    else:\n        # select all by item type\n        bpy.ops.object.select_all(action='DESELECT')\n        bpy.ops.object.select_by_type(type=item)\n\n    # delete all selected\n    bpy.ops.object.delete()\n\n    # Delete unused materials\n    bpy.ops.outliner.orphans_purge(do_local_ids=True, do_linked_ids=True, do_recursive=True)\n</code></pre>"},{"location":"blender-docs/blender-scripting/#adding-and-removing-material-from-object","title":"Adding and Removing material from object","text":"<pre><code># cube = bpy.context.active_object\ncube.data.materials.append(ico_mat) # Adding material to object\ncube.data.materials.pop(index=0) # Removing material at index\ncube.active_material_index #get/set index material\n</code></pre>"},{"location":"blender-docs/blender-scripting/#blender-script-reference","title":"BLENDER SCRIPT REFERENCE","text":""},{"location":"blender-docs/blender-scripting/#node-internals","title":"Node internals","text":"<p>NodeInternal(Node) base classes \u2014 bpy_struct, Node  </p> <p>subclasses \u2014 <code>CompositorNode</code>, <code>FunctionNode</code>, <code>GeometryNode</code>, <code>NodeFrame</code>, <code>NodeGroup</code>, <code>NodeGroupInput</code>, <code>NodeGroupOutput</code>,<code>NodeReroute</code>, <code>ShaderNode</code>, <code>TextureNode</code></p> <p>https://docs.blender.org/api/current/bpy.types.NodeInternal.html#bpy.types.NodeInternal</p>"},{"location":"blender-docs/blender-scripting/#creating-a-new-node-frame","title":"Creating a new Node Frame","text":"<pre><code>frame = mat1.node_tree.nodes.new(type=\"NodeFrame\") # New Node frame\nglass = mat1.node_tree.nodes.new(type='ShaderNodeBsdfGlass')\ntrans = mat1.node_tree.nodes.new(type='ShaderNodeBsdfTransparent')\n# Adding the node Frame to Nodes\nglass.parent = frame\ntrans.parent = frame\n\n# Slightly different for node group\ngroup = mat1.node_tree.nodes.new(type='ShaderNodeGroup')\ngroup.node_tree = bpy.data.node_groups.new(\"A Group\", \"ShaderNodeTree\") # New Node\ngroup.node_tree = bpy.data.node_groups[\"NodeGroup\"] # already existing\n</code></pre> <p>list of shader Nodes https://docs.blender.org/api/current/bpy.types.ShaderNode.html</p>"},{"location":"blender-docs/blender-scripting/#creating-a-node-groupglobally","title":"Creating a Node Group(globally)","text":"<pre><code>bpy.data.node_groups.new(\"A Group\", \"ShaderNodeTree\")\n# bpy.data.node_groups['A Group']\n\nD.node_groups.new(name = \"A Group\", type =\"ShaderNodeTree\")\n# bpy.data.node_groups['A Group.001']\n</code></pre>"},{"location":"blender-docs/blender-scripting/#group-node-sample","title":"Group Node Sample","text":"<pre><code>import bpy\n\n# create a group\ntest_group = bpy.data.node_groups.new(name='testGroup', type='ShaderNodeTree')\n\n# create group inputs\ngroup_inputs = test_group.nodes.new('NodeGroupInput')\ngroup_inputs.location = (-350,0)\ntest_group.inputs.new('NodeSocketFloat','in_to_greater')\ntest_group.inputs.new('NodeSocketFloat','in_to_less')\n\n# create group outputs\ngroup_outputs = test_group.nodes.new('NodeGroupOutput')\ngroup_outputs.location = (300,0)\ntest_group.outputs.new('NodeSocketFloat','out_result')\n\n# create three math nodes in a group\nnode_add = test_group.nodes.new('ShaderNodeMath')\nnode_add.operation = 'ADD'\nnode_add.location = (100,0)\n\nnode_greater = test_group.nodes.new('ShaderNodeMath')\nnode_greater.operation = 'GREATER_THAN'\nnode_greater.label = 'greater'\nnode_greater.location = (-100,100)\n\nnode_less = test_group.nodes.new('ShaderNodeMath')\nnode_less.operation = 'LESS_THAN'\nnode_less.label = 'less'\nnode_less.location = (-100,-100)\n\n# link nodes together\ntest_group.links.new(node_add.inputs[0], node_greater.outputs[0])\ntest_group.links.new(node_add.inputs[1], node_less.outputs[0])\n\n# link inputs\ntest_group.links.new(group_inputs.outputs['in_to_greater'], node_greater.inputs[0])\ntest_group.links.new(group_inputs.outputs['in_to_less'], node_less.inputs[0])\n\n#link output\ntest_group.links.new(node_add.outputs[0], group_outputs.inputs['out_result'])\n</code></pre>"},{"location":"blender-docs/blender-scripting/#operator-class-ui-operators-view-class","title":"OPERATOR CLASS, UI OPERATORS, VIEW CLASS","text":""},{"location":"blender-docs/blender-scripting/#most-basic-class-operator","title":"Most Basic Class Operator","text":"<pre><code>import bpy\nfrom bpy.types import Operator\n\n\nclass MySimpleOp (Operator):\n    bl_idname = \"mesh.sphery\"\n    bl_label = \"Sphere Create\"\n\n\n    def execute(self, context):\n    # Add a sphere \n        bpy.ops.mesh.primitive_uv_sphere_add() \n        return{'FINISHED'}       \n\n\ndef register():\n    bpy.utils.register_class(MySimpleOp)\n\ndef unregister():\n    bpy.utils.unregister_class(MySimpleOp)\n\n\nif __name__ == \"__main__\":\n    register()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#another-operator-class-example","title":"Another Operator  Class Example","text":"<pre><code>import bpy\nfrom bpy.types import Operator\nfrom bpy.props import (\n    IntProperty,\n    FloatProperty\n)\n\nclass MESH_OT_cubeGrid(Operator):\n    \"\"\" Here is some cube grid \"\"\"\n\n\n    bl_idname = \"mesh.cube_grid\"\n    bl_label = \"Cube Grid\"\n    bl_options = {'REGISTER','UNDO'}\n\n\n    countX: IntProperty( name = 'X',\n        description = 'Number of cube in X direction',\n        default = 4, min=1, max=20\n    )\n\n\n    countY: IntProperty( name=\"Y\",\n        description=\"Number of cube in Y direction\",\n        default = 3, min=1, max=10\n    )\n\n\n    size: FloatProperty(name=\"Size\",\n        description = \"Size of the the cube\",\n        default = 0.2, min=0.1, max=1\n    )\n\n\n    # Only show in properties editor.\n    @classmethod\n    def poll(cls, context):\n        return context.area.type != 'VIEW_3D'\n\n\n    def execute(self, context):\n        for idx in range(self.countX * self.countY):\n            x = idx % self.countX\n            y = idx // self.countX\n            bpy.ops.mesh.primitive_cube_add(size=self.size, \\\n             location=(x*0.2, y*0.2, 0),scale=(1,1, \\\n                (x*x-1)*0.1))\n        print(\"----I AM THE CUBE GRID----\")\n        return {'FINISHED'}\n\n\n    # def invoke(self, context):\n    #     pass\n\n\n    # def model(self, context, event):\n    #     pass\n\n\ndef register():\n    bpy.utils.register_class(MESH_OT_cubeGrid)\n\n\ndef unregister():\n    bpy.utils.unregister_class(MESH_OT_cubeGrid)\n\n\nif __name__ == \"__main__\":\n    register()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#ui-viewoperator-class-example","title":"UI View/Operator Class Example","text":"<pre><code>import bpy\nfrom bpy.types import Panel, Operator\nimport mathutils, math\n\n\nclass VIEW3D_PT_Spery(Panel):\n    bl_space_type = \"VIEW_3D\" # Where in the UI it will show up. context.area.type\n    bl_region_type = 'UI' # region is UI header or footer\n    bl_category = \"Spery\" # name of the TAB for the panel\n    bl_label = \"Sphery Sphere\" # Name of the label in the UI\n\n\n    def draw(self, context):\n        self.layout.operator('mesh.sphery')\n        col = self.layout.column()\n        col.operator('armature.create_bone', text=\"Create bone\")\n\n\nclass MEST_OT_MySimpleOp (Operator):\n    bl_idname = \"mesh.sphery\"\n    bl_label = \"Sphere Create\"\n\n\n\n    @classmethod\n    def poll(cls, context):\n        # print(f\"My context area is : {context.area.type}\") \n        # return True\n\n        # Only show in View 3D Area.\n        return context.area.type == 'VIEW_3D' \n\n\n    def execute(self, context):\n        bpy.ops.mesh.primitive_uv_sphere_add() \n        return{'FINISHED'}       \n\n\nclass ARMATURE_OT_cb(Operator):\n    \"Create bone in edit mode at specific location \"\n    bl_idname = \"armature.create_bone\"\n    bl_label= \"New Bone from code\"\n\n\n    def execute(self, context):\n        bpy.ops.object.add(type='ARMATURE', enter_editmode=True, location=(0,0,0))\n        self.create_bone(context, \"Bone1\", (0,0,0), (0, 0.5, 1))\n        return{'FINISHED'}\n\n\n    def create_bone(self, ctx, name, head_pos, tail_pos):\n        arm = ctx.object.data\n        b1 = arm.edit_bones.new(name)\n        vec = mathutils.Vector(head_pos)\n        b1.head = vec\n        b1.tail = vec + mathutils.Vector(tail_pos) # example of how to set tail relative to head\n\n\ndef register():\n    bpy.utils.register_class(MEST_OT_MySimpleOp)\n    bpy.utils.register_class(VIEW3D_PT_Spery)\n    bpy.utils.register_class(ARMATURE_OT_cb)\n\nif __name__ == \"__main__\":\n    register()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#popup-operator-class","title":"PopUp Operator class","text":"<pre><code>import bpy\n\n\ndef draw_popup(self, context):\n    col = self.layout.column()\n    row = col.row()\n    row.label(text = \"Hello World\")\n    row = col.row()\n    row.prop(context.scene.render, 'resolution_x')\n\n\nclass ShowPopupOperator(bpy.types.Operator):\n    bl_idname = \"object.show_popup\"\n    bl_label = \"sample show popup\"\n\n\n    def invoke(self, context, event):\n        context.window_manager.popup_menu(draw_popup, title='Test this', icon='INFO')\n        return {'FINISHED'}\n\n\ndef register():\n    bpy.utils.register_class(ShowPopupOperator)\n\nif __name__ == '__main__':\n    register()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#operator-for-opening-files","title":"Operator for opening files","text":"<pre><code>import bpy\nimport os\n\nfrom bpy.props import StringProperty, BoolProperty\nfrom bpy_extras.io_utils import ImportHelper\nfrom bpy.types import Operator\n\n\nclass VIEW_OT_TestOpenFileBrowser(Operator, ImportHelper):\n\n    bl_idname = \"image.open_filebrowser\"\n    bl_label=\"Open the file browser\"\n\n    # Filter the type of selected file\n    filter_glob : StringProperty( default=\"*.jpg; *jpeg;*.png; *.tif, *.tiff\",\n                                 options={'HIDDEN'}) \n\n    # Add properties to the file browser window menu\n    test_boolean: BoolProperty(name=\"Check to test\", \n                               description=\"The description to check the something\",\n                                default=True) \n\n\n    def execute(self, context):\n        \"Do something with selected file\"\n\n        filename, extension = os.path.splitext(self.filepath)\n        print('Selected file = ', self.filepath)\n        print('File name = ', filename)\n        print('File Extension = ', extension)\n\n        return {'FINISHED'}\n\n\n\n\ndef register():\n    bpy.utils.register_class(VIEW_OT_TestOpenFileBrowser)\n\ndef unregister():\n    bpy.utils.unregister_class(VIEW_OT_TestOpenFileBrowser)\n\nif __name__ == \"__main__\":\n    register()\n</code></pre> <p>Go to your view 3d press <code>F3</code> and type the name in the <code>bl_idname</code> in our case <code>image.open_filebrowser</code></p> <p>You will have</p> <p></p> <p>You will get a file browser file like so:</p> <p></p>"},{"location":"blender-docs/blender-scripting/#operator-opening-files-2","title":"Operator Opening Files #2","text":"<pre><code>class VIEW_OT_2D_Facial_Rig(Operator, ImportHelper):\n\n    bl_idname = \"mesh.load_2d_facial_rig_image\"\n    bl_label=\"Load the 2d Rig\"\n\n    # ----------------------\n    # File dialog properties\n    files: CollectionProperty(type=bpy.types.OperatorFileListElement, options={'HIDDEN', 'SKIP_SAVE'}, ) # type: ignore\n    directory: StringProperty(subtype='FILE_PATH', options={'SKIP_SAVE', 'HIDDEN'}) # type: ignore\n\n    filter_image: BoolProperty(default=True, options={'HIDDEN', 'SKIP_SAVE'})\n    filter_movie: BoolProperty(default=True, options={'HIDDEN', 'SKIP_SAVE'})\n    filter_folder: BoolProperty(default=True, options={'HIDDEN', 'SKIP_SAVE'})\n    filter_glob : StringProperty( default=\"*.jpg; *jpeg;*.png; *.tif, *.tiff\",\n                                 options={'HIDDEN'})  # type: ignore\n\n\n    def execute(self, context):\n        \"List all the 'png' files in the selected directory\"\n        self.file_list = [os.path.join(self.directory, file) for file in os.listdir(self.directory) if file.endswith(\".png\")]\n\n        print(self.file_list)\n        print(\"&lt;=== List File Content ===&gt;\")\n        print(list(find_image_sequences(self.file_list)))\n        print(\"&lt;====================&gt;\")\n\n\n        return {'FINISHED'}\n\n\n\ndef register():\n    bpy.utils.register_class(VIEW_OT_2D_Facial_Rig)\n\ndef unregister():\n    bpy.utils.unregister_class(VIEW_OT_2D_Facial_Rig)\n\nif __name__ == \"__main__\":\n    register()\n</code></pre>"},{"location":"blender-docs/blender-scripting/#import-texture-image-as-rig-workflow","title":"IMPORT TEXTURE IMAGE AS RIG WORKFLOW","text":""},{"location":"blender-docs/blender-scripting/#1-custom-image-as-plane","title":"1. Custom image as plane","text":"<p>This is a slightly modified to allow our workflow</p> <pre><code>import bpy\n\n\ndef custom_img_as_plane(image_name, image_dir):\n\n    # Import image as mesh plane operator\n    bpy.ops.image.import_as_mesh_planes( directory=image_dir, \n                                        filepath=f\"{image_dir}{image_name}\",\n                                        files=[{\"name\":image_name, \"name\":image_name}],  \n                                        image_sequence=True,relative=False,align_axis='+X')\n\n    # Change material Image Texture node to work for animation seq.\n    bpy.data.images[image_name].source = 'SEQUENCE'\n\n    image_name_only = image_name.split('.')[0] # split e.g \"seq-01.jpg\" into ['seq-01', 'jpg'] \n    bpy.data.materials[image_name_only].node_tree.nodes[\"Image Texture\"].image_user.frame_offset = 1\n\n\nfiles_data = {\n    \"sq_00.jpg\" : \"C:/Projects/Blender/_SandBox/seq1/\",\n    \"eye_01.png\" : \"C:/Projects/Blender/_SandBox/eye_imgs/\"\n}\n\nfor k, v in files_data.items():\n    print(k, v)\n    custom_img_as_plane(k, v)\n</code></pre>"},{"location":"cmd-docs/","title":"Basic Commands","text":"<ul> <li> <p>Get the working Directory: <code>cd</code> windows, <code>pwd</code> linux</p> </li> <li> <p>Get the list of directory in current location:   <code>dir</code> windows, <code>ls</code> linux</p> </li> <li> <p>Creating a folder : <code>mkdir</code></p> </li> <li>Navigating through directory with <code>cd</code>:</li> <li><code>cd folder1</code> - change current work directory</li> <li><code>cd folder1/folder2</code> - Change directory recursive</li> <li><code>cd ..</code> - one step up directory</li> <li><code>cd../..</code>- two steps up directory</li> <li> <p><code>cd /</code> - Goto root directory</p> </li> <li> <p>Create a new file in windows:</p> </li> <li><code>cd &gt; file1.txt</code> - create new file</li> <li><code>cd. &gt; file2.txt</code> - create an empty file</li> <li><code>del file2.txt</code> - delete a file</li> <li><code>del *</code> - delete all files (this will ask Y/N prompt)</li> </ul>"},{"location":"cmd-docs/#making-directory-recursively","title":"Making directory Recursively","text":"<p>MKDIR or MD for cmd.exe</p> <ul> <li><code>mkdir somedir</code> create a single folder</li> <li><code>md  some1\\some2\\some3</code>  recursive folder creation</li> <li><code>md  some1\\some2\\some3_2</code> create another folder in already created folder</li> </ul>"},{"location":"cmd-docs/#move-filesdirectory-in-power-shell","title":"Move Files/Directory in power shell","text":"<p>cmd - <code>move-item &lt;source directory or file&gt; -destination &lt;destination directory&gt;</code></p>"},{"location":"cmd-docs/#removing-directory-recursively","title":"Removing directory Recursively","text":"<p>RMDIR or RD if you are using the classic Command Prompt (cmd.exe): <code>rd /s /q \"path\"</code> RMDIR [/S] [/Q] [drive:]path RD [/S] [/Q] [drive:]path</p> <p><code>/S</code> Removes all directories and files in the Specified directory in addition to the directory itself. Used to remove a directory tree.</p> <p><code>/Q</code> Quiet mode, do not ask if ok to remove a directory tree with /S</p> <p>If you are using PowerShell you can use Remove-Item (which is aliased to <code>del</code>, <code>erase</code>, <code>rd</code>, <code>ri</code>, <code>rm</code> and <code>rmdir</code>) and takes a -Recurse argument that can be shorted to <code>-r</code></p> <p><code>rd -r \"path\"</code></p> <ul> <li> <p>moving item from on directory to  another <code>move-item -path .\\dir1\\privateFolder -destination .\\dir2\\</code></p> </li> <li> <p>Get items that starts with \"m\" <code>D:\\&gt; get-childItem -path D:/ms_con/m*</code></p> </li> </ul>"},{"location":"cmd-docs/#settinggetting-up-environment-variable-on-windows","title":"Setting/Getting Up environment Variable on Windows","text":"<p>Getting list of environment variable</p> <p><code>dir env:</code></p> <p>Setting environment variable</p> <pre><code>&gt;&gt;&gt; $env:USER_PC_ID = '455323'\n&gt;&gt;&gt; dir env:USER_PC_ID # check specific env. var\n</code></pre>"},{"location":"cpp_docs/","title":"Introduction to CPP","text":""},{"location":"cpp_docs/#reference-and-pointers","title":"Reference and Pointers","text":"<p>Variables or Identifiers - they are like containers like say - buckets, box, cups etc. that stores data on the computer memory</p> <pre><code>int num = 2;\n\n// Reference is like a LABEL on a container,\n//  It cannot exit with assigning a container to it\nint&amp; r_num2 = num; \n\n// Pointer is like a small container ONLY stores in the LABEL of another container\nint* p_num = &amp;num; \n</code></pre>"},{"location":"cpp_docs/#working-with-strings","title":"Working with strings","text":""},{"location":"cpp_docs/#assignment-copy-and-concatenate","title":"Assignment , copy and concatenate","text":"<pre><code>using std::string;\nstring s0{ \"Mathematics \" };\nstring s1{ \"is the key to theory \" };\nstring s2 = \"Bien venue, C++\";\nstring s3(\"hello Earth\");\n\n// assignment/copy\nstring s4 = s2;\nstd::cout &lt;&lt; s4 &lt;&lt; \"\\n\";\n\n// concatenate\nstring s5 = s0 + s1;\ns5 = s2 + \" **** \" + s3;\nstd::cout &lt;&lt; s5 &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#insert-into-a-string","title":"insert into a string","text":"<pre><code>using std::string;\nstring s0{ \"Mathematics \" };\nstring s1{ \"is the key to theory \" };\n\n// insert\nstring s4 = s0 + s1;\n\n// insert at index 7, it expand the length of the string\ns4.insert(7, \"TRIX\");\n\nstd::cout &lt;&lt; s4 &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#replace-with-character","title":"Replace with <code>character</code>","text":"<pre><code>using std::string;\nstring s1{ \"the key to theory \" };\n\nstd::cout &lt;&lt; s1 &lt;&lt; \"\\n\";\n// replace(pos, n, m, c)\n// pos - index to start replace from\n// n - number of characters to replace, counting from `pos`\n// m - how many times should char. be replaced\n// c - is the character to add as replacement\n\nstring s4 = s1;\ns4.replace(11, 5, 3, 'X');\nstd::cout &lt;&lt; s4 &lt;&lt; \"\\n\";\n\nstring s5 = s1;\ns5.replace(11, 5, 8, 'X');\nstd::cout &lt;&lt; s5 &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#replace-with-substring","title":"Replace with <code>substring</code>","text":"<pre><code>    using std::string;\n    string s1{ \"the key to theory \" };\n\n    std::cout &lt;&lt; s1 &lt;&lt; \"\\n\";\n\n    // Replace using strings\n\n    // replace(pos, n, str)\n    // pos - index to start replace from\n    // n - number of characters to replace, counting from `pos`\n    // str  - strings to replace\n\n    string s4 = s1;\n    s4.replace(11, 6, \"practical\");\n    std::cout &lt;&lt; s4 &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#replace-string-with-anothe-substring","title":"Replace string with anothe substring","text":"<pre><code>    using std::string;\n    string s2 = \"Bien venue, C++\";\n    string s3{\"hello Earth\"};\n\n    std::cout &lt;&lt; \"BEFORE:\" &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; s2 &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; s3 &lt;&lt; \"\\n\\n\";\n\n    // Replace using strings\n\n    // replace(pos1, n1, str, pos2, n2)\n    // \n    //      pos1 =&gt; index in the main string\n    //      n1 =&gt; number counting from `pos1`\n    //      str  =&gt; strings to replace from\n    //      pos2 =&gt; index in the second string\n    //      n2 =&gt; number counter from `pos2`\n\n    s2.replace(0, 4, s3, 6, 5);\n\n    std::cout &lt;&lt; \"AFTER:\" &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; s2 &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#find-and-replace-strings-exercise","title":"Find and Replace strings Exercise","text":"<pre><code>using std::string;\nstring find_and_replace(string search_txt, string &amp;to_find, string &amp;to_replace ) {\n\n    size_t found_pos = search_txt.find(to_find);\n\n    // Not found\n    if (found_pos == string::npos) return \"string not found\";\n\n    // While `to_find` string is available\n    while (found_pos != string::npos) {\n\n        // Replace the string \n        search_txt.replace(found_pos, to_find.length(), to_replace);\n\n        // move forward in search string, to the character after last found\n        found_pos = search_txt.find(to_find, found_pos + to_find.length());\n    }\n\n    return search_txt;\n}\n\nint main() {\n\n    std::string s1{ \"this is Hello You Helligan is the most Hellium\\n in afriHell in Hellicarrier famous \" };\n    std::string str_to_find{ \"Hell\" };\n    std::string str_to_replace{ \"Heaven\" };\n\n    std::cout &lt;&lt; \"BEFORE: \" &lt;&lt; s1 &lt;&lt; \"\\n\\n\";\n    std::cout &lt;&lt; \"AFTER: \" &lt;&lt; find_and_replace(s1, str_to_find, str_to_replace) &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/#find-string","title":"find string","text":"<pre><code>using std::string;\nstring s2 = \"Bien venue, C++\";\nstring s3{\"C++ is saying hello Earth\"};\n\n\n// find\nsize_t found = s2.find(\"C++\");\nif (found != string::npos) std::cout &lt;&lt; \" found in `s2` at index \" &lt;&lt; found &lt;&lt; \"\\n\";\nelse  std::cout &lt;&lt; \" not found in s2 \"&lt;&lt; \"\\n\";\n\n// start search at index 10\nfound = s3.find(\"C++\", 10); \nif (found != string::npos) std::cout &lt;&lt; \" found in `s3` at index \" &lt;&lt; found &lt;&lt; \"\\n\";\nelse std::cout &lt;&lt; \" not found in s3 \" &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#erase-and-clear","title":"Erase and Clear","text":"<p><pre><code>using std::string;\nstring s2 = \"Bien venue C++\";\nstring s3{\"C++ is saying hello Earth\"};\n\n// erase(pos, count) just like in the replace(...)\ns2.erase(11, 3); // Removes C++ fromm string\n\nstd::cout &lt;&lt; s2 &lt;&lt; \"\\n\";\n\n// clear\nstd::cout &lt;&lt;\"BEFORE s3.clear() s3 is = '\" &lt;&lt; s3 &lt;&lt; \"'\\n\";\ns3.clear(); // remove all the strings\nstd::cout &lt;&lt; \"AFTER s3.clear() s3 is = '\" &lt;&lt; s3 &lt;&lt; \"'\\n\";\n</code></pre> </p>"},{"location":"cpp_docs/#exercises-string-toupper-and-tolower-in-c","title":"EXERCISES : String ToUpper and ToLower in C++","text":"<p><pre><code>#include &lt;iostream&gt;\n#include &lt;ctype.h&gt;\n\nenum class Case { UPPER, LOWER };\nstd::string To(Case c, std::string s) {\n    if (c == Case::UPPER)\n        for (int i = 0; i &lt; s.length(); i++)\n            s[i] = (char)toupper(s[i]);\n\n    if (c == Case::LOWER)\n        for (int i = 0; i &lt; s.length(); i++)\n            s[i] = (char)tolower(s[i]);\n\n    return s;\n}\n\nint main() {\n\n     std::string name1 = \"basement animation\";\n     std::string name2 = \"ADEGBITE ADEOYE\";\n\n\n    // Write C++ code here\n    std::cout &lt;&lt; name1 &lt;&lt; \" to upper = \" &lt;&lt; To(Case::UPPER, name1) &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; name2 &lt;&lt; \" to lower = \" &lt;&lt; To(Case::LOWER, name2) &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre> </p>"},{"location":"cpp_docs/#working-with-substr-in-c","title":"Working with <code>substr()</code> in C++","text":"<pre><code>int main() {\n\n    string s1 = \"dir2/dir4/dir5/dir6/dir7 \";\n\n    cout &lt;&lt; s1.substr(0, s1.find_last_of('/')) &lt;&lt; endl;   \n    //Output: dir2/dir4/dir5/dir6/ \n    cout &lt;&lt; s1.substr(s1.find_last_of('/'), s1.length()-1) &lt;&lt; endl;\n    //Ouput: /dir7\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/#working-with-string-data","title":"Working with string <code>data()</code>","text":"<p>It returns a non-null pointer of type <code>const char*</code> that points to the first character of the string's data. <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n  std::string str = \"Hello, world!\";\n\n  const char* data = str.data();\n  std::cout &lt;&lt; \"String data: \" &lt;&lt; data &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre></p>"},{"location":"cpp_docs/#working-with-stringstream","title":"Working with stringstream","text":"<p>Make sure you include <code>&lt;sstream&gt;</code></p>"},{"location":"cpp_docs/#istringstream-input-string-to-program","title":"istringstream - Input String to program","text":"<p><pre><code>int main() {\n\nstd::string hello = \"124.12+13 14\";\n\nstd::istringstream is(hello);\n\nint x{};\nint y{};\nfloat z{};\nchar buf;\nis &gt;&gt; z &gt;&gt; buf &gt;&gt; y &gt;&gt; x;\n\nstd::cout &lt;&lt; is.str() &lt;&lt; \"\\n\";\nstd::cout  &lt;&lt; \"z=\" &lt;&lt; z &lt;&lt;\", buf=\" &lt;&lt; buf  &lt;&lt; \", y=\" &lt;&lt; y &lt;&lt; \", x=\" &lt;&lt; x &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre> </p>"},{"location":"cpp_docs/#ostringstream-output-string-from-program","title":"ostringstream - Output string  from program","text":"<p><pre><code>std::ostringstream oss;\n\nint w = 45;\nfloat k = 345.32f;\nchar div = '/';\n\nfloat result = static_cast&lt;float&gt;(w / k);\n\noss &lt;&lt; w &lt;&lt; div &lt;&lt; k &lt;&lt; \"=\" &lt;&lt; result;\nstd::cout &lt;&lt; oss.str() &lt;&lt; std::endl;\n\noss &lt;&lt; \" More content\";\nstd::cout &lt;&lt; oss.str() &lt;&lt; std::endl;\noss &lt;&lt; \" + Yet Another \";\nstd::cout &lt;&lt; oss.str() &lt;&lt; std::endl;\n\noss.str(\" Replace `oss` content\");\nstd::cout &lt;&lt; oss.str() &lt;&lt; std::endl;\n</code></pre> </p>"},{"location":"cpp_docs/#read-and-convert-string-to-other-primitive-vice-versa","title":"Read and convert string to other primitive, vice versa","text":"<p><pre><code>std::stringstream ss;\nstd::vector&lt;int&gt; list{};\n\nstd::string number_list = \"23  35 -23     44 34\"; // `ss` will ingnore space\nss.str(number_list);\n\nint num{};\nwhile (ss &gt;&gt; num)\n{\n    std::cout &lt;&lt; num &lt;&lt; \"\\n\";\n    list.push_back(num);\n}\n\n// converting int to string \ndouble num1 = 345.245;\nstd::string num1_str = std::to_string(num1);\n\nint num2 = -1222;\nstd::string num2_str = std::to_string(num2);\n\n// Converting string to other primitive\n\nstd::string num3_str = \"994.4\";\nfloat num3 = std::stof(num3_str);\n\nstd::cout &lt;&lt; num3 + 111.111 &lt;&lt; std::endl;\n</code></pre> </p>"},{"location":"cpp_docs/#data-structures","title":"Data Structures","text":""},{"location":"cpp_docs/#the-stdarrays-and-stdvector","title":"The <code>std::arrays</code>  and <code>std::vector</code>","text":"<pre><code>float ages4[9]{ 1.0 }; // initialize first element and others to zero\nfloat ages5[9] = { 2.0f, 4.4f,5.0, 5 }; // initialize first four elements\n\nstd::array&lt;std::string, 10&gt; ages1{\"34\", \"3\"}; // brakect init: fills remain with empty string\nstd::array&lt;int, 10&gt; ages2 = {3, 4, 3}; // Equals init:  the first 3/10 elements init with equals\nstd::array&lt;float, 5&gt; ages3 {}; // init all value to 0.0\narray&lt;float, 5&gt; scores ={}; // same init all with 0\n\nstd::vector&lt;float&gt; age6(5, 3.5f); // fill all 5 init elements with 3.5f\nstd::vector&lt;int&gt; age7{ 3, 5, 6 }; // bracket init:  with 3 elements \nstd::vector&lt;int&gt; age8 = { 13, 15, 26, 5, 11 }; //Equals init: fills with 5 element \nstd::vector&lt;int&gt; ageCopy1 (age6); // copy array\n\nages1[5] = \"39\";\nages1[9] = \"No\";\nfor (auto &amp;i : ages1)\n{\n std::cout &lt;&lt; i &lt;&lt; \" \";\n}\n\n// Passing an `auto =&gt; std::initializer_list&lt;int&gt; li `\nauto li = { 4, 0, 200, 45 }; \nstd::vector&lt;int&gt; liVec(li.begin(), li.end());\nfor (auto var : liVec)\n std::cout &lt;&lt; var &lt;&lt; \" \";\n\nstd::cout &lt;&lt; \"\\n\";\n\n// Passing array as an initializer\nfloat ages[10] = { 3.0f };\nstd::vector&lt;float&gt; agesf(ages, ages + sizeof(ages)/sizeof(float));\n\nfor (auto&amp; i : agesf)\n std::cout &lt;&lt; i &lt;&lt; \" \";\n\nstd::cout &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/#memory-copy-function","title":"Memory copy function","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main() {\n\n  std::array &lt;float, 10&gt; score{3.0f, 5.0f, 8.2f, 5.5f};\n  std::array &lt;float, 15&gt; xp{};\n\n  memcpy(xp.data(), score.data(), sizeof(score));\n\n  std::cout &lt;&lt; xp[0] &lt;&lt; std::endl;\n  std::cout &lt;&lt; xp[1] &lt;&lt; std::endl;\n  std::cout &lt;&lt; xp[2] &lt;&lt; std::endl;\n\n  // This returns the count - 10\n  std::cout &lt;&lt; \"score.size() = \" &lt;&lt; score.size() &lt;&lt; \"\\n\";\n\n  // returns the total bytes = 10 x 4 bytes\n  std::cout &lt;&lt; \"sizeof(score) = \" &lt;&lt; sizeof(score) &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>"},{"location":"cpp_docs/#the-most-basic-multithread-example-part-1","title":"The most Basic Multithread Example : Part 1","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;chrono&gt;\n\nvoid func1(char char1){\n for (size_t i = 0; i &lt; 1000; i++)\n  std::cout &lt;&lt; char1;\n}\n\nvoid func2() {\n int i = 0;\n while (i &lt; 1000){\n  std::cout &lt;&lt; \"X\";\n  i++;\n }\n}\n\nint main()\n{\n std::thread t1{ func1, '0' };\n std::thread t2(func2);\n\n t1.join();\n t2.join();\n\n return 0;\n}\n</code></pre>"},{"location":"cpp_docs/#the-most-basic-multithread-example-part-2","title":"The Most Basic Multithread Example : Part 2","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &lt;thread&gt;\n#include &lt;chrono&gt;\n#include &lt;string&gt;\n\nusing namespace std::chrono_literals;\n\n\nvoid refresh_focast(std::map&lt;std::string, float&gt; cityForecast) {\n\n while (true) {\n  std::cout &lt;&lt; \"===========================\\n\";\n  for (auto&amp; forecast: cityForecast)\n  {\n   forecast.second++;\n   std::cout &lt;&lt; \"City : \" &lt;&lt; forecast.first &lt;&lt; \n    \", \\nTemperature: \" &lt;&lt; forecast.second &lt;&lt; \"\\n\\n\";\n\n  }\n\n  std::this_thread::sleep_for(2000ms);\n }\n}\n\n\nint main()\n{\n std::map&lt;std::string, float&gt; cityTempList{\n  {\"Lagos\", 24.0f},\n  {\"Abuja\", 15.7f},\n  {\"Adamawa\", 10.0f},\n  {\"Jos\", 2.9f}\n };\n\n std::thread worker1(refresh_focast, cityTempList);\n\n worker1.join();\n\n return 0;\n}\n</code></pre>"},{"location":"cpp_docs/#classes-and-template","title":"Classes and Template","text":"<p>When you create a function in a class and put the declaration and definition together, the compiler implicitly create an inline function.</p> <p>this is the standard way</p> A.h<pre><code>template &lt;class T&gt;\nClass A {\n  public\n  T a_func();\n\n  private:\n  T a{};\n}\n\ntemplate &lt;class T&gt;\ninline T A::a_func(){  return ...; }\n</code></pre> <p>But you can also put the definition and declaration together</p> A.h<pre><code>template &lt;class T&gt;\nClass A {\n  public\n  // the complier IMPLICITLY call :\n  // template &lt;class T&gt; inline T A::a_func()\n  T a_func(){  return ...; }\n\n  private:\n  T a{};\n}\n</code></pre>"},{"location":"cpp_docs/#namespaces-demonstration","title":"Namespaces demonstration","text":"<p>Namespaces helps use <code>Modularize</code> Code Namespaces are used to avoid name clashes either within your program or with the built in C++ functions and classes</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing std::cout, std::endl, std::cin; // using the C++17\n\nnamespace dst1{\n float Distance(int s, int r) { return (s * r) / 2; }\n int max(int a, int b) { return (a &gt; b) ? a : b; }\n}\n\nnamespace dst2{\n float Distance(int x, int y) { return (x * x + y * y) / 2; }\n\n}\n\nint main() {\n std::string name;\n cout &lt;&lt; \"Enter your name: \";\n cin &gt;&gt; name;\n cout &lt;&lt; \"Ahoyy, Your name is \"&lt;&lt; name &lt;&lt; endl;\n\n // Calling from 'dst1' namespace\n cout &lt;&lt; dst1::Distance(34, 12) &lt;&lt; endl;\n cout &lt;&lt; dst1::max(45, 500) &lt;&lt; endl;\n\n // Calling from 'dst2' namespace\n cout &lt;&lt; dst2::Distance(23, 50) &lt;&lt; endl;\n\n return EXIT_SUCCESS;\n}\n</code></pre> <p>Example of namespace Nesting</p> <pre><code>#include &lt;iostream&gt;\nusing std::cout, std::endl;\n\n\nnamespace sort {\n /** Sorting Algoorithms */\n void QuickSort() {cout &lt;&lt; \"Q-sort\" &lt;&lt; endl;}\n\n void InsertSort() {cout &lt;&lt; \"I-sort\" &lt;&lt; endl;}\n\n void BinarySort() {cout &lt;&lt; \"Bi-sort\" &lt;&lt; endl;}\n\n namespace comp {\n  /** Comp - stands for `comparison` */\n  void LessThan() {cout &lt;&lt; \"Less than \" &lt;&lt; endl;}\n\n  void GreaterThan() {cout &lt;&lt; \"Greater than \" &lt;&lt; endl;}\n } // nested \n}\n\nint main() {\n\n sort::BinarySort();\n sort::InsertSort();\n sort::comp::LessThan();\n sort::comp::GreaterThan();\n\n return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/#using-getline-to-read-lines","title":"Using Getline to read lines","text":"<p><code>Getline</code>is part of <code>string</code> library</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n std::string name;\n std::cout &lt;&lt; \"What is your name: \";\n\n std::getline(std::cin, name);\n\n if (name.find(' ') == 0) { // check for space\n  std::cout &lt;&lt; \"Space found \\n\";\n  return EXIT_FAILURE;\n }\n\n std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; std::endl;\n\n return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/#using-cmath-to-work-math-in-c","title":"Using Cmath to work math in C++","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt; // for `std::setprecision`\n#include &lt;cmath&gt;\nusing std::cout, std::endl;\n\nint main() {\n\n cout &lt;&lt; \" sqrt of 25 = \" &lt;&lt; std::sqrt(25.0f) &lt;&lt; endl;\n cout &lt;&lt; \" Max of 6, 4 = \" &lt;&lt; std::max(6, 4) &lt;&lt; endl;\n cout &lt;&lt; \"Min of 45, 78 = \" &lt;&lt; std::min(45, 78) &lt;&lt; endl;\n cout &lt;&lt; \"floor of 45.95 = \" &lt;&lt; std::floor(45.95) &lt;&lt; endl;\n cout &lt;&lt; \"ceil of 20.41 = \" &lt;&lt; std::ceil(20.41) &lt;&lt; endl;\n float var1 = 54.34454f;\n cout &lt;&lt; \" Round \"&lt;&lt;var1&lt;&lt;\" to two decimal = \" \n  &lt;&lt; std::fixed &lt;&lt; std::setprecision(2) &lt;&lt; var1 &lt;&lt; endl;\n\n\n}\n</code></pre>"},{"location":"cpp_docs/#classes-basics","title":"Classes Basics","text":""},{"location":"cpp_docs/#example-1","title":"Example 1","text":""},{"location":"cpp_docs/#baseh","title":"Base.h","text":"Base.h<pre><code>#pragma once\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nclass Car {\n\nprivate:\n std::string name= std::string(\"Unknown\"); // set default name\n float fuel{ 0.0f }; // {} to initialier\n float speed{ 0.0f };\n int passenger{ 0 };\n\npublic:\n Car();\n Car(std::string name, float amount);\n void fillFuel(float amount);\n void accelerate();\n void breake();\n void addPassenger(int passenger);\n void dashboard();\n ~Car();\n};\n</code></pre>"},{"location":"cpp_docs/#basecpp","title":"Base.cpp","text":"Base.cpp<pre><code>#include \"Base.h\"\n\nCar::Car(){\n dashboard();\n}\n\nCar::Car(std::string name, float amount){\n this-&gt;name = name;\n fuel = amount;\n\n dashboard();\n\n}\n\nvoid Car::fillFuel(float amount){\n fuel += amount;\n}\n\nvoid Car::accelerate(){\n speed++;\n fuel -= 0.5f;\n}\n\nvoid Car::breake(){\n speed = 0;\n fuel -= 0.5f;\n}\n\nvoid Car::addPassenger(int passenger){\n this-&gt;passenger += passenger;\n}\n\nvoid Car::dashboard(){\n std::cout &lt;&lt; \"&lt; ===   DASHBOARD === &gt;\\n\";\n std::cout &lt;&lt; \"Car name: \" &lt;&lt; name &lt;&lt; \"\\n\";\n std::cout &lt;&lt; \"Car fuel: \" &lt;&lt; fuel &lt;&lt; \"\\n\";\n std::cout &lt;&lt; \"Car passenger: \" &lt;&lt; passenger &lt;&lt; \"\\n\\n\";\n std::cout &lt;&lt; \"Speed: \" &lt;&lt; speed &lt;&lt; \"\\n\";\n}\n\nCar::~Car(){}\n</code></pre>"},{"location":"cpp_docs/#maincpp","title":"Main.cpp","text":"Main.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;array&gt;\n\n#include \"Base.h\"\n\nusing std::array;\nusing std::vector;\n\n\nint main() {\n\n Car c1;\n int x = 40; // fuel\n Car c2(\"Xp90\", 30);\n\n c2.addPassenger(4);\n c2.dashboard();\n\n c2.fillFuel(x);\n c2.dashboard();\n\n c2.accelerate();\n c2.accelerate();\n c2.accelerate();\n c2.accelerate();\n\n c2.dashboard();\n\n return 0;\n}\n</code></pre>"},{"location":"cpp_docs/#basic-dynamic-memory-allocation","title":"Basic Dynamic Memory allocation","text":""},{"location":"cpp_docs/#working-with-malloc","title":"Working with Malloc","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n  int* p = (int*)malloc(sizeof(int)); // allocate memory\n  *p = 5;\n  *p = *p + 7;\n  printf(\"%d\", *p); // print value\n  free(p);\n}\n</code></pre>"},{"location":"cpp_docs/#working-with-calloc","title":"Working with Calloc","text":"<pre><code>float* prices = (float*)calloc(5, sizeof(float));\n\nfor (size_t i = 0; i &lt; 5; i++)\n{\n  float val = 56.65;\n  prices[i] += val * i;\n  printf(\"%f\\n\", prices[i]);\n}\n\nfree(prices);\nprices = nullptr;\n</code></pre>"},{"location":"cpp_docs/#allocating-memory-with-new-operator","title":"Allocating memory with 'new' operator","text":"<pre><code>/*** \n  Allocating memory through `new` Operator:\n  Computer knows exactly what size 'int' so it allocate it automatically\n  One can assign default value for new allocator unlike 'malloc' \n  */\nint* p0 = new int;\nint* p1 = new int{}; // default 0\nint* p2 = new int{45}; // default 45\nint* p3 = new int(23); // default 23\n\n\n*p0 = 110;\n\nstd::cout &lt;&lt; *p0 &lt;&lt; \"\\n\";\nstd::cout &lt;&lt; *p1 &lt;&lt; \"\\n\";\nstd::cout &lt;&lt; *p2 &lt;&lt; \"\\n\";\nstd::cout &lt;&lt; *p3 &lt;&lt; \"\\n\";\n\ndelete p1, p2, p3, p0;\np1 = p2 = p3 = p0 = nullptr;\n\n// More Examples\nvoid String() \n{\n    int LENGTH = 5;\n    char* lang = new char[LENGTH];\n    strcpy_s(lang, LENGTH, \"Pyth\"); // Alloc one extra bite\n    std::cout &lt;&lt; lang &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"cpp_docs/#constant-member-functions","title":"Constant Member Functions","text":"<ul> <li>Member functions qualified with <code>const</code> keyword</li> <li>Both declaration and definition is qualified</li> <li>Such functions cannot change value of any member variables</li> <li>Useful for creating read-only functions</li> <li>Constant objects can invoke only constant member functions.</li> <li>This means all its members identifiers(variables) are also constant</li> </ul> <p>```c++ titlle=\"Person.h\"</p>"},{"location":"cpp_docs/#pragma-once","title":"pragma once","text":""},{"location":"cpp_docs/#include","title":"include  <p>class Person {   std::string username{};   bool isHealthy{};   float eneryStored{};   static int userCount;</p> <p>public:   Person();   Person(std::string);   void walk();   void displayPersonDetails() const;   static void showUserCount(); }; <pre><code>```c++ title=\"Person.cpp\"\n#include \"Person.h\"\n\nint Person::userCount = 0;\n\nPerson::Person(){\n  userCount++;\n}\n\nPerson::Person(std::string name) : username(name){\n  userCount++;\n}\n\nvoid Person::walk(){\n  this-&gt;eneryStored += 3.4f;\n}\n\nvoid Person::displayPersonDetails() const{\n  std::cout &lt;&lt; \"This person \" &lt;&lt; this-&gt;username &lt;&lt; \" has  \" &lt;&lt; this-&gt;eneryStored &lt;&lt; \" Energy.\\n\";\n}\n\nvoid Person::showUserCount() {\n  std::cout &lt;&lt; \"Total users = \" &lt;&lt; userCount &lt;&lt; \"\\n\";\n}\n</code></pre></p> Main.cpp<pre><code>#include \"Person.h\"\n\n\nint main() {\n\n  Person p1, p2, p3;\n  const Person p4(\"Pastor Iwo\");\n  //p4.walk();\n  //p4.walk();\n  //p4.walk();\n  p4.displayPersonDetails(); // read-only \n  Person::showUserCount();\n  return 0;\n}\n</code></pre>","text":""},{"location":"cpp_docs/#workning-with-constructors-and-copy-constructor","title":"workning With Constructors and Copy Constructor","text":"<p>Remember \"RULE OF 3\" if you have to implement say Destructor then all implement all of the other 2 listed and vice versa: - <code>Destructor</code> - <code>Copy constructor</code> - <code>Copy assignment operator</code></p> Integer.h<pre><code>#pragma once\n#include &lt;iostream&gt;\nclass Integer\n{\n    int* m_pInt;\n\npublic:\n  Integer();\n  Integer(int val);\n  Integer(const Integer&amp; other);\n  int getValue() const;\n  void setValue(int val);\n  int operator+(const Integer&amp; other);\n  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Integer&amp; val);\n  ~Integer();\n};\n</code></pre> Integer.cpp<pre><code>#include \"Integer.h\"\n\nInteger::Integer(){\n  m_pInt = new int(0);\n}\n\nInteger::Integer(int val){\n  m_pInt = new int(val);\n}\n\nInteger::Integer(const Integer&amp; other){\n  m_pInt = new int(other.getValue());\n}\n\nint Integer::getValue() const{\n  return *m_pInt;\n}\n\nvoid Integer::setValue(int val){\n  *m_pInt = val;\n}\n\nint Integer::operator+(const Integer&amp; other){\n  return getValue() + other.getValue();\n}\n\nInteger::~Integer(){\n  delete m_pInt;\n}\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Integer&amp; val){\n  s &lt;&lt; val.getValue();\n  return s;\n}\n</code></pre> Source.cpp<pre><code>#include \"Integer.h\"\n#include &lt;iostream&gt;\n\nvoid print(Integer x) {\n    std::cout &lt;&lt; x.getValue() &lt;&lt; std::endl;\n}\n\nInteger sum(Integer x, Integer y) {\n return x + y;\n}\n\n\n\nint main() {\n\n  Integer i1(245);\n  Integer i2(55);\n  Integer i3 = i2;\n  std::cout &lt;&lt; i1.getValue() &lt;&lt; std::endl;\n  std::cout &lt;&lt; sum(i1, i2) &lt;&lt; std::endl;\n  std::cout &lt;&lt;  i2 + i3  &lt;&lt; std::endl;\n\n}\n</code></pre>"},{"location":"cpp_docs/#delegating-constructor","title":"Delegating Constructor","text":"<p>Here is basically re-use of constructors</p> <pre><code>//Person() with No parameter\nPerson::Person(): Person(\"Anonymous\", 0)\n{\n}\n\n// Person(name) with \"name\" parameter\nPerson::Person(std::string name) : Person(name, 0)\n{\n}\n\n// Person with multiple param\nPerson::Person(std::string name, float eneryStored)\n{\n  this-&gt;username = name;\n  this-&gt;eneryStored = eneryStored;\n  userCount++;\n}\n</code></pre> <p>This helps avoid code duplications</p>"},{"location":"cpp_docs/#default-and-delete-function","title":"Default and Delete Function","text":"<p><code>default</code> is good instruct compiler to automatic invoke default construct while the <code>delete</code> prevent a member function from being called by the compiler</p> <pre><code>class Animal {\n    int legs{ 4 };\n\npublic:\n  // Compiler generate default construct implicitly\n  Animal() = default; \n\n  Animal(int no_of_legs) {\n  legs = no_of_legs;\n  }\n\n  void setLegs(int l) {\n  legs = l;\n  }\n  // Compiler should reject this func. overload\n  void setLegs(float l) = delete;\n};\n</code></pre>"},{"location":"cpp_docs/#l-values-r-values-and-r-values-references","title":"L-Values, R-values and R-Values References","text":"L-value R-value Has a name Does not have a name All variables are l-values R-value is a temp.value Can be assigned values cannot to assigned value(They are the value passed) <pre><code>int x = 5;\nfloat price = 45.99f;\n</code></pre> <p>Here <code>x</code> and <code>price</code> are L-Values, they can be assigned value, while <code>5</code> and <code>45.99f</code> are R-Values, they are temporary values.</p>"},{"location":"cpp_docs/#generating-random-number-in-c","title":"Generating Random number in C++","text":"<p>This is a simple random number generator in cpp</p> <pre><code>#include &lt;iostream&gt;\n//&lt;ctime&gt; and &lt;cstdio&gt; are already implemented in `iostream`\n//#include &lt;ctime&gt; \n//#include &lt;cstdio&gt;\n\nint main() {\n\n  std::srand(std::time(0));\n\n  int val{};\n  std::cout &lt;&lt; \"Write - &lt;1&gt; to continue &lt;0&gt; to quit:  \";\n  std::cin &gt;&gt; val;\n\n  while (val != 0)\n  {\n  std::cout &lt;&lt; \"Random number \" &lt;&lt; std::rand() &lt;&lt; \"\\n\";\n  std::cin &gt;&gt; val;\n  }\n\n    return 0;\n}\n</code></pre> Random Number Result"},{"location":"cpp_docs/03_oop_inheritance/","title":"Working with Basic Inheritance - Accounting as Demo","text":""},{"location":"cpp_docs/03_oop_inheritance/#using-account-class-as-base-and-other-inherited-class","title":"Using account class as base and other inherited class","text":"<p>Structure    <code>|_ Account.h , Account.cpp</code> <code>|_Savings.h , Savings.cpp</code> <code>Source.cpp - main()</code></p>"},{"location":"cpp_docs/03_oop_inheritance/#class-account-v1-without-virtual-function-code","title":"class Account v1 - Without Virtual function - code","text":"Account.h<pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass Account\n{\nprivate:\n    std::string m_Name{};\n    uint32_t m_AccNo{0};\nprotected:\n    float m_AccBal{};\npublic:\n    static uint32_t s_genAccNum;\n\n    Account(const std::string&amp; name, float balance);\n\n    void Deposit(float amount);\n    void Withdrawal(float amount);\n    void AccumulateInterest() override;\n    float GetInterestRate() override;\n\n    const std::string&amp; GetName() const;\n    uint32_t GetAccountNo() const;\n    float GetAccountBal() const;\n\n    ~Account();\n};\n</code></pre> Account.cpp<pre><code>#include \"Account.h\"\n\nuint32_t Account::s_genAccNum = 1000000;\n\nAccount::Account(const std::string&amp; name, float balance): m_Name(name),m_AccBal(balance){\n    if (m_AccNo == 0) m_AccNo = ++s_genAccNum;\n\n}\n\n\nvoid Account::Deposit(float amount){\n    if (amount &gt; 0.0) m_AccBal += amount;\n    else std::cout &lt;&lt; \"Invalid Deposit amount\\n\";\n}\n\n\nvoid Account::Withdrawal(float amount){\n    if (m_AccBal &gt;= amount) m_AccBal -= amount;\n    else std::cout &lt;&lt; \"Withdraw limit Exceeded\\n\";\n}\n\nvoid Account::AccumulateInterest(){}\n\nfloat Account::GetInterestRate(){\n    return 0.0f;\n    }\n\nconst std::string&amp; Account::GetName() const{\n    return m_Name;\n    }\n\nuint32_t Account::GetAccountNo() const{\n    return m_AccNo;\n    }\n\nfloat Account::GetAccountBal() const{\n    return m_AccBal;\n    }\n\nAccount::~Account(){}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#class-savings-code","title":"class Savings - code","text":"Savings.h<pre><code>#pragma once\n#include \"Account.h\"\n\nclass Savings : public Account\n{\n    float m_Rate;\npublic:\n    Savings(const std::string&amp; name, float bal, float rate);\n\n    void AccumulateInterest();\n    float GetInterestRate();\n\n    ~Savings();\n};\n</code></pre> Savings.cpp<pre><code>#include \"Savings.h\"\n\n\nSavings::Savings(const std::string&amp; name, float bal, float rate)\n    :Account(name, bal), m_Rate(rate)\n{}\n\nvoid Savings::AccumulateInterest(){\n    m_AccBal += (m_AccBal * m_Rate);\n}\n\nfloat Savings::GetInterestRate(){\n    return m_Rate;\n}\n\nSavings::~Savings(){}\n</code></pre> Source.cpp<pre><code>#include &lt;iostream&gt;\n//&lt;ctime&gt; and &lt;cstdio&gt; are already implemented in `iostream`\n//#include &lt;ctime&gt; \n//#include &lt;cstdio&gt;\n#include \"Savings.h\"\n\n\nint main() {\n\n    Savings sadeAcc(\"Sade Adu\", 3200, 0.1);\n\n    std::cout &lt;&lt; \"Account Number is : \" &lt;&lt; sadeAcc.GetAccountNo() &lt;&lt; \"\\n\";\n    sadeAcc.Deposit(1200);\n    sadeAcc.Withdrawal(3450);\n    std::cout &lt;&lt; \"Sade's Account Balance (Before Interest) is : \" &lt;&lt; sadeAcc.GetAccountBal() &lt;&lt; \"\\n\";\n    sadeAcc.AccumulateInterest();\n    sadeAcc.AccumulateInterest();\n    std::cout &lt;&lt; \"Sade's Account Balance (After Interest) is : \" &lt;&lt; sadeAcc.GetAccountBal() &lt;&lt; \"\\n\";\n\nreturn 0;\n\n}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#class-checkings","title":"class Checkings","text":"Checkings.h<pre><code>#pragma once\n#include \"Account.h\"\n\nclass Checkings :public Account\n{\npublic:\n    Account::Account;\n    //Checkings(const std::string name, float balance);\n\n    void Withdrawal(float amount);\n\n    ~Checkings();\n};\n</code></pre> Checkings.cpp<pre><code>#include \"Checkings.h\"\n\n//Checkings::Checkings(const std::string name, float balance)\n//  : Account(name, balance)\n//{}\n\nvoid Checkings::Withdrawal(float amount)\n{\n    float temp_bal = m_AccBal - amount;\n    if (temp_bal &gt; 50)\n        Account::Withdrawal(amount);\n    else\n        std::cout &lt;&lt; \"The minimum Bal. in Checking should be $50\\n\";\n    }\n\nCheckings::~Checkings(){}\n</code></pre> <p>Note</p> <p>When you just want to inherent the base class default constructor into the derived cpp11 has a simpler approach</p> <pre><code>//instead of :\nSomeAccount:public Account{\npublic: \n    SomeAccount(string name, float amount)\n            : Account(name, amount);\n    ...\n}\n</code></pre> <pre><code>// you can do :\nSomeAccount:public Account{\npublic: \n   using Account::Account\n    ...\n}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#using-virtual-mechanism-of-inheritance","title":"Using Virtual Mechanism of Inheritance","text":"<p>The most significant importance of <code>virtual Mechanism</code> of Inheritance is when a base class has many derived classes inherited from it. So you can have a say a function that has a base class pointer as parameter and when you call the function, you can pass the different derived class reference and it will call the override function of the derived classes instead of the base</p> <p>Example of virtual Member example:</p> <p>Let say we have this two Account classes <code>SavingsAcc</code> and <code>FamilySavingsAcc</code> inheriting from <code>Account</code> class.</p> <p>Here is our account class :</p>"},{"location":"cpp_docs/03_oop_inheritance/#class-account-with-virtual-function-code","title":"class Account With Virtual function - code","text":"Account.h<pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n\nclass Account\n{\nprivate:\n    std::string m_Name{};\n    uint32_t m_AccNo{0};\n    protected:\n    float m_AccBal{};\n    public:\n    static uint32_t s_genAccNum;\n\n    Account(const std::string&amp; name, float balance);\n\n    virtual void Deposit(float amount);\n    virtual void Withdrawal(float amount);\n    virtual void AccumulateInterest();\n    virtual float GetInterestRate();\n\n    const std::string&amp; GetName() const;\n    uint32_t GetAccountNo() const;\n    float GetAccountBal() const;\n\n    virtual ~Account();\n};\n</code></pre> <p>The 4 class member functions and the Destructor are marked as virtual members. This are the functions that will have different implementations other than the base class.</p> <p>Warning</p> <p>it is important to mark the destructor function a virtual too. Or else one will run into issue when switching the different classes </p> <p>Nothing really changes in the declaration as it was before</p>"},{"location":"cpp_docs/03_oop_inheritance/#class-savingsacc-code","title":"class SavingsAcc - code","text":"SavingsAcc.h<pre><code>#pragma once\n#include \"Account.h\"\n\nclass SavingsAcc : public Account\n{\n    float m_Rate;\npublic:\n    SavingsAcc(const std::string&amp; name, float bal, float rate);\n\n    void Deposit(float amount) override;\n    void Withdrawal(float amount) override;\n    void AccumulateInterest();\n    float GetInterestRate() override;\n\n    ~SavingsAcc();\n};\n</code></pre> SavingsAcc.cpp<pre><code>#include \"SavingsAcc.h\"\n\n\nSavingsAcc::SavingsAcc(const std::string&amp; name, float bal, float rate)\n    :Account(name, bal), m_Rate(rate)\n{\n    std::cout &lt;&lt; \"|____SavingsAcc(name, bal, rate) \\n\";\n}\n\nvoid SavingsAcc::Deposit(float amount)\n{\n    std::cout &lt;&lt; \"NOTE that 0.1% of will be added to your account\\n\";\n    m_AccBal += (amount * 0.1);\n\n    Account::Deposit(amount);\n}\n\nvoid SavingsAcc::Withdrawal(float amount){\n    std::cout &lt;&lt; \"NOTE that 0.05% of the withdrawn amount will be deducted\\n\";\n    Account::Withdrawal(amount);\n    m_AccBal -= (amount * 0.05);\n\n}\n\nvoid SavingsAcc::AccumulateInterest()\n{\n    float interest = (m_AccBal * m_Rate);\n    std::cout &lt;&lt; \"Accumulating a Savings interest of \" &lt;&lt; interest &lt;&lt; \"\\n\";\n    m_AccBal += interest;\n\n}\n\nfloat SavingsAcc::GetInterestRate(){ return m_Rate;}\n\nSavingsAcc::~SavingsAcc()\n{\n    std::cout &lt;&lt; \"|____~SavingsAcc() \\n\";\n}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#class-familysavingsacc-code","title":"class FamilySavingsAcc - code","text":"FamilySavingsAcc.h<pre><code>#pragma once\n#include \"Account.h\"\nclass FamilySavingsAcc : public Account\n{\n    float m_Rate{};\n\npublic:\n\n    FamilySavingsAcc(const std::string&amp; FamName, float amount, float rate);\n    ~FamilySavingsAcc();\n};\n</code></pre> FamilySavingsAcc.cpp<pre><code>#include \"FamilySavingsAcc.h\"\n\nFamilySavingsAcc::FamilySavingsAcc(const std::string&amp; FamName, float amount, float rate)\n    :Account(FamName, amount), m_Rate(rate)\n{\n    std::cout &lt;&lt; \"|____FamilySavingsAcc(name, bal, rate) \\n\";\n}\n\n\nvoid FamilySavingsAcc::AccumulateInterest(){\nb\n}\n\nFamilySavingsAcc::~FamilySavingsAcc()\n{\n    std::cout &lt;&lt; \"~|____FamilySavingsAcc() \\n\";\n}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#function-transactions-code","title":"function Transactions - code","text":"Transactions.h<pre><code>#pragma once\n#include \"Account.h\";\n#include &lt;ctype.h&gt;;\n\nenum class Transact{ WITHDRAW, DEPOSIT};\nenum class Case { UPPER, LOWER };\n\n\nstd::string To(Case c, std::string s);\n\nvoid Transaction(Transact tType, Account* a, float amount);\n</code></pre> Transactions.cpp<pre><code>#include \"Transaction.h\"\n\n\nstd::string To(Case c, std::string s) {\n    if (c == Case::UPPER)\n        for (int i = 0; i &lt; s.length(); i++)\n            s[i] = (char)toupper(s[i]);\n\n    if (c == Case::LOWER)\n        for (int i = 0; i &lt; s.length(); i++)\n            s[i] = (char)tolower(s[i]);\n\n    return s;\n}\n\nvoid Transaction( Transact tType, Account* a, float amount)\n{\n\n    std::cout &lt;&lt; \"\\n Initialize transaction for : '\" &lt;&lt; To(Case::UPPER, a-&gt;GetName()) &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"Your Initial Balance : \" &lt;&lt; a-&gt;GetAccountBal() &lt;&lt; \"\\n\";\n\n    if (tType == Transact::WITHDRAW){\n        std::cout &lt;&lt; \"+++ WITHDRAW - Transaction Started \\n\";\n        a-&gt;Withdrawal(amount);\n        a-&gt;AccumulateInterest();\n    }\n    else if (tType == Transact::DEPOSIT){\n        std::cout &lt;&lt; \"+++ DEPOSIT - Transaction Started \\n\";\n        a-&gt;Deposit(amount);\n        a-&gt;AccumulateInterest();\n    }\n\n    std::cout &lt;&lt; \"Interest Rate :\" &lt;&lt; a-&gt;GetInterestRate() &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"Final Account Balance : \" &lt;&lt; a-&gt;GetAccountBal() &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#sourcecpp","title":"Source.cpp","text":"<p>Finally, source for Execution</p> Source.cpp<pre><code>#include &lt;iostream&gt;\n#include \"SavingsAcc.h\"\n#include \"FamilySavingsAcc.h\"\n#include \"Transaction.h\"\n\n\nint main() {\n\n    // Mrs. Sade Account transactions Details\n    SavingsAcc sadeAcc(\"Sade Adu\", 3200.0f, 0.1f);\n\n    Transaction(Transact::WITHDRAW , &amp;sadeAcc, 3000.0f);\n    Transaction(Transact::DEPOSIT, &amp;sadeAcc, 1000.0f);\n\n    // The Akada Family transactions\n    FamilySavingsAcc akadaFamily(\"Mr&amp;Mrs Akada\", 2000, 0.2f);\n    Transaction(Transact::WITHDRAW, &amp;akadaFamily, 500.0f);\n\n    return 0;\n}\n</code></pre> <p>Here is the output</p> <p></p>"},{"location":"cpp_docs/03_oop_inheritance/#working-with-typeid-class-cast-finding-the-type-of-class","title":"Working with typeid, class cast - Finding the type of class","text":""},{"location":"cpp_docs/03_oop_inheritance/#using-type_info","title":"Using type_info","text":"<pre><code>#include &lt;typeinfo&gt;\n\nint main(){\n    const std::type_info&amp; ti = typeid(sadeAcc);\n    std::cout &lt;&lt; \"The class type is : \" &lt;&lt; ti.name() &lt;&lt; \"\\n\";\n\n    if(typeid(*acc1) == typeid(FamilySavingsAcc))\n        std::cout &lt;&lt; \"This is family Savings \" &lt;&lt; \"\\n\";\n    else \n        std::cout &lt;&lt; \"This is Account \"  &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#upcast-examples","title":"upcast Examples","text":"<pre><code>    // Stack\n    FamilySavingsAcc fs0(\"name1\", 323, 0.1);\n    Account* acc0 = &amp;fs0;\n\n    // Using heap\n    Account* acc1 = new FamilySavingsAcc(\"name\", 300, 0.2); \n    ...\n    delete acc1;// rememeber to delete from heap\n</code></pre>"},{"location":"cpp_docs/03_oop_inheritance/#downcast-examples","title":"Downcast Examples","text":"<pre><code>    // Downcast using reference\n    Account acc2(\"SomeOneName_Ref\", 1500);\n    FamilySavingsAcc&amp; fs1 = static_cast&lt;FamilySavingsAcc&amp;&gt;(acc2);\n    std::cout &lt;&lt; \"The family name is : \" &lt;&lt; fs1.getFamilyName() &lt;&lt; \"\\n\";\n\n    // Downcast using pointer\n    Account acc3(\"SomeOneName_Ptr\", 1499);\n    FamilySavingsAcc* fs2 = static_cast&lt;FamilySavingsAcc*&gt;(&amp;acc3);\n    std::cout &lt;&lt; \"The family name is : \" &lt;&lt; fs2-&gt;getFamilyName() &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/04_exception_handling/","title":"Exception Handling in CPP","text":""},{"location":"cpp_docs/04_exception_handling/#basics-of-exception-handling","title":"Basics of Exception Handling","text":"<pre><code>#include &lt;iostream&gt;\n\nint ProcessRecords(int count) {\n    int* pArr = (int*)malloc(count * sizeof(int));\n    if (pArr == nullptr)\n        throw std::runtime_error(\"Failed to allocate memory\");\n\n    for (int i = 0; i &lt; count; i++)\n        pArr[i] = i * 2;\n\n    free(pArr);\n    return 0;\n}\n\n\nint main() {\n    try{\n        ProcessRecords(std::numeric_limits&lt;int&gt;::max() * 12000000);\n    }\n    catch (std::runtime_error&amp; ex){\n        std::cout &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/04_exception_handling/#multi-exception-handling","title":"Multi-Exception Handling","text":""},{"location":"cpp_docs/04_exception_handling/#example-i","title":"Example I","text":"<pre><code>#include &lt;iostream&gt;\n\nint ProcessRecords(uint64_t count) {\n\n    // Count should always greater than 10\n    if (count &lt; 10)\n        throw std::out_of_range(\"Count should be greater than 10\");\n\n    // Mem. alloc using `malloc`\n    int* pArr = (int*)malloc(count * sizeof(int));\n\n    // Mem. alloc using `new`\n    int* p = new int[count];\n\n    if (pArr == nullptr)\n        throw std::runtime_error(\"Failed to allocate memory\");\n\n    for (int i = 0; i &lt; count; i++)\n        pArr[i] = i * 2;\n\n    free(pArr);\n    return 0;\n}\n\n\n    int main() {\n    try{\n        uint64_t val = 12233444555555555555;\n        constexpr uint64_t val2 = std::numeric_limits&lt;int&gt;::max();\n\n        std::cout &lt;&lt; \"val2 = \" &lt;&lt; val2 &lt;&lt; \"\\n\";\n        ProcessRecords(val);\n    }\n    // From thrown exception : bad malloc\n    catch (std::runtime_error&amp; ex){\n        std::cout &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n    // From thrown exception: Out of Range exception\n    catch (std::out_of_range&amp; ex) {\n        std::cout &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n    // Internal exception: Catch Bad memory allocation from `new` keyword\n    catch (std::bad_alloc&amp; ex){ \n        std::cout &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n    catch (std::exception&amp; ex) {\n        std::cout &lt;&lt; ex.what() &lt;&lt; \"\\n\";\n    }\n\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/04_exception_handling/#example-ii","title":"Example II","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\n\nvoid ProcessData(int count) {\n\n    // replaces `int* pArray = (int*) malloc(count * sizeof(int));`\n    // instead of initializing you could also call `pArray.reserve(count);`\n    std::vector&lt;int&gt; pArray(count);\n\n    if (count &lt; 10)\n        throw std::out_of_range(\"must be greater than 10\");\n\n    for (size_t i = 0; i &lt; count; i++){\n        int val = i * 2;\n        std::cout  &lt;&lt; val  &lt;&lt; \" \";\n        pArray.push_back(val);\n    }\n}\n\n\nint main() {\n    try{\n        ProcessData(std::numeric_limits&lt;int64_t&gt;::max()); // Throw vector too long\n    }\n    catch (const std::exception&amp; ex){\n        std::cout &lt;&lt; \" ERROR:: \" &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/04_exception_handling/#stack-unwinding-during-throw","title":"Stack Unwinding - During throw","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nclass Test {\nstd::string m_Name;\npublic:\n    Test(const std::string&amp; name) : m_Name(name){ std::cout &lt;&lt; \"Test( \"&lt;&lt; name &lt;&lt; \"):Acquire resources\" &lt;&lt; std::endl; }\n    ~Test() { std::cout &lt;&lt; \"Test(\"&lt;&lt;m_Name&lt;&lt;\"): Release resources\" &lt;&lt; std::endl; }\n};\n\nvoid ProcessData(int32_t a) {\n\n    Test t1(\"T1\");\n    Test t2(\"T2\");\n\n    // for objects \n    // This replaces `Test* t1 = new Test(\"T-01\")`\n    std::unique_ptr&lt;Test&gt; t1(new Test(\"T-01\")); \n    std::unique_ptr&lt;Test&gt; t2(new Test(\"T-02\"));\n\n\n    std::vector&lt;int&gt; points;\n    points.reserve(a); // Reserve mem. space - it throw bad_alloc error if failed\n\n\n    if (a &lt; 10)\n        throw std::out_of_range(\"Must be greater 10\");\n}\n\nint main() {\n\n    try{\n        ProcessData(9);\n    }\n    catch (const std::exception&amp; ex){\n        std::cout &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/04_exception_handling/#nesting-exception-handling","title":"Nesting Exception Handling","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;random&gt;\n\n\nvoid ProcessData(int count) {\n\n    // replaces `int* pArray = (int*) malloc(count * sizeof(int));`\n    // instead of initializing you could also call `pArray.reserve(count);`\n    std::vector&lt;int&gt; pArray(count);\n\n    if (count &lt; 10)\n        throw std::out_of_range(\"must be greater than 10\");\n\n\n    std::default_random_engine eng;\n    std::bernoulli_distribution dist;\n    int errors{};\n\n    for (size_t i = 0; i &lt; count; i++){\n        int val = i * 2;\n        std::cout  &lt;&lt; val  &lt;&lt; \" \" &lt;&lt; dist(eng) &lt;&lt;\"\\n\";\n        pArray.push_back(val);\n    }\n\n    for (size_t i = 0; i &lt; count; i++)\n    {\n        try {\n            std::cout &lt;&lt; \"Processing Record # : \" &lt;&lt; i &lt;&lt; \" \";\n            if (dist(eng)) {\n                ++errors;\n                throw std::runtime_error(\"Could not process the record\");\n            }\n            std::cout &lt;&lt; std::endl;\n        }\n        catch (std::runtime_error&amp; ex) {\n            std::cout &lt;&lt; \"[ERROR \" &lt;&lt; ex.what() &lt;&lt; \"] \" &lt;&lt; std::endl;\n            if (errors &gt; 4){\n                std::runtime_error err(\"Too many errors, Abandoning operation\");\n                ex = err;\n                throw;\n            }\n        }\n    }\n}\n\n\nint main() {\n    try{\n        //ProcessData(std::numeric_limits&lt;int64_t&gt;::max()); // Throw vector too long\n        ProcessData(20); // Throw vector too long\n    }\n    catch (const std::exception&amp; ex){\n        std::cout &lt;&lt; \" ERROR:: \" &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/04_exception_handling/#exception-handling-with-constructor-an-destructor","title":"Exception Handling with Constructor an Destructor","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n#include &lt;vector&gt;\n\nclass A\n{\npublic:\n    A() { std::cout &lt;&lt; \"A() \" &lt;&lt; std::endl; }\n    ~A() { std::cout &lt;&lt; \"~A() \" &lt;&lt; std::endl; }\n};\n\nclass B\n{\npublic:\n    B() { std::cout &lt;&lt; \"B() \" &lt;&lt; std::endl; }\n    ~B() { std::cout &lt;&lt; \"~B() \" &lt;&lt; std::endl; }\n};\n\nclass Test\n{\n    std::unique_ptr&lt;A&gt; pA{};//A* pA{};\n    B b{};\n    std::unique_ptr&lt;int&gt; pInt{};//int* pInt{};\n    std::string pStr{}; //char* pStr{};\n    std::vector&lt;int&gt; pArr{}; //int* pArr{};\n\npublic:\n    Test() {\n        std::cout &lt;&lt; \"Test() Acquire resources \" &lt;&lt; std::endl;\n        pA.reset(new A);//pA = new A;\n        pInt.reset(new int);//pInt = new int;\n        throw std::runtime_error(\"Can't Initialize \");\n        pStr.reserve(1000);//pStr = new char[1000];\n        pArr.reserve(50000);//pArr = new int[50000];\n    }\n    ~Test() {\n        std::cout &lt;&lt; \"~Test() Release resources \" &lt;&lt; std::endl;\n        // delete pA;\n        //delete pInt;\n        //delete[] pStr;\n        //delete[] pArr;\n    }\n\n};\n\nint main() {\n    try {\n        Test t;\n    }\n    catch (std::runtime_error&amp; ex) {\n        std::cout &lt;&lt; ex.what() &lt;&lt; \"\\n\";\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/","title":"File Handling in CPP","text":""},{"location":"cpp_docs/05_file_handling/#raw-string-literals","title":"Raw string Literals","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    std::string file0(R\"(C\\noname\\table\\radiation.dll)\");\n    std::cout &lt;&lt; file0 &lt;&lt; std::endl;\n    file0 = R\"(&lt;html&gt;\\table too are good \\number &lt;/html&gt;)\";\n    std::cout &lt;&lt; file0 &lt;&lt; std::endl;\n    // You can use any reasonable string convention before/after the brackets\n    // R\"xy(...)xy\";\n    // R\"GLSL(...)GLSL\";\n    // R\"Msc(...)Msc\";\n    std::string file1{ \n    R\"!#(\n    C:\\users\\temp\\radar1\\newfile.txt;\n    C:\\users\\temp\\radar2\\newfile2.txt;\n    )!#\" };\n\n\n    std::cout &lt;&lt; file1.c_str() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#reading-file-basics-in-cpp","title":"Reading File basics in CPP","text":""},{"location":"cpp_docs/05_file_handling/#reading-file-example-i","title":"Reading File Example I","text":"<p><pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\nint main() {\n    std::ifstream rd(\"data.txt\");\n    if (!rd.fail()) \n        std::cout &lt;&lt; rd.rdbuf()&lt;&lt; std::endl;\n\n    else std::cout &lt;&lt; \"fail to read file\" &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> </p>"},{"location":"cpp_docs/05_file_handling/#reading-and-writing-file-basic-example-iii","title":"Reading and Writing File Basic Example III","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\nvoid ReadFile(const std::string&amp; filename) {\n    std::ifstream in(filename);\n    /* You can also do:\n        std::ifstream in;\n        in.open(filename);*/\n    std::string str;\n    int val{};\n    std::getline(in, str);\n    in &gt;&gt; val;\n    std::cout &lt;&lt; str &lt;&lt; \" \" &lt;&lt; val &lt;&lt; \"\\n\";\n    in.close();\n}\n\nvoid WriteFile(const std::string&amp; filename) {\n    std::ofstream out(filename);\n    /* You can also do:\n        std::ifstream out;\n        out.open(filename);*/\n    out &lt;&lt; \"Writing Some Docs \\n\";\n    out &lt;&lt; 404 &lt;&lt; \"\\n\";\n    out.close();\n }\n\nint main() {\n    std::string fileStr = \"data.txt\";\n    WriteFile(fileStr);\n    ReadFile(fileStr);\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#reading-file-example-iii","title":"Reading File Example III","text":"<pre><code>#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n\n std::string ReadFile(const std::string&amp; filename) {\n    std::ifstream in(filename);\n    std::stringstream ss;\n    if (!in.fail())\n        ss &lt;&lt; in.rdbuf();\n    else\n        std::cout &lt;&lt; \"fail to load file \\n\";\n    return ss.str();\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#error-handling-during-file-operation","title":"Error Handling during file operation","text":""},{"location":"cpp_docs/05_file_handling/#error-handling-example","title":"Error Handling Example","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;cstdio&gt;\n\n void ReadFile(const std::string&amp; filename) {\n    std::ifstream in(filename);\n    if (in.fail()){\n        std::cout &lt;&lt; \"ERROR:: Could not open the file\" &lt;&lt; std::endl;\n        return;\n    }\n    std::string str;\n    int val{};\n    std::getline(in, str);\n    in &gt;&gt; val;\n    //in &gt;&gt; val;\n    if (in.eof()) std::cout &lt;&lt; \"End of file Encountered\" &lt;&lt; std::endl;\n    if (in.fail()) std::cout &lt;&lt; \"ERROR:: Could not read\" &lt;&lt; std::endl;\n    if (in.good()) std::cout &lt;&lt; \"I/O Operation Successful\\n\";\n    else std::cout &lt;&lt; \"ERROR:: I/O Operation Failed \\n\";\n\n    std::cout &lt;&lt; str &lt;&lt; \" \" &lt;&lt; val &lt;&lt; \"\\n\";\n    in.clear();\n    in.close();\n    }\n\n    void WriteFile(const std::string&amp; filename) {\n        std::ofstream out(filename);\n        out &lt;&lt; \"Writing Some Docs \\n\";\n        out &lt;&lt; 888 &lt;&lt; \"\\n\";\n        out.close();\n    }\n\n    int main() {\n    std::string fileStr = \"Data.txt\";\n    WriteFile(fileStr);\n    ReadFile(fileStr);\n\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#is_open-vs-fail","title":"<code>is_open()</code> vs <code>fail()</code>","text":"<p>std::ifstream::fail can return true, even if std::ifstream::is_open returns true; they are not the mutually exclusive.</p> <p><code>.fail</code> will check the overall \"health\" of the stream, which involves things such as checking the stream has currently entered a fail state from trying to read an invalid value, whereas <code>.is_open</code> will only check if the stream is currently attached to a file, <code>.is_open</code> doesn't care if the stream is in a fail state, or not.</p> <p>But in general use what makes your code most readable.</p> <p>FailError source </p> <p>Note you can also do this:</p> <pre><code>if (some_stream) {\n  // stream is alive and well\n} else {\n  // something is wrong\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#deleting-file","title":"Deleting File  <pre><code>#include &lt;cstdio&gt;\n\nint status = remove(\"SomeFile.txt\");\nif (status == 0) \n    std::cout &lt;&lt; \"File Successfully deleted\";\nelse \n    std::cout &lt;&lt; \"Error deleting file\";\n</code></pre>","text":""},{"location":"cpp_docs/05_file_handling/#working-with-filesystem-in-cpp","title":"Working with <code>filesystem</code> in cpp Main.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;filesystem&gt;\n\nusing namespace std;\nnamespace fs = std::filesystem;\n\nint main() {\n\n    fs::path currentFile(__FILE__);\n    cout &lt;&lt; \"Current Path is: \" &lt;&lt; fs::current_path()&lt;&lt; \"\\n\";\n    cout &lt;&lt;\"Absolute file path of current File: \" &lt;&lt; __FILE__ &lt;&lt; \"\\n\";\n    cout &lt;&lt; R\"(Absolute path(\\w escape) : )\" &lt;&lt; fs::absolute(currentFile) &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"File name(with extension) : \" &lt;&lt; currentFile.filename() &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"File name only: \" &lt;&lt; currentFile.stem() &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"Extension only: \" &lt;&lt; currentFile.extension() &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>    <pre><code>    fs::path dest(\"somedir1/somedir2/Copy.cpp\"); // default to current path\n\n    cout &lt;&lt; \"Parent path : \" &lt;&lt; dest.parent_path() &lt;&lt; endl;\n    cout &lt;&lt; \"Relative path : \" &lt;&lt; dest.relative_path() &lt;&lt; endl;\n    cout &lt;&lt; \"Parent path (string) : \" &lt;&lt; dest.parent_path().string() &lt;&lt; endl; // `.string()` removes the double quotes\n    cout &lt;&lt; \"Filename : \" &lt;&lt; dest.filename() &lt;&lt; endl;\n    cout &lt;&lt; \"Absolute Path : \" &lt;&lt; fs::absolute(dest) &lt;&lt; endl;\n</code></pre>","text":""},{"location":"cpp_docs/05_file_handling/#creating-new-directory-with-filesystem","title":"Creating New Directory With FileSystem","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;filesystem&gt;\nusing namespace std;\nnamespace fs = std::filesystem;\n\nint main() {\n    string dir = \"somedir1/somedir2/\";\n    fs::path dest;\n    if(!fs::exists(dir)){ // check if file exist\n        if (fs::create_directories(dir) == 0) // no error creating\n            cout &lt;&lt; \"new dir created ... \\n\";\n    }\n    else \n        cout &lt;&lt; \"existing directory\" &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#creating-new-directories-directory-with-filesystem","title":"Creating new directories / directory with Filesystem","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;filesystem&gt;\nusing namespace std;\nnamespace fs = std::filesystem;\n\nint main() {\n\n    //fs::path source(\"\"); // relative dir.\n    string dir = \"somedir1/somedir2/\";\n    fs::path dest(dir); // default to current path\n\n    cout &lt;&lt; boolalpha &lt;&lt; fs::exists(dest) &lt;&lt; endl;\n    cout &lt;&lt; boolalpha &lt;&lt; fs::create_directories(dest) &lt;&lt; endl;\n    cout &lt;&lt; boolalpha &lt;&lt; fs::exists(dest) &lt;&lt; endl;\n    if(!fs::exists(dest)){\n        if (fs::create_directories(dest) == false) // no error creating directories\n            cout &lt;&lt; \"new dir created ... \\n\";\n    }\n    else cout &lt;&lt; \"existing directory\" &lt;&lt; endl;\n\n    if (fs::create_directory(dest / \"otherdir\") == true) {\n        cout &lt;&lt; \"Extra directory created...\\n\";\n    }\n\n    dest = dest/\"data.txt\";\n\n    ofstream out(dest);\n    if (out.is_open())\n        out &lt;&lt; \"we are writing some \\n from File System\\n\";\n    out &lt;&lt; 12345 &lt;&lt; endl;\n    if (out.good())\n        cout &lt;&lt; \"writing successful ... \\n\";\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#copy-source-file-example-v1-non-binary","title":"Copy Source File Example v1 (Non-binary) <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;filesystem&gt;\nusing namespace std;\nnamespace fs = std::filesystem;\n\n\nvoid CopyFile(const string&amp; srcFile, const string&amp; destFile) {\n\n    fs::path src{ srcFile };\n    fs::path dest{ destFile };\n    fs::path destPath = dest.parent_path();\n\n    if (!fs::exists(destPath)) { // path does not exist\n\n        if (fs::create_directories(destPath)) // no error creating directories\n            cout &lt;&lt; \"new dir created ... \\n\";\n    }\n    else cout &lt;&lt; \"existing directory\" &lt;&lt; endl;\n\n    // Read from source file\n    std::ifstream in(src);\n    if (!in) cout &lt;&lt; \"Source file not found \" &lt;&lt; endl; \n\n    // Write to dest file\n    ofstream out(dest);\n    string line;\n\n    while (!getline(in, line).eof()) // read each line\n        out &lt;&lt; line &lt;&lt; endl; // write to dest file\n\n\n    if (out.good()) cout &lt;&lt; \"Copy successful ... \\n\";\n    in.close();\n    out.close();\n}\n\n\nint main() {\n\n\n    CopyFile(__FILE__, \"cppProj/source/Copy3.cpp\");\n\n    return 0;\n\n}\n</code></pre>","text":""},{"location":"cpp_docs/05_file_handling/#working-with-seekpg-and-tellpg-with-file-ifstream-and-ofstream","title":"Working with seekp/g and tellp/g with file ifstream and ofstream: <p>seekp example</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\n\nvoid Write() {\n    std::ofstream out(\"data.txt\");\n\n    std::string content{ \"This is from the Write() funtion \" };\n    for (char c : content)\n        out.put(c);\n\n    out.seekp(10); // pointer jump to 10 character\n    std::cout &lt;&lt;\"tellp() : \" &lt;&lt; out.tellp() &lt;&lt; std::endl; // Tell where the pointer is\n    out &lt;&lt; \"###\";  // write from char 10\n\n    out.close();\n}\n\nvoid Read() {\n    std::ifstream in(\"data.txt\");\n\n    char c;\n    in.seekg(5); // pointer jump to the 5 character\n    std::cout &lt;&lt;\"tellg() : \" &lt;&lt; in.tellg() &lt;&lt; std::endl; // Tell where the pointer is\n    while(!in.get(c).eof())  std::cout &lt;&lt; c;\n    std::cout &lt;&lt; std::endl;\n\n    in.clear(); // go back to begining of file\n\n    in.seekg(-5, std::ios::end); // read from back\n    while (!in.get(c).eof())  std::cout &lt;&lt; c;\n    std::cout &lt;&lt; std::endl;\n\n    in.close();\n    }\n\nint main() {\n    Write();\n    Read();\n    return 0;\n}\n</code></pre>","text":""},{"location":"cpp_docs/05_file_handling/#working-with-seekpg-and-tellpg-with-fstream","title":"Working with seekp/g and tellp/g with fstream <pre><code>void ReadWrite() {\n    std::fstream stream(\"data.txt\");\n    if (!stream) {\n        std::cout &lt;&lt; \"Creating NEW FILE ... \" &lt;&lt; std::endl;\n        std::ofstream out(\"data.txt\");\n        out.close();\n\n        stream.open(\"data.txt\");\n    }\n    stream &lt;&lt; \"This is the content for FStream\\n\";\n\n    stream.seekg(0);\n    std::cout &lt;&lt; stream.rdbuf() &lt;&lt; std::endl;\n\n    stream.seekg(0, std::ios::beg);\n    std::string line;\n    std::getline(stream, line);\n    std::cout &lt;&lt; line &lt;&lt; std::endl;\n}\n</code></pre>","text":""},{"location":"cpp_docs/05_file_handling/#reading-and-write-binary-files","title":"Reading and write binary files <pre><code>    std::string str = \"ABCDEFGHIJ1234567890\";\n    const char* str_c = str.c_str();\n    std::fstream iob{ \"data.bin\", std::ios::binary | std::ios::out | std::ios::in };\n    iob.write((const char*)&amp;str_c, sizeof(str_c));\n\n    iob.clear();\n    iob.seekg(0);\n\n    // Read from binary\n    const char* str1 = \"\";\n    iob.read((char*)&amp;str1, sizeof(str_c));\n    iob.close();\n\n    std::cout &lt;&lt; str1 &lt;&lt; std::endl;\n</code></pre>","text":""},{"location":"cpp_docs/05_file_handling/#readingwriting-binary-records","title":"Reading/Writing Binary Records","text":"<pre><code>int main(){\n    AssignmentRecord rigAssign;\n    rigAssign.as_id = 1340;\n    rigAssign.name = \"BAC3034 Rigging Progress\";\n    rigAssign.score = 34.5f;\n\n    std::fstream record1{ \"assignment-record.dat\", std::ios::binary| std::ios::out | std::ios::in };\n    if (!record1){\n        std::cout &lt;&lt; \"File Non-exist creating file...\\n\";\n        std::ofstream out{ \"assignment-record.dat\", std::ios::binary };\n        out.close();\n\n        record1.open(\"assignment-record.dat\");\n    }\n    record1.write((const char*)&amp;rigAssign, sizeof(AssignmentRecord));\n    std::cout &lt;&lt; sizeof(AssignmentRecord);\n\n    record1.clear();\n    record1.seekg(0);\n\n\n    /* --- Reading Record from binary --- */\n    AssignmentRecord teachersCopy;\n\n    record1.read((char*)&amp;teachersCopy, sizeof(AssignmentRecord));\n\n    std::cout &lt;&lt; \"\\n\\nTeachers Copy :\\nID - \" &lt;&lt; teachersCopy.as_id \n    &lt;&lt; \"\\nNAME - \" &lt;&lt; teachersCopy.name &lt;&lt; \"\\nSCORE: \" &lt;&lt; teachersCopy.score &lt;&lt; \"\\n\";\n\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#readingwriting-multiple-binary-records-using-basic-array","title":"Reading/Writing Multiple Binary Records [USING BASIC ARRAY]","text":"<pre><code>constexpr int STUDENTS_NUM = 4;\nAssignmentRecord studentsAssignments[STUDENTS_NUM] = {{123, \"Dfld\", 45.2}, \n                                        {300, \"Omotola\", 50.4}, \n                                        {281, \"folashade\", 55.6}, \n                                        {201, \"Gabib\", 12.0} };\n\nstd::fstream record1{ \"assignment-record.dat\", std::ios::binary| std::ios::out | std::ios::in };\nif (!record1){\n    std::cout &lt;&lt; \"File Non-exist creating file...\\n\";\n    std::ofstream out{ \"assignment-record.dat\", std::ios::binary };\n    out.close();\n\n    record1.open(\"assignment-record.dat\");\n    }\nrecord1.write((const char*)studentsAssignments, sizeof(AssignmentRecord) * STUDENTS_NUM);\nstd::cout &lt;&lt; sizeof(AssignmentRecord);\n\nrecord1.clear();\nrecord1.seekg(0);\n\n\n/* --- Reading Record from binary --- */\nAssignmentRecord teachersCopy[STUDENTS_NUM];\n\nrecord1.read((char*)&amp;teachersCopy, sizeof(AssignmentRecord)* STUDENTS_NUM);\n\nfor (auto&amp; assignment : teachersCopy){\n    std::cout &lt;&lt; \"ID - \" &lt;&lt; assignment.as_id &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"NAME - \" &lt;&lt; assignment.name &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"SCORE - \" &lt;&lt; assignment.score &lt;&lt; \"\\n\\n\";\n\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#readingwriting-multiple-binary-records-using-stdvector","title":"Reading/Writing Multiple Binary Records [USING STD::VECTOR]","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;vector&gt;\n\nstruct AssignmentRecord {\n    int  as_id{-1};\n    const char* name{};\n    float score{};\n};\n\n\nint main() {\n\n\n    /* --- Writing Records to Binary --- */ \n\n    constexpr int STUDENTS_NUM = 4;\n    std::vector&lt;AssignmentRecord&gt; studentAssignments = { {123, \"Dfld\", 45.2},\n                                            {300, \"Omotola\", 50.4},\n                                            {281, \"folashade\", 55.6},\n                                            {201, \"Gabib\", 12.0} };\n\n    std::fstream record1{ \"assignment-record.dat\", std::ios::binary| std::ios::out | std::ios::in };\n    if (!record1){\n        std::cout &lt;&lt; \"File Non-exist creating file...\\n\";\n        std::ofstream out{ \"assignment-record.dat\", std::ios::binary };\n        out.close();\n\n        record1.open(\"assignment-record.dat\");\n    }\n    record1.write((const char*)(&amp;studentAssignments), sizeof(AssignmentRecord) * studentAssignments.size());\n    std::cout &lt;&lt; sizeof(AssignmentRecord);\n\n    record1.clear();\n    record1.seekg(0);\n\n    /* --- Reading Record from binary --- */\n    //AssignmentRecord teachersCopy[STUDENTS_NUM];\n    std::vector&lt;AssignmentRecord&gt; teachersCopy{};\n    teachersCopy.resize(STUDENTS_NUM);\n    record1.read(reinterpret_cast&lt;char*&gt;(&amp;teachersCopy), sizeof(AssignmentRecord) * teachersCopy.size());\n    if(record1.good()){\n    for (auto assignment : teachersCopy){\n            std::cout &lt;&lt; \"ID - \" &lt;&lt; assignment.as_id &lt;&lt; \"\\n\";\n            std::cout &lt;&lt; \"NAME - \" &lt;&lt; assignment.name &lt;&lt; \"\\n\";\n            std::cout &lt;&lt; \"SCORE - \" &lt;&lt; assignment.score &lt;&lt; \"\\n\\n\";\n\n        }\n    }\n    else {\n        std::cout &lt;&lt; \"Something Went Wrong!\" &lt;&lt; std::endl;\n    }\n\n}\n</code></pre>"},{"location":"cpp_docs/05_file_handling/#reading-file-with-vector","title":"Reading File with Vector <pre><code>int main() {\n\n    std::ifstream input{ \"main.cpp\" };\n    if (!input) {\n        std::cout &lt;&lt; \"Could not open file\\n\";\n        return -1;\n    }\n    auto size = fs::file_size(\"main.cpp\");\n    std::vector&lt;char&gt; buffer;\n    buffer.resize(size);\n    input.read(buffer.data(), size);\n    std::cout &lt;&lt; buffer.data() &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre>","text":""},{"location":"cpp_docs/06_templating_in_cpp/","title":"Templating in CPP","text":""},{"location":"cpp_docs/06_templating_in_cpp/#introduction-to-templating","title":"Introduction to Templating","text":"<p>Example of templating:</p> <pre><code>#include &lt;iostream&gt;\n\nusing std::cout, std::cin;\n\ntemplate&lt;typename I&gt;\nI Max(I x, I y) {\n\n    return ( x &gt; y) ? x : y;\n}\n\ntemplate&lt;&gt;\nstd::string Max (std::string x, std::string y) {\n    return (x.length() &gt; y.length()) ? x : y;\n}\n\nint main(int argv, char argc) {\n    int x = 4;\n    int y = 7;\n    cout &lt;&lt; \" Max of num \" &lt;&lt; x &lt;&lt;\", \" &lt;&lt; y &lt;&lt; \" = \" &lt;&lt; Max&lt;int&gt;(x, y) &lt;&lt; \"\\n\";\n\n    float x1 = 4.5;\n    float y1 = 8.1;\n    cout &lt;&lt; \" Max of float \" &lt;&lt; x1 &lt;&lt;\", \" &lt;&lt; y1 &lt;&lt; \" = \" &lt;&lt; Max&lt;float&gt;(x1, y1) &lt;&lt; \"\\n\";\n\n\n    std::string x2 = \"usomestring1\";\n    std::string x3 = \"tstring2 is the long string here\";\n    cout &lt;&lt; \"Max of string = \" &lt;&lt; Max&lt;std::string&gt;(x2, x3) &lt;&lt; \"\\n\";\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#explicit-specialization","title":"Explicit Specialization","text":"<pre><code>template&lt;typename I&gt;\nI Max(I x, I y) {\n    return ( x &gt; y) ? x : y;\n}\n\n// Explicit Specializatioon\ntemplate&lt;&gt;\nconst char* Max (const char* x, const char* y) {\n    return (strcmp(x, y) &gt; 0) ? x : y;\n}\n\nint main(int argv, char argc) {\n\n\n    const char* s = \"'AAAB'\";  // Max is here because of B in string\n    const char* a = \"'AAAA'\";\n    cout &lt;&lt; Max(s, a) &lt;&lt; \"\\n\";\n\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#non-type-template-arguments","title":"Non-type Template Arguments","text":""},{"location":"cpp_docs/06_templating_in_cpp/#basic","title":"Basic","text":"<p>Non-type template works usually with arrays and classes. the <code>arrSize</code> in the template is the non-type argument. It must always be constant. We will find an example in the standard cpp template array <code>std::array&lt;float, 10&gt; arr3</code></p> <pre><code>template&lt;typename T, int arrSize&gt;\nT Max(T* pArr) {\n\n    T curr_max = 0;\n    for (int i = 0; i &lt; arrSize; i++)\n        if (pArr[i] &gt; curr_max) \n            curr_max = pArr[i];\n\n        return curr_max;\n}\n\ntemplate&lt;typename T, int size&gt;\nT Sum(T* pArr) {\n    T sum{};\n    for (int i = 0; i &lt; size; i++)\n        sum += pArr[i];\n\n    return sum;\n}\n\nint main(int argv, char argc) {\n\n\n    int arr1[]{ 4, 3, 5, 4, 11, -2 };\n    cout &lt;&lt; Sum&lt;int, 6&gt;(arr1) &lt;&lt; \"\\n\";\n    cout &lt;&lt; Max&lt;int, 6&gt;(arr1) &lt;&lt; \"\\n\";\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#using-ref-to-an-array","title":"Using Ref to an array","text":"<p>With this you don't need to specify the size </p> <pre><code>template&lt;typename T, int size&gt;\nT Sum(T(&amp;rArr)[size]) {\n    T sum{};\n    for (int i = 0; i &lt; size; i++)\n        sum += rArr[i];\n\n    return sum;\n}\n\nint main(int argv, char argc) {\n\n    int arr1[] = { 4, 3, 5, 4, 11, -2 };\n    int(&amp;rArr)[6] = arr1; // reference to an array\n    int* arr2 = arr1;\n\n    cout &lt;&lt; Sum(arr1) &lt;&lt; \"\\n\"; // No need to specify size\n\n    double arrD[] = { 34.5, 112,45.7, 45.11111, 90.409 };\n    cout &lt;&lt; Sum&lt;double&gt;(arrD) &lt;&lt; \"\\n\";\n\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#perfect-forwarding-in-cpp","title":"Perfect Forwarding in CPP","text":"<p>This is an example of Perfect Forwarding </p> <p>Not sure I understand this quite well now, but for doc purposes, we move </p> <pre><code>#include &lt;iostream&gt;\nusing std::cout, std::endl, std::string;\n\nclass Integer {\n    int m_Val;\npublic:\n    Integer(int&amp; n) :m_Val(n) { cout &lt;&lt; \"Integer(int&amp; )\\n\"; }\n    Integer(int&amp;&amp; n) :m_Val(n) { cout &lt;&lt; \"Integer(int&amp;&amp; )\\n\"; }\n    ~Integer() {}\n};\n\n\nclass Employee {\n    string m_Name;\n    Integer m_id;\npublic:\n    template &lt;typename T1, typename T2&gt;\n    Employee(T1&amp;&amp; name, T2&amp;&amp; id) :\n        m_Name{ std::forward&lt;T1&gt;(name) },\n        m_id{ std::forward&lt;T2&gt;(id) } {\n        cout &lt;&lt; \"Employee(string&amp;&amp; , Integer&amp;&amp;)\\n\";\n    }\n};\n\n\ntemplate &lt;typename T1, typename T2&gt;\nEmployee* Create(T1&amp;&amp; a, T2&amp;&amp; b) {\n    return new Employee(std::forward&lt;T1&gt;(a), std::forward&lt;T2&gt;(b));\n}\n\n\nint main() {\n    Employee emp1{ \"Usman \", Integer{100} };\n    auto emp = Create(\"Usman\", Integer{ 120 });\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#variadic-template","title":"Variadic Template","text":""},{"location":"cpp_docs/06_templating_in_cpp/#standard-initializer_list","title":"standard initializer_list","text":"<pre><code>// Using std::initializer_list\ntemplate &lt;typename T&gt;\nvoid Print(std::initializer_list&lt;T&gt; args) {\n    for (const auto&amp; x : args) \n        cout &lt;&lt; x &lt;&lt; \" \";\n\n    cout &lt;&lt; \"\\n\";\n}\n\nint main() {\n    Print&lt;int&gt;({ 1, 3, 4, 67, -34, int(1.6), 9 });\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#using-the-variadic-template-alternative","title":"Using the Variadic template alternative","text":"<pre><code>// Using Variadic Template\n/*\nThis is how the function recursion works\nPrint(1, 3, 4, 67); // first call \"1\" goes to `a`, \"3, 4, 67\" goes to `...`\nPrint(3, 4, 67); // second call\nPrint(4, 67); // third call\nPrint(67); // fourth call\nPrint(); // fifth call\n*/\nvoid Print() {}\n\ntemplate&lt;typename T, typename ... Params&gt; // template parameter pack\nvoid Print(const T&amp; a, const Params&amp; ... args) {\n    cout &lt;&lt; a;\n\n    if (sizeof ...(args) != 0) cout &lt;&lt; \" &lt;=&gt; \";\n\n    Print(args ...);\n}\n\nint main() {\n\n    // Arguments passed with Parameter pack\n    Print(1, 3, 4, 67, -34,1.6, 9);\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#class-template","title":"Class Template","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nusing std::cout, std::endl, std::string;\n\ntemplate &lt;typename T, int size&gt;\nclass Stack {\n    T  mBuffer[size]{};\n    int mTop_index{ -1 };\n\npublic:\n    Stack() = default;\n\n    Stack* push(const T&amp; elem) {\n        ++mTop_index;\n        mBuffer[mTop_index] = elem; \n\n        return this;\n    }\n    Stack* push(std::initializer_list&lt;T&gt; alist);\n\n    T&amp; pop() {\n        if (is_Empty()){\n            throw std::runtime_error(\"&lt;== Stack Empty ==&gt;\\n\");\n        }\n        T o = mBuffer[mTop_index];\n        mBuffer[mTop_index] = 0;\n        --mTop_index;\n        return o;\n    }\n\n    T&amp; top() {\n        return mBuffer[mTop_index];\n    }\n\n    bool is_Empty() {\n        return mTop_index == -1;\n    }\n\n    void print() {\n        for (int i = 0; i &lt; (mTop_index + 1); i++) {\n            cout &lt;&lt; mBuffer[i];\n            if (i != (mTop_index)) cout &lt;&lt; \" &lt;= \";\n        }\n        cout &lt;&lt; \"\\n\";\n    }\n\n    ~Stack(){}\n};\n\n/*\nnote that the firs :\n`Stack&lt;T, size&gt;*` is the return type, and the second\n`Stack&lt;T, size&gt;::push(....)` is for the function namespace qualifier\n*/\ntemplate &lt;typename T, int size&gt;\n Stack&lt;T, size&gt;* Stack&lt;T, size&gt;::push(std::initializer_list&lt;T&gt; alist) {\n    return this;\n}\n\nint main() {\n    try {\n        Stack &lt;float, 12&gt;s;\n        s.push(34.5)-&gt;push(3.0)-&gt;push(11)-&gt;push(56);\n        s.push(123)-&gt;push(66)-&gt;push(-88);\n\n        s.print();\n\n        s.pop();\n        s.print();\n\n        s.pop();\n        s.print();\n\n        s.pop();\n        s.print();\n\n        Stack&lt; std::array&lt;int, 4&gt;, 20&gt; sArr;\n        s.push({ 3, 4, 3, 3 });\n\n    }\n    catch (std::exception&amp; ex) {\n        cout &lt;&lt; ex.what() &lt;&lt; endl;\n    }\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#typdef-and-type-alias","title":"Typdef and Type Alias","text":"<code>typedef</code> <code>type alias</code> <code>typedef unsigned int UNIT;</code> <code>using UNIT = unsigned int;</code> <code>typedef std::vector&lt;std::map&lt;int, std::string&gt;&gt; ScoreDetails;</code> <code>using ScoreDetails = std::vector&lt;std::map&lt;int, std::string&gt;&gt;;</code> <p>Here is the full Usage examples</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n\nusing std::cout, std::endl;\n\nconst char* GetErrorMessage(int x) {\n    return \"1\";\n}\n\nint Max(int x, float y) {\n    return std::max(x, int(y));\n}\n\n/*\n Typedef and Type Alias - reduce the complexity look of a type (It doesn't change the type)\n*/\ntemplate &lt;typename T&gt;\nusing CharNames = std::map &lt;uint32_t, std::vector&lt; std::initializer_list&lt;std::list&lt;T&gt; &gt; &gt;&gt; \n\nint main() {\n\n    // You can also do t\n    CharNames&lt;std::string&gt; characterNames;\n    CharNames&lt;CharNames&lt;int&gt;&gt; npcNames;\n\n\n    //typedef unsigned int UNIT;\n    using UNIT = unsigned int;\n    UNIT id{};\n\n    //typedef long long LLNG;\n    using LLNG = long long;\n    LLNG watchViews{};\n\n    //typedef std::vector&lt;std::map&lt;int, std::string&gt;&gt; ScoreDetails;\n    using ScoreDetails = std::vector&lt;std::map&lt;int, std::string&gt;&gt;;\n    ScoreDetails schDetails;\n    ScoreDetails::iterator it = schDetails.begin();\n\n    //typedef const char*(*ErrorFn)(int);\n    using ErrorFn = const char* (*)(int);\n    ErrorFn pfn = GetErrorMessage;\n\n    //typedef int(&amp;RefFn)(int, float);\n    using RefFn = int(&amp;)(int, float);\n    RefFn mfn = Max;\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#type-traits","title":"Type Traits","text":"<ul> <li>Help to deduce the characteristics of types a compile time</li> <li>Change / transform the properties of th type</li> </ul>"},{"location":"cpp_docs/06_templating_in_cpp/#example-1-check-if-type-is-int","title":"Example 1 - Check if type is <code>int</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\nint main() {\n\n    using LINT = long long unsigned int;\n    std::cout &lt;&lt; \"type name : `\" &lt;&lt; typeid(LINT).name() &lt;&lt; \"`\"&lt;&lt; std::endl;\n    std::cout &lt;&lt; std::boolalpha &lt;&lt; \"Is  Integer? : \" &lt;&lt; std::is_integral&lt;LINT&gt;::value &lt;&lt; std::endl;\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#example-2-checking-if-type-is-float","title":"Example 2 - Checking if type is <code>float</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;type_traits&gt;\n\ntemplate&lt;typename T&gt;\nT Divide(T&amp;&amp; a, T&amp;&amp; b) {\n    if (std::is_floating_point&lt;T&gt;::value != true)\n        throw std::logic_error(\"Should only divide using float type\");\n    return a / b;\n    }\n\nint main() {\n\n    try{\n    std::cout &lt;&lt; Divide(34.5, 45.3);\n    }\n    catch (const std::exception&amp; ex){\n        std::cout &lt;&lt; ex.what() &lt;&lt; std::endl;\n    }\n\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"cpp_docs/06_templating_in_cpp/#detecting-error-warnings-at-compile-time-using-static_assert","title":"detecting Error Warnings at Compile time using <code>static_assert()</code>","text":"<p>With <code>static_assert()</code> the code will only compile when the condition of the assertion is true. otherwise it will prompt the message specified  <pre><code>template&lt;typename T&gt;\nT Divide(T&amp;&amp; a, T&amp;&amp; b) {\n    static_assert(std::is_floating_point&lt;T&gt;::value, \"Using float point value only\");\n    return a / b;\n}\n\nint main() {\n    std::cout &lt;&lt; Divide(8, 3);\n    return EXIT_SUCCESS;\n}\n</code></pre></p> <pre><code>int main() {\n    /** Normal if check */\n    if (sizeof(void*) == 4) // 4 x 8bits = 32bits (4bytes)\n        std::cout &lt;&lt; \"I am 32bit\";\n    else  std::cout &lt;&lt; \" I am 64bit\";\n}\n\n\nint main() {\n/** Using static_assert(...) */\n// 4 x 8bits = 32bits (4bytes)\nstatic_assert(sizeof(void*) == 4, \"This only works on 32bits\");\n\nstd::cout &lt;&lt; \" I am 32bit\";\n\n}\n</code></pre>"},{"location":"cpp_docs/07_lambda_expression/","title":"Lambda Expressions in C++","text":"<p>Basic Sorting Algorithms</p> <pre><code>#include &lt;iostream&gt;\n\nusing Comparator = bool(*)(int, int);\n\ntemplate&lt;typename T, int size&gt;\nvoid Sort(T(&amp;arr)[size], Comparator comp) {\n    for (int i = 0; i &lt; size-1; ++i){\n        for (int j = 0; j &lt; size-1; ++j){\n            if (comp(arr[j] , arr[j + 1])) {\n                T temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nbool Comp1(int x, int y) {\n    return x &gt; y;\n}\n\nbool Comp2(int x, int y){\n    return x &lt; y;\n\nint main() {\n    int arrEl[] = { 1, 9, 3,2, 0 };\n\n    for (auto x : arrEl) std::cout &lt;&lt; x &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n\n    Sort(arrEl);\n\n    for (auto x : arrEl) std::cout &lt;&lt; x &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n    return 0;\n\n}\n</code></pre>"},{"location":"cpp_docs/07_lambda_expression/#working-with-function-object-and-lambdas-instead-of-function-pointers","title":"Working With Function Object and LAMBDAs instead of Function Pointers","text":"<p>Lambda Syntax Generalization: <code>[](&lt;args&gt;)&lt;mutable&gt;&lt;exception specs&gt;-&gt;&lt;return type&gt;{ \\* Code here *\\};</code> [] - accept the following <code>=. &amp;, this</code> args- can be <code>int, float, ... or auto</code> to user defined types. mutable-Lambda is <code>unmutable</code> or <code>const</code> i.e can't modify variables inside the function by default  so <code>mutable</code> is a key word to remove the <code>const</code> ness of the internal member function exception specs - is it <code>noexception(true|false)</code> return type - all available types <code>int,float,..</code> to user defined types</p> <p>Note that the <code>typename Comparator</code> was added to the <code>Sort</code> algoarithm. <pre><code>#include &lt;iostream&gt;\n\nusing Comparator = bool(*)(int, int);\n\ntemplate&lt;typename T, int size, typename Comparator&gt;\nvoid Sort(T(&amp;arr)[size], Comparator comp) {\n    for (int i = 0; i &lt; size-1; ++i){\n        for (int j = 0; j &lt; size-1; ++j){\n            if (comp(arr[j] , arr[j + 1])) {\n                T temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\n\n//bool Comp1(int x, int y) {\n//  return x &gt; y;\n//}\n//\n//bool Comp2(int x, int y){\n//  return x &lt; y;\n//}\n\n    struct Comp3 {\n    bool operator () (int x, int y) {\n        return x &gt; y;\n    }\n};\n\nint main() {\n\n    /* ==================== SORTING ARRAY OF INT, FLOAT, DOUBLE =============================*/\n\n    int arrEl[] = { 1, 9, 3,2, 0 , 4, 8, 5};\n    for (auto x : arrEl) std::cout &lt;&lt; x &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n    Comp3 comp3;\n    //Sort(arrEl, comp3); // USING FUNCTION OBJECT\n    Sort(arrEl, [](int x, int y) { return x &lt; y; });\n\n    for (auto x : arrEl) std::cout &lt;&lt; x &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n\n    /* ==================== SORTING ARRAY OF STRINGS =============================*/\n    std::string arrStr[] = { \"Ola\", \"Segun\", \"Bunmi\", \"Tolu\"};\n\n    for (auto x : arrStr) std::cout &lt;&lt; x &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n\n    //Sort(arrEl, comp3);\n    //Sort(arrStr, [](std::string x, std::string y) { return strcmp(&amp;x.c_str()[0], &amp;y.c_str()[0]) &gt; 0; });\n    Sort(arrStr, [](auto x, auto y) { return x &gt; y; });\n\n    for (auto x : arrStr) std::cout &lt;&lt; x &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n\n    return 0;\n\n}\n</code></pre></p>"},{"location":"cpp_docs/07_lambda_expression/#more-lambda-examples","title":"More Lambda examples","text":"<pre><code>    auto fmp = [](auto x) {\n        std::cout &lt;&lt; x &lt;&lt; \" is  in a lambda Expression\\n\";\n        };\n    fmp(234.678L);\n\n    std::cout &lt;&lt; typeid(fmp).name() &lt;&lt; std::endl;\n</code></pre>"},{"location":"cpp_docs/07_lambda_expression/#using-parameter-pack-and-fold-expressions","title":"Using Parameter Pack and fold expressions","text":"<pre><code>    auto add = [](auto ... args) {\n        return (args + ...); // fold expression requires at least C++17\n        };\n    std::cout &lt;&lt; add(3, 4, 6, 11.5, -4, 3, 20);\n</code></pre>"},{"location":"cpp_docs/07_lambda_expression/#working-with-fold-in-cpp","title":"Working with Fold in cpp","text":"<pre><code>    // NOTE: folds requires at least C++17\n    auto add = [](auto ... args)-&gt;float {\n        ((std::cout &lt;&lt; args  &lt;&lt; \", \"), ...);\n        std::cout &lt;&lt; \"\\n\";\n        ((std::cout &lt;&lt; args &lt;&lt; \"x 2 = \" &lt;&lt; args*2 &lt;&lt; \"\\n\"), ...);\n        std::cout &lt;&lt; \"\\n\";\n        return (args + ...); \n        };\n    std::cout &lt;&lt; add(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/","title":"Standard Template Library in C++","text":""},{"location":"cpp_docs/08_Standard_template/#introduction","title":"Introduction","text":"Sequence Header <code>array</code> <code>&lt;array&gt;</code> <code>vector</code> <code>&lt;vector&gt;</code> <code>list</code> <code>&lt;list&gt;</code> <code>deque</code> <code>&lt;deque&gt;</code> <code>forward_list</code> <code>&lt;forward_list&gt;</code> <code>set, multiset</code> <code>&lt;set&gt;</code> <code>map, multimap</code> <code>&lt;map&gt;</code> <code>unordered_set, unordered_multiset</code> <code>&lt;unordered_set&gt;</code> <code>unordered_map, unordered_multimap</code> <code>&lt;unordered_map&gt;</code> <pre><code>    \\** == COMMON FUNCTIONS == **\\\n    - default constructor\n    - uniform Init. construction\n    -  Copy constructor\n    - Iterator constructor\n    - size()\n    - clear()\n    - begin() and end() \n    - default allocator\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#standard-array-template-stdarray","title":"Standard Array Template <code>std::array</code>","text":"<p>Properties:      1. Thin Wrapper over C-style static array     2. Supports iterators      3. Knows about its size    4. provides random access      5. Can be used with C-FUNCTIONS        6. Cannot grow in size</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\n\nvoid StdArray() {\n\n    // Initializing using STARDARD INITILIZER LIST\n    std::array&lt;uint32_t, 6&gt; scores = {35, 89, 15, 99, 56, 47};\n\n    // Initializing using UNIFORM INITIALIZATION \n    std::array&lt;int, 8&gt; usersNo {1, 4, 8, 16, 20, 32, 46, 64}; \n\n    // accessing with [] operator\n    std::cout &lt;&lt; scores[5] &lt;&lt; std::endl;\n\n    // accessing element : for range loop\n    for (auto&amp; el : scores)\n        std::cout &lt;&lt; el &lt;&lt; \" \";\n    std::cout &lt;&lt; \"\\n\";\n\n    // Accessing element : for loop\n    for (int i = 0; i &lt; usersNo.size(); i++){\n        std::cout &lt;&lt; usersNo[i];\n        if (i != (usersNo.size() - 1)) std::cout &lt;&lt; \" =&gt; \";\n    }\n\n}\n\nint main() {\n\n    StdArray();\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#standard-array-iterator","title":"Standard Array Iterator","text":"<ul> <li>This returns a pointer like object to the current <code>array</code></li> <li>User can use this to access the elements by their position</li> <li>Iterator also provide overloaded operators such as <code>++</code>, <code>--</code> and <code>*</code></li> <li>You can create it through <code>begin()</code> and <code>end()</code> functions in all containers</li> </ul> <p>Warning</p> <p>Note that <code>end()</code> returns an Iterator that DOES NOT point to the array (points to memory beyond the array )    Therefore, never dereference an <code>end()</code> iterator.</p> <pre><code>void StdArrayIter() {\n\n    std::array&lt;int, 8&gt; usersNo = { 10, 4, 8, 16, 20, 32, 46, 64 };\n\n    // Returns pointer to the begin of the std::array\n    auto it = usersNo.begin();\n    std::cout &lt;&lt; \" Access element - *it \" &lt;&lt; *it &lt;&lt; std::endl;\n    it++; // move to `4`\n    ++it; // move to '8'\n    std::cout &lt;&lt; \" Access element - *it \" &lt;&lt; *it &lt;&lt; std::endl;\n    it++;\n    --it; // go back to `8`\n    it--; // go back  to `4`\n    std::cout &lt;&lt; \" Access element - *it \" &lt;&lt; *it &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; \"\\nPrinting with while loop: \\n\";\n    while (it != usersNo.end()){\n        std::cout &lt;&lt; *it &lt;&lt; \" \";\n        it++;\n\n    std::cout &lt;&lt; \"\\n\\n\\n\\n\" ;\n\n    it = usersNo.begin();\n    std::cout &lt;&lt; &amp;it &lt;&lt; std::endl;\n    std::cout &lt;&lt; usersNo.data()&lt;&lt; std::endl;\n\n\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#standard-vector-template-stdvector","title":"Standard Vector Template <code>std::vector</code>","text":"<ul> <li>Behaves like a dynamic array</li> <li>Grows automatically</li> <li>Efficient for addition/removal at the end</li> <li>Provides random access</li> <li>Not good for insertion/deletion</li> </ul> <p><code>std::vector</code> is basically a Queue - Expands from one end</p> <pre><code>#include &lt;vector&gt;\ntemplate &lt;typename ... Param&gt;\nvoid print(Param... lst) {\n    ((std::cout &lt;&lt; lst &lt;&lt; \" \"), ...);\n        std::cout &lt;&lt; std::endl;\n}\n\nvoid StdVector() {\n    std::vector&lt;int&gt; xPos = {22, 33, 44, 55};\n    xPos.push_back(66);\n    xPos.push_back(77);\n    xPos.push_back(77);\n\n    std::cout &lt;&lt; \"\\nIteration with for loop:\\n\";\n    for (int i = 0; i &lt; xPos.size(); i++) std::cout &lt;&lt; xPos[i] &lt;&lt; \" \";\n\n\n\n    std::cout &lt;&lt; \"\\nIteration with for-range loop:\\n\";\n    for (auto&amp; i : xPos) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    std::cout &lt;&lt; \"\\nIteration with `begin()`:\\n\";\n    auto it = xPos.begin();\n    while (it != xPos.end()) std::cout &lt;&lt; *it++ &lt;&lt; \" \";\n\n\n    xPos.pop_back();\n    xPos.pop_back();\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : xPos) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    xPos.insert(xPos.begin(), { 34, 8, 23 }); // insert using init-list\n    xPos.insert(xPos.begin(), -101); // insert single element\n    xPos.insert(xPos.begin()+3, -33); // insert at index 3\n\n    vector&lt;int&gt; somNum1 = { 1, 3, 5 };\n    vector &lt;int&gt; somNum2 = { -7, -9, -11 };\n    // at the end() extend with content of `somNum1`\n    somNum1.insert(somNum1.end(), somNum2.begin(), somNum2.end()); // 1 3 5 -7 -9 -11\n\n    // at the end() insert count=5, value= ;20\n    somNum2.insert(somNum2.end(), 5, 20);  //-7 -9 -11 20 20 20 20 20\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : xPos) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    xPos.erase(xPos.begin() + (xPos.size() - 1) / 2);\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : xPos) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    xPos.erase(xPos.end() - 3);\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : xPos) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    print(3, 4, 3, 78, \"344in\", 56.78);\n}\n\n\nint main() {\n\n    StdVector();\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#new-in-stdvector","title":"New in <code>std:vector</code>","text":"<pre><code>int main() {\n\n    std::vector&lt;int&gt; vInt;\n\n    for (size_t i = 0; i &lt; 20000; i++)\n        vInt.push_back(i);  \n\n\n    std::cout &lt;&lt; \"\\nSize: \" &lt;&lt; vInt.size() &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"Capacity: \" &lt;&lt; vInt.capacity() &lt;&lt; \"\\n\";\n\n    //vInt.resize(10);\n    vInt.erase(vInt.begin(), vInt.end() - 10);\n    //vInt.shrink_to_fit();\n    std::cout &lt;&lt; \"\\nAfter Erasing ...\\n\";\n    std::cout &lt;&lt; \"\\nSize: \" &lt;&lt; vInt.size() &lt;&lt; \"\\n\";\n    std::cout &lt;&lt; \"Capacity: \" &lt;&lt; vInt.capacity() &lt;&lt; \"\\n\";\n\n    std::for_each(vInt.begin(), vInt.end(), [](int v) {\n        cout &lt;&lt; v &lt;&lt; \" \";  });\n    cout &lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre> <p>Once we add Shrink_to_fit </p> <p>All the reserved spaces were fitted to the size - (extra memory freed)</p> <pre><code>vInt.shrink_to_fit();\nstd::cout &lt;&lt; \"\\nAfter Erasing ...\\n\";\nstd::cout &lt;&lt; \"\\nSize: \" &lt;&lt; vInt.size() &lt;&lt; \"\\n\";\nstd::cout &lt;&lt; \"Capacity: \" &lt;&lt; vInt.capacity() &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#standard-deque-stddeque","title":"Standard Deque <code>std::deque</code>","text":"<ul> <li>Efficient for additional / Removal at both end</li> <li>Grows automatically just like vector</li> <li>Provides random access (<code>[]</code>operator modify element)</li> <li>NOT GOOD for insertion / deletion, except at both ends.</li> </ul> <p>Basically what <code>std::vector</code> can do but with the extra of front operations</p> <p></p> <pre><code>  #include &lt;iostream&gt;\n#include &lt;deque&gt;\n\nvoid StdDeque() {\n\n    std::deque&lt;int&gt; songsFreq = {21, 31, 41, 55};\n    songsFreq.push_back(66);\n    songsFreq.push_back(77);\n\n    songsFreq.push_front(77);\n    songsFreq.push_front(12);\n    songsFreq[6] = 345;\n    std::cout &lt;&lt; \"\\nIteration with for loop:\\n\";\n    for (int i = 0; i &lt; songsFreq.size(); i++) std::cout &lt;&lt; songsFreq[i] &lt;&lt; \" \";\n\n\n\n    std::cout &lt;&lt; \"\\nIteration with for-range loop:\\n\";\n    // Iterating using for-range\n    for (auto&amp; i : songsFreq) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    // Iterating using `begin()`\n    std::cout &lt;&lt; \"\\nIteration with `begin()`:\\n\";\n    auto it = songsFreq.begin();\n    while (it != songsFreq.end()) std::cout &lt;&lt; *it++ &lt;&lt; \" \";\n\n\n    std::cout &lt;&lt; \"\\nvalue `at` index 5 :  =\" &lt;&lt; songsFreq.at(5) &lt;&lt; std::endl;\n\n    songsFreq.pop_back();\n    songsFreq.pop_front();\n\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : songsFreq) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    songsFreq.insert(songsFreq.begin(), { 34, 8, 23 }); // insert using init-list\n    songsFreq.insert(songsFreq.begin(), -101); // insert single element\n    songsFreq.insert(songsFreq.begin()+3, -33); // insert at index 3\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : songsFreq) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    songsFreq.erase(songsFreq.begin() + (songsFreq.size() - 1) / 2);\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : songsFreq) std::cout &lt;&lt; i &lt;&lt; \" \";\n\n    songsFreq.erase(songsFreq.end() - 3);\n\n    std::cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : songsFreq) std::cout &lt;&lt; i &lt;&lt; \" \";\n}\n\nint main() {\n\n    StdDeque();\n}\n</code></pre> <p>Also about <code>resize</code> and <code>reserve</code></p> <pre><code>    std::vector&lt;int&gt; vInt;\n\n    //keeps memory space\n    vInt.reserve(10);\n\n    //keeps memory space and init them to 0\n    vInt.resize(20);\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#standard-list-stdlist-forward-list-stdforward_list","title":"Standard List <code>std::list</code> / Forward list <code>std::forward_list</code>","text":""},{"location":"cpp_docs/08_Standard_template/#list","title":"List","text":"<ul> <li>Implemented as two way linked list</li> <li>Efficient for insertion / deletion -DOES NOT provide random accesss (NO <code>[]</code>operator modify element)</li> </ul> <p>Useful when you need a container that you will often insert and delete from FRONT/BACK</p> <p></p> <pre><code>void List() {\n    std::list&lt;float&gt; lf;\n\n    // Populating value using loop\n    for (int i = 1; i &lt; 8; i++) \n        lf.push_back(i * 11);\n\n    // Reading value using for-range\n    for (auto i : lf) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    lf.push_front(-11.0);\n    lf.push_front(-22.0);\n    for (auto i : lf) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"insert(..) ONLY at begin() and end() \\n\";\n    lf.insert(lf.begin(), 121);\n    lf.insert(lf.end(), 212);\n    for (auto i : lf) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"erase(..) \\n\";\n    lf.erase(lf.begin());\n    lf.pop_front();\n    for (auto i : lf) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    lf.pop_back();\n    for (auto i : lf) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"clear(..) \\n\";\n    lf.clear();\n\n    cout &lt;&lt; \"after clearing : \";\n    for (auto i : lf) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n}\n\nint main() {\n    List();\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#forward-list","title":"Forward list","text":"<ul> <li>Implemented as one way linked list</li> <li>Good for small memory foot print</li> <li>Efficient for insertion / deletion</li> <li>Does not provide support for size</li> <li>Elements are added at the front only</li> </ul> <pre><code>#include &lt;forward_list&gt;\n\nvoid ForwardList() {\n    std::forward_list&lt;float&gt; fl;\n\n    fl.assign({ 34, 40.0f });\n\n    // Populating value using loop\n    for (int i = 1; i &lt; 8; i++)\n        fl.push_front(i * 11);\n\n    // Reading value using for-range\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    fl.push_front(-11.0);\n    fl.push_front(-22.0);\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    fl.pop_front();\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"clear(..) \\n\";\n    fl.clear();\n\n    cout &lt;&lt; \"after clearing : \";\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n\n    fl = { 33, 66, 99, 144,169 };\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \";\n    cout &lt;&lt; \"\\n\\n\";\n\n    cout &lt;&lt; \"insert AFTER begin() : \\n\";\n    fl.insert_after(fl.begin(), 101);\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; \"\\n\\n\";\n\n    cout &lt;&lt; \"insert AFTER before_begin() : \\n\";\n    fl.insert_after(fl.before_begin(), 202);\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; \"\\n\\n\";\n\n    cout &lt;&lt; \"erase AFTER begin() : \\n\";\n    fl.erase_after(fl.begin());\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; \"\\n\\n\";\n\n    cout &lt;&lt; \"erase AFTER before_begin() : \\n\";\n    fl.erase_after(fl.before_begin());\n    for (auto i : fl) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; endl;\n}\n\nint main() {\n    ForwardList();\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#standard-set-stdset-multiset-stdmultiset","title":"standard Set <code>std::set</code> / Multiset <code>std::multiset</code>","text":"<ul> <li>Implemented as a binary tree</li> <li>Elements are stored and sorted by (&lt; or &gt;)</li> <li>Values act as keys</li> <li>Fast for search</li> <li>No random access</li> <li>Elements cannot be modified</li> </ul> Binary tree look for <code>set/multset</code>"},{"location":"cpp_docs/08_Standard_template/#inserting-and-printing-output","title":"Inserting and Printing Output","text":"<p>First thing to note is that Set is printed in the sorted order</p> <pre><code>void Set0() {\n    std::set&lt;int&gt; scores;\n    scores.insert(34);\n    scores.insert(67);\n    scores.insert(90);\n    scores.insert(99);\n    scores.insert(0);\n\n    auto it = scores.begin();\n\n    // Element is printed in sorted order (less than by default)\n    for (auto i : scores) cout &lt;&lt; i &lt;&lt; endl;\n}\n</code></pre> <p>Sort the set in the ascending order        </p> <p>But for you to sort by is greather than, you need to include <code>std::greater</code> which is found  in the <code>&lt;functional&gt;</code> header.</p> <pre><code>// Your new definition of scores with `std::greater&lt;int&gt;`\n    std::set&lt;int, std::greater&lt;int&gt;&gt; scores;\n    scores.insert(34);\n    scores.insert(67);\n    ...\n    for (auto i : scores) cout &lt;&lt; i &lt;&lt; \" \";\n</code></pre> <p>This sort the set in descending order      </p>"},{"location":"cpp_docs/08_Standard_template/#erase-and-find-with-set","title":"<code>erase()</code> and <code>find()</code> with  Set","text":"<p><pre><code>void Set1() {\n\n    std::set&lt;string&gt; students = { \"Ngozi\", \"Fifa\", \"Ayomide\", \"Tolulope\",\"Mustapha\", \"Bolanle\"};\n    students.insert(\"Damilola\");\n    students.insert(\"Zamani\");\n    students.insert(\"Yetunde\");\n\n    auto it = students.begin();\n    while (it != students.end()) cout &lt;&lt; *it++ &lt;&lt; \"  \";\n    cout &lt;&lt; \"\\n\";\n\n\n    /**\n    DOES NOT SUPPORT RANDOM ACCESS LIKE - vector, deque\n    cout &lt;&lt; students[3] &lt;&lt; endl;\n    *it = 12;\n    cout &lt;&lt; *it+3 &lt;&lt; endl; \n    */\n\n    // Erases use the value itset as key or it\n    students.erase(\"Yetunde\");\n    students.erase(students.begin());\n\n\n    for (auto&amp; i : students){\n        cout &lt;&lt; i &lt;&lt; \"  \";\n    }\n\n    // Search returns the iterator to the key\n    auto itr_find = students.find(\"Zamani\");\n\n    if (itr_find != students.end())\n        cout &lt;&lt; \"find: \" &lt;&lt; *itr_find &lt;&lt; \" found\\n\";\n    else\n        cout &lt;&lt; \"couldn't find zamani\\n\";\n\n}\n</code></pre> </p>"},{"location":"cpp_docs/08_Standard_template/#working-with-multiset","title":"Working with multiset","text":"<p>The main difference for <code>multiset</code> is that it allows duplicate of value and you can also find that duplicated values using <code>equal_range</code>.</p> <pre><code>void MultiSet() {\n\n    std::multiset&lt;int&gt; ages{ 5, 6,1, 16, 16, 18, 21, 34, 28, 27, 18, 18, 14 , 16, 0, 1, 16};\n\n    for (auto i : ages) cout &lt;&lt; i &lt;&lt; \"  \";\n\n    // to find multiple occurence of a value\n\n    auto itr_val = ages.find(18);\n    if (itr_val != ages.end())\n        cout &lt;&lt; \"\\nfound: \" &lt;&lt; *itr_val &lt;&lt; \"\\n\\n\";\n\n    // equal range return to iterators as std::pair\n    // first - is the iterator of the first found\n    // second - the iterator of the element after the last found\n    auto itr = ages.equal_range(16);\n\n    while (itr.first != itr.second)\n        cout &lt;&lt; *itr.first++ &lt;&lt; \" \" ;\n    cout &lt;&lt; \"\\n\";\n\n\n}\n\nint main() {\n    MultiSet();\n}\n</code></pre> <p></p>"},{"location":"cpp_docs/08_Standard_template/#standard-map-stdmap-multimap-stdmultimap","title":"Standard Map <code>std::map</code> / Multimap <code>std::multimap</code>","text":"<ul> <li>Implemented as binary tree with Key/Value pair.</li> <li>The elements are arranged in sorted order based on the key values</li> <li>Best for search (its quite fast)</li> <li>No random access allowed (values are immutable)</li> <li>Keys cannot be modified directly</li> </ul>"},{"location":"cpp_docs/08_Standard_template/#insertion-into-a-map","title":"Insertion into a map","text":"<pre><code>void Map() {\n\n    std::map&lt;int, string&gt; studentsInfo = {\n        {0xE1, \"Omolara Olatunde\"},\n        {0x11, \"Segun Thompson\"},\n        {0xff, \"Afor Blessing\"},\n        {0x8A, \"Tunde Abolasade\"}\n    };\n\n\n    // Insert using std::pair\n    studentsInfo.insert(std::pair&lt;int, string&gt;(0xAA, \"Abah Inagwelu\"));\n    studentsInfo.insert(std::pair&lt;int, string&gt;(0x12, \"Odunayo Olaniyan\"));\n\n    // Insert using std::make_pair\n    studentsInfo.insert(std::make_pair(0x22, \"Funmilola Omololu\"));\n    studentsInfo.insert(std::make_pair(0x15, \"Omoriege Sharon\"));\n\n    // Insert using square bracket operator []\n    studentsInfo[0x90] = \"Adebimpe Oluwashina\";\n    studentsInfo[0xAA] = \"Kelechukwu Nnamani\";\n\n\n    for (auto&amp; i : studentsInfo)\n        cout &lt;&lt; std::hex &lt;&lt; i.first &lt;&lt; \" : \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#sorting-the-map-base-on-value","title":"Sorting the map base on value","text":"<p>The work around here is to flip the  map so that the key becomes the value and vice versa</p> <pre><code>template&lt;typename A, typename B&gt;\nstd::pair&lt;B, A&gt; flip_pair(const std::pair&lt;A, B&gt;&amp; p)\n{\n    return std::pair&lt;B, A&gt;(p.second, p.first);\n}\n\ntemplate&lt;typename A, typename B&gt;\nstd::multimap&lt;B, A&gt; flip_map(const std::map&lt;A, B&gt;&amp; src)\n{\n    std::multimap&lt;B, A&gt; dst;\n    std::transform(src.begin(), src.end(), std::inserter(dst, dst.begin()),\n        flip_pair&lt;A, B&gt;);\n    return dst;\n}\n\n// Usage\nvoid Map{\n    std::map&lt;int, string&gt; studentsInfo = {\n        {0xE1, \"Omolara Olatunde\"},\n        ...}\n        ...\n        std::multimap&lt;string, int&gt; dst = flip_map(studentsInfo);\n\n        for (auto&amp; i : dst)\n            cout &lt;&lt; std::hex &lt;&lt; i.first &lt;&lt; \" : \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n\n }\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#modify-erase","title":"Modify &amp; Erase","text":"<pre><code>    // Modify Value \n    studentsInfo[0x11] = \"Mustapha Al Nurudeen\";\n    for (auto&amp; i : studentsInfo) cout &lt;&lt; std::hex &lt;&lt; i.first &lt;&lt; \" : \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"\\n\";\n\n    // Erase by Key\n    studentsInfo.erase(0xAA);\n    for (auto&amp; i : studentsInfo) cout &lt;&lt; std::hex &lt;&lt; i.first &lt;&lt; \" : \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"\\n\";\n\n\n    // Erase at begin()\n    studentsInfo.erase(studentsInfo.begin());\n    for (auto&amp; i : studentsInfo) cout &lt;&lt; std::hex &lt;&lt; i.first &lt;&lt; \" : \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n    cout &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#find-and-iterator-loop","title":"Find and Iterator loop","text":"<pre><code>// Searching through map\nauto itr = studentsInfo.find(0x90);\n\nif (itr != studentsInfo.end())\n    cout &lt;&lt; \"FOUND : \" &lt;&lt; itr-&gt;second &lt;&lt; \"\\n\\n\";\nelse\n    cout &lt;&lt; \"Value not found\\n\\n\";\n\nauto it = studentsInfo.begin();\n\nwhile (it != studentsInfo.end()){\n    cout &lt;&lt; it-&gt;first &lt;&lt; \" =&gt; \" &lt;&lt; it-&gt;second &lt;&lt; \"\\n\";\n    it++;\n    }\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#working-with-stdmultimap","title":"Working with <code>std::multimap</code>","text":"<p>This is similar to the <code>multiset</code> that it supports same key input and usage of <code>equal_range</code> function.</p> <pre><code>void MultiMap() {\n    std::multimap &lt;int, string&gt; usersAddr{ {2, \"Manny\"},{ 5, \"Bongo\"},{ 1, \"Fanaty\"}, {2, \"Olorunsogo\"}, {2, \"Jobak\"}};\n\n    for (auto i : usersAddr){\n        cout &lt;&lt; i.first &lt;&lt; \" \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n    }\n\n}\n</code></pre> <p>with using equal_range</p> <pre><code>void MultiMap() {\n    std::multimap &lt;int, string&gt; usersAddr{ {2, \"Manny\"},{ 5, \"Bongo\"},{ 1, \"Fanaty\"}, {2, \"Olorunsogo\"}, {2, \"Jobak\"}};\n\n    for (auto i : usersAddr){\n        cout &lt;&lt; i.first &lt;&lt; \" \" &lt;&lt; i.second &lt;&lt; \"\\n\";\n    }\n\n    // Using equal range\n    auto itr = usersAddr.equal_range(2);\n    cout &lt;&lt; \"\\nFOUND EQUAL RANGE: \\n\";\n    while (itr.first != itr.second){\n        cout &lt;&lt; itr.first-&gt;first &lt;&lt; \" = \" &lt;&lt; itr.first-&gt;second &lt;&lt; endl;\n        itr.first++;\n    }\n\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#macro-to-print-variable-name","title":"MACRO to print variable name","text":"<pre><code>#define PRINT(var) cout &lt;&lt; #var &lt;&lt; \" = \"&lt;&lt; var &lt;&lt; endl;\n\n\nint score = 50;\nPRINT(score);  // score = 50\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#unordered-containers","title":"Unordered containers","text":"<ul> <li>Associative containers implemented as hash tables</li> <li>Values are hashed and stored in undefined order</li> <li>Fast search, insertion/deletion but may degrade over a period of time</li> <li><code>std::unordered_set</code> stores values that act as keys for hashing</li> <li><code>std::unoredered_map</code> stores pairs (first is used to compute hash)</li> <li>Iterators are constant</li> </ul>"},{"location":"cpp_docs/08_Standard_template/#unordered-set","title":"Unordered set","text":"<pre><code>#include &lt;unordered_set&gt;\nvoid UoSet() {\n    std::unordered_set&lt;std::string&gt; sups;\n    sups.insert(\"Hulk\");\n    sups.insert(\"Batman\");\n    sups.insert(\"Bayrun\");\n    sups.insert(\"touchgirl\");\n    sups.insert(\"Novacaine\");\n    sups.insert(\"NightCrawler\");\n    sups.insert(\"Superman\");\n    sups.insert(\"ReverseFlash\");\n    // once the number of element passes 8 the bucket count changes from 8 to 64\n    sups.insert(\"Flash\");\n\n    for (auto&amp; i : sups) {\n        cout &lt;&lt; \"Bucket #\" &lt;&lt; sups.bucket(i) &lt;&lt;\" ==&gt; \" &lt;&lt; i &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nBucket count: \" &lt;&lt; sups.bucket_count() &lt;&lt; endl;\n    cout &lt;&lt; \"Number of elements: \" &lt;&lt; sups.size() &lt;&lt; endl;\n    cout &lt;&lt; \"Load factor: \" &lt;&lt; sups.load_factor() &lt;&lt; endl;\n\n}\n</code></pre> <p>Unorder multiset allows duplicate</p>"},{"location":"cpp_docs/08_Standard_template/#unordered-map","title":"Unordered Map","text":"<pre><code>#include &lt;unordered_map&gt;\nvoid UoMap() {\n    std::unordered_map&lt;int, string&gt; powerUsers;\n\n    powerUsers.insert(std::make_pair(20000, \"Spiderman\"));\n    powerUsers.insert(std::make_pair(400000, \"Superman\"));\n    powerUsers.insert(std::make_pair(5670, \"Hawkeye\"));\n    powerUsers.insert(std::make_pair(350000, \"Hulk\"));\n    powerUsers.insert(std::pair&lt;int, string&gt;(6500, \"Romanoff\"));\n    powerUsers.insert(std::pair&lt;int, string&gt;(390000, \"SheHulk\"));\n\n    powerUsers[12000] = \"Dr. Strange\";\n    powerUsers[22110] = \"Capt. America\";\n    powerUsers[25110] = \"Capt. Carter\";\n\n\n    for (auto i : powerUsers) {\n        cout &lt;&lt; \"Bucket #\" &lt;&lt; powerUsers.bucket(i.first)&lt;&lt; \" ==&gt; \" &lt;&lt; i.first &lt;&lt;\", \"&lt;&lt; i.second &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"\\nBucket count: \" &lt;&lt; powerUsers.bucket_count() &lt;&lt; endl;\n    cout &lt;&lt; \"Number of elements: \" &lt;&lt; powerUsers.size() &lt;&lt; endl;\n    cout &lt;&lt; \"Load factor: \" &lt;&lt; powerUsers.load_factor() &lt;&lt; endl;\n\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#hash-function","title":"Hash function","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\n\nusing std::cout, std::endl, std::string;\n\nstruct EmpHash {\n    size_t operator() (const Employee&amp; emp) const {\n        auto s1 = std::hash&lt;string&gt;{}(emp.GetName());\n        auto s2 = std::hash&lt;int&gt;{}(emp.GetId());\n        return s1 ^ s2;\n    }\n};\n\nstruct EmpEquality {\n    bool operator()(const Employee&amp; e1, const Employee&amp; e2) const {\n        return e1.GetId() == e2.GetId() &amp;&amp; e1.GetName() == e2.GetName();\n    }\n};\nclass Employee {\n    string mName;\n    int mId;\npublic:\n    Employee(const string&amp; n, int id): mName(n), mId(id){}\n    const string&amp; GetName() const { return mName; }\n    int GetId() const { return mId; }\n};\n\n\nvoid Hashes() {\n    std::hash&lt;std::string&gt; h;\n    cout &lt;&lt; \"Hash: \" &lt;&lt; h(\"Hello\") &lt;&lt; endl;\n\n    std::unordered_set&lt;Employee, EmpHash, EmpEquality&gt; emps;\n    emps.insert(Employee{ \"Segun\", 0x1201});\n    emps.insert(Employee{ \"Omotosho\", 1011});\n    emps.insert(Employee{ \"Balogun\", 0x1202});\n\n    for (auto&amp; x : emps){\n        cout &lt;&lt; x.GetId() &lt;&lt; \" \" &lt;&lt; x.GetName() &lt;&lt; endl;\n    }\n\n}\n\nint main() {\n    Hashes();\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#algorithms","title":"Algorithms","text":"<ul> <li>STL Provides algorithms for common tasks</li> <li>sorting items</li> <li>Removing items</li> <li>Searching items</li> <li> <p>many other numeric operations</p> </li> <li> <p>More optimized than handwritten loops</p> </li> <li> <p>Work with all containers regardless of the data type</p> </li> <li> <p>Several Algorithms can be customized through user-defined operations</p> </li> <li>Some containers provide specialized versions of algorithms.</li> <li>list provides sort &amp; remove</li> <li> <p>associative containers provide <code>lower_bound</code>, <code>upper_bound</code>, <code>find</code> etc.</p> </li> <li> <p>Most algorithms reside in <code>&lt;algorithm&gt;</code> header</p> </li> </ul>"},{"location":"cpp_docs/08_Standard_template/#sorting-algorithm-with-user-defined-type-vector-and-working-with-user-defined-set","title":"Sorting algorithm with User Defined type <code>vector</code> and Working with User Defined <code>set</code>","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n\nclass Employee {\n    string mName;\n    int mId;\n    string mProgLang;\n    public:\n    Employee(const string&amp; n, int id, const string&amp; p)\n        :mName(n), mId(id), mProgLang(p){}\n\n    const string&amp;   GetName() const     { return mName; }\n    int             GetId() const       { return mId; }\n    const string    GetProgLang() const { return mProgLang; }\n\n    // ### SET METHOD 1 - overload the `&lt;` less in the class  \n    //bool          operator &lt; (const Employee&amp; e)const { return mId &lt; e.mId; } // one way to pass less/greater\n};\n\n\nvoid UserDefinedVector() {\n\n    // Sorting with Vector\n    std::vector&lt;Employee&gt; v{\n        Employee(\"Oma\", 5200, \"Js\"),\n        Employee{\"Funmi\", 2100, \"Rust\"},\n        Employee{\"Rodney\", 3802, \"C++\"},\n        Employee{\"Kemi\", 6210, \"Java\"},\n        Employee{\"Busayo\", 4180, \"Python\"}\n    };\n\n    std::sort(v.begin(), v.end(), \n        // best way to pass less/greater\n        [](Employee&amp; emp1, Employee&amp; emp2) {return emp1.GetId() &lt; emp2.GetId();\n        });\n\n    cout &lt;&lt; \"=== User defined Vector === \\n\";\n    for (auto&amp; x : v)\n        cout &lt;&lt; x.GetId() &lt;&lt; \" - \" &lt;&lt; x.GetName() &lt;&lt; \" - \" &lt;&lt; x.GetProgLang() &lt;&lt; endl;\n\n}\n\n// ### SET METHOD 2 - overload the `()` in a `Compare` \nstruct EmpCompare {\n    bool operator () (const Employee&amp; a1, const Employee&amp; a2) const {\n        return a1.GetId() &lt; a2.GetId();\n    }\n}; \n\nvoid UserDefinedSet() {\n    // Sorting with Vector\n    std::set&lt;Employee, EmpCompare&gt; sl{\n        Employee(\"Oma\", 5200, \"Js\"),\n        Employee{\"Funmi\", 2100, \"Rust\"},\n        Employee{\"Rodney\", 3802, \"C++\"},\n        Employee{\"Kemi\", 6210, \"Java\"},\n        Employee{\"Busayo\", 4180, \"Python\"}\n    };\n\n\n    cout &lt;&lt; \"=== User defined Set === \\n\";\n    for (auto&amp; x : sl)\n        cout &lt;&lt; x.GetId() &lt;&lt; \" - \" &lt;&lt; x.GetName() &lt;&lt; \" - \" &lt;&lt; x.GetProgLang() &lt;&lt; endl;\n    }\n\nint main() {\n\n    UserDefinedSet();\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#count_if-find_if-and-for_each-algorithms-demo","title":"count_if, find_if and for_each algorithms demo","text":"<pre><code>// Sorting with Vector\nstd::vector&lt;Employee&gt; v{\n    Employee(\"Oma\", 5200, \"Js\"),\n    Employee{\"Rodney\", 3802, \"C++\"},\n    Employee{\"Anthonio\", 4040, \"C++\"},\n    Employee{\"Daniel2\", 3000, \"C++\"},\n    Employee{\"Kemi\", 6210, \"Java\"},\n    Employee{\"Busayo\", 4180, \"Python\"},\n    Employee(\"Omololu\", 7070, \"Js\"),\n};\n\nint countJsUsers{};\n// count_if Algorithm [User defined] ===========================================================\ncountJsUsers = std::count_if(v.begin(), v.end(),\n    [](const auto&amp; emp) { return emp.GetProgLang() == \"Js\" ; });\n\ncout &lt;&lt; \"Count of Js users : \" &lt;&lt; countJsUsers &lt;&lt;\"\\n\";\n\n// find &amp; find_if Algorithm [User defined] =====================================================\nauto itr = std::find_if(v.begin(), v.end(),\n    [](const auto&amp; emp) { return emp.GetProgLang() == \"Python\"; });\n\nif (itr != v.end())\n    cout &lt;&lt; \"\\nHeyy!!! \" &lt;&lt; itr-&gt;GetName() &lt;&lt; \" is a Python Programmer!\\n\";\n\n// for_each Algorithms ========================================================================\nstd::for_each(v.begin(), v.end(), [](const auto&amp; e) {\n    cout &lt;&lt; e.GetName() &lt;&lt; \" | \";\n    int counter = 2;\n    cout &lt;&lt; e.GetId() * counter &lt;&lt; \" | \";\n    cout &lt;&lt; e.GetProgLang() + std::to_string(e.GetId()) &lt;&lt; endl;\n    });\n\n// for_each example 2 === Getting Just individual Ids =========================================\nstd::vector&lt;int&gt; ids;\nstd::for_each(v.begin(), v.end(), [&amp;](const auto&amp; e) {\n    if (e.GetProgLang() == \"C++\") ids.push_back(e.GetId());\n    });\n\ncout &lt;&lt; \"\\nCpp users ID : \";\nfor (auto&amp; i : ids) cout &lt;&lt; i &lt;&lt; \" \";\n</code></pre>"},{"location":"cpp_docs/08_Standard_template/#new-features-topics-to-discuss-c11","title":"New Features / Topics to discuss c++11","text":""},{"location":"cpp_docs/08_Standard_template/#emplace_back","title":"Emplace_back","text":"<p>Makes significant difference when you want to pass User defined class to a container The main advantange is that it doesn't call multiple constructor, only copy. unlike the <code>push_back</code> that calls all the constructs (copy and move ) <pre><code>void UserDefinedVector() {\n\n    // Sorting with Vector\n    std::vector&lt;Employee&gt; v{\n        Employee(\"Oma\", 5200, \"Js\"),\n        Employee{\"Busayo\", 4180, \"Python\"},\n    };\n\n    v.push_back(Employee(\"Omololu\", 7070, \"Js\"));\n\n    // instead on creating constructors like it was above we can just write it like so\n    v.emplace_back( \"Anthonio\", 4040, \"C++\" );\n    v.emplace_back(\"Daniel2\", 3000, \"C++\");\n</code></pre></p>"},{"location":"cpp_docs/08_Standard_template/#stderase-remove-elements-based-on-its-value-c20-features","title":"<code>std::erase</code> Remove Elements based on its value C++20 features","text":"<pre><code>int main() {\n\n    std::vector&lt;int&gt; v1 = { 34, 23, 69, 33,21 };\n    std::list&lt;int&gt; l1 = { 304, 12, 69, 331,211 };\n    std::deque&lt;int&gt;  d1 = { 53, 230, 69, 133,11 };\n\n    std::erase(v1, 69);\n    std::erase(l1, 69);\n    std::erase(d1, 69);\n\n    for (auto&amp; i : v1) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : l1) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; \"\\n\";\n    for (auto&amp; i : d1) cout &lt;&lt; i &lt;&lt; \" \"; cout &lt;&lt; \"\\n\";\n\n\n    return 0;\n}\n</code></pre>"},{"location":"cpp_docs/linkedlist_index/","title":"Introduction to nextedList","text":"<p>This function demonstrate how you build and nexted list both forward and Backward</p> <pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt;\nstruct Node {\n T data{};\n Node* next{};\n\n Node(T data) {\n  this-&gt;data = data;\n }\n};\n\nvoid printData(Node&lt;int&gt; *head) {\n\n Node&lt;int&gt; *current = head;\n if (current == nullptr) {\n  std::cout &lt;&lt; \"The list is empty \" &lt;&lt; std::endl;\n  return ;\n }\n\n std::cout &lt;&lt; \"=====Print value:==e===\\n\";\n while (current != nullptr) {\n  std::cout &lt;&lt; \" - \" &lt;&lt; current-&gt;data &lt;&lt; \" \";\n  current = current-&gt;next;\n }\n}\n\nvoid buildForward() {\n Node&lt;int&gt;* newNode{}, * first{}, * last{}, * current{};\n int val;\n\n // get input\n std::cout &lt;&lt; \"Input Value\" &lt;&lt; std::endl;\n std::cin &gt;&gt; val;\n\n while (val != -1) {\n\n  // create a NewNode\n  newNode = new Node&lt;int&gt;(int(val));\n  newNode-&gt;next = nullptr;\n\n  // insert a newNode\n  if (first == nullptr) {\n   first = newNode;\n   last = newNode;\n  }\n  else {\n   // Insert new node at end of last \n   last-&gt;next = newNode;\n   last = newNode;\n  }\n\n  // get input\n  std::cin &gt;&gt; val;\n\n } // end While loop\n std::cout &lt;&lt; \"End Build List ...\" &lt;&lt; std::endl;\n\n // Print the forward data\n printData(first);\n\n} // End buildForward\n\nvoid buildBackward() {\n Node&lt;int&gt;* newNode{}, * first{}, * last{}, * current{};\n int val;\n // get input\n std::cout &lt;&lt; \"Input Value\" &lt;&lt; std::endl;\n std::cin &gt;&gt; val;\n\n while (val != -1) {\n\n  // create a NewNode\n  newNode = new Node&lt;int&gt;(int(val));\n\n  // insert a newNode\n  if (first == nullptr) {\n   first = newNode;\n   last = newNode;\n  }\n  else {\n   // Insert new node at the beginning of first\n   newNode-&gt;next = first;\n   first = newNode;\n  }\n\n  // get input\n  std::cin &gt;&gt; val;\n\n } // end While loop\n std::cout &lt;&lt; \"End Build List ...\" &lt;&lt; std::endl;\n\n // Print the forward data\n printData(first);\n}\n\n\nint main() {\n\n // Building FORWARD =&gt;\n buildForward();\n\n // Building BACKWARD =&gt;\n buildBackward();\n\n return 0;\n}\n</code></pre> <p>Result : </p>"},{"location":"cpp_docs/linkedlist_index/#demonstration-of-use-listiterator","title":"Demonstration of use ListIterator","text":"<p>Trying to see how this individual methods in the <code>ListIterator</code> class plays out</p> <pre><code>#include &lt;iostream&gt;\n// NOTE: We are re-using the Prev. Node Struct \n\ntemplate &lt;typename T&gt;\nvoid printData(Node&lt;T&gt;* head) {\n\n Node&lt;T&gt;* current = head;\n if (current == nullptr) {\n  std::cout &lt;&lt; \"The list is empty \" &lt;&lt; std::endl;\n  return;\n }\n\n std::cout &lt;&lt; \"=====Print value:=====\\n\";\n while (current != nullptr) {\n  std::cout &lt;&lt; \" - \" &lt;&lt; current-&gt;data &lt;&lt; \" \";\n  current = current-&gt;next;\n }\n std::cout &lt;&lt; \"\\n\";\n}\n\n// A class that produces each element of a container such as a nextedList\ntemplate &lt;class T&gt;\nclass ListIterator {\npublic: \n ListIterator() {\n  current = nullptr;\n }\n\n ListIterator(Node&lt;T&gt;* ptr) {\n  current = ptr;\n }\n\n T operator*() {\n  if (current != nullptr) return current-&gt;data;\n  else return -1;\n }\n\n ListIterator&lt;T&gt; operator++() {\n  current = current-&gt;next;\n  return *this;\n };\n\n\n bool operator==(const ListIterator&amp; right) const {\n  return (current == right.current) ;\n }\n bool operator!=(const ListIterator&amp; right) const {\n  return (current != right.current) ;\n }\nprivate:\n Node&lt;T&gt;* current; // Point to the current node in nexted list\n};\n\nint main() {\n Node&lt;int&gt;* first, *last, *newNode;\n\n float input_data[]{ -100.4, 4.9,3.4, 22.8, 42.7, 42.6, 4.2 , 90.0, 0 ,30.4, 50.25 };\n\n for (auto&amp; val : input_data) {\n\n  newNode = new Node&lt;float&gt;(val);\n\n  if (first == nullptr) {\n   // Initial node\n   first = newNode;\n   last = newNode;\n  }\n  else {\n   //// insert at back\n   last-&gt;next = newNode;\n   last = newNode;\n  }\n }\n\n printData&lt;float&gt;(first);\n\n\n ListIterator &lt;float&gt; l1(first);\n printData(first);\n std::cout &lt;&lt; \"Print Current Data: \" &lt;&lt; *l1 &lt;&lt; std::endl;\n ++l1; // increment the next\n std::cout &lt;&lt; \"Print (next)Current Data: \" &lt;&lt; *l1 &lt;&lt; std::endl;\n\n ListIterator &lt;float&gt; l2(l1); // copy l1 into l3\n ListIterator &lt;float&gt; l3; // \n\n std::cout &lt;&lt; \"is l2 equals l1 =&gt; \" &lt;&lt; (l2 == l1) &lt;&lt; \"\\n\";\n std::cout &lt;&lt; \"is l3 equals l1 =&gt; \" &lt;&lt; (l3 == l1) &lt;&lt; \"\\n\";\n std::cout &lt;&lt; \"l3 value: \" &lt;&lt; *l3 &lt;&lt; std::endl;\n return 0;\n}\n</code></pre>"},{"location":"git-docs/","title":"Git Documentation","text":"<p>General flow of info</p>"},{"location":"git-docs/#git-basics-commands","title":"Git Basics commands","text":"<p>Get started with git </p> <pre><code>git init # to initial git repo.\n</code></pre> <p>once changes has been made in the working directory  call:</p> <pre><code>git add &lt;file_name or folder_name&gt; # To Add file staged directory\ngit add * # to add all\n\ngit restore --staged &lt;file_name or folder_name&gt; # To remove from Stage back to workdir\ngit restore --staged * # to restore all to workdir\n\n# once you are done staging and you are satisfied\ngit commit -m \"Your commit msg goes here\"\n</code></pre> <pre><code>git commit --amend # add recent staged changes \ngit commit --amend --no-edit # no need to edit message\ngit commit --amend -m \"An updated message for commit\" # Add updated message\n</code></pre>"},{"location":"git-docs/#branching","title":"Branching","text":"<pre><code>git branch dev_codes # Creating a new branch \"dev_codes\"\ngit checkout dev_codes # Switch to the new branch \"dev_codes\"\n\ngit checkout -b dev_codes2 # Create &amp; switch to new branch \"dev_codes2\"\n</code></pre>"},{"location":"git-docs/#checkout-fetched-content-into-a-new-local-branch","title":"Checkout Fetched Content (into a new local branch)","text":"<pre><code>git checkout -b &lt;new_local_branch_name&gt; &lt;origin/remote_branch_name&gt;\n## for example \ngit checkout -b L11-start origin/L11-start\n</code></pre> <p>Use <code>git branch -d &lt;branch_name&gt;</code> to delete a merged branch. USe <code>git branch -D &lt;branch_name&gt;</code> to force delete an unmerged branch</p>"},{"location":"git-docs/#remote-information","title":"Remote Information","text":"<pre><code>git remote # show origin name\ngit remote rename &lt;old_name&gt; &lt;new_name&gt; # eg. \ngit remote --help # loads help page with command\n\n# To obtain only the remote URL:\ngit config --get remote.origin.url\n\n# If you require full on a network of remote repo where the origin resides:\ngit remote show origin\n\n# This will print all your remotes' fetch/push URLs:\ngit remote -v   \n\n# Add remote to your remote list\ngit remote add &lt;name&gt; &lt;url&gt;\n</code></pre>"},{"location":"git-docs/#fetch-merge-and-pull","title":"fetch, merge and pull","text":"<pre><code>git fetch &lt;remote&gt; # fetch all remote\ngit fetch &lt;remote&gt; &lt;branch&gt; # fetch only specific branch\n# use `git fetch origin &lt;remote-branch-name&gt;`  fetching from the remote branch without merge\ngit fetch origin L8-start # fetch from L8-start branch\n\n#After fetching, you need to merge the changes from the remote-tracking branch\n#into your current local branch.\ngit merge origin/L8-start\ngit merge --abort # to abort merge\n\n# combined fetch &amp; merge from origin\ngit pull &lt;remote_name&gt; &lt;branch_name&gt;\ngit pull origin L8-start\n\n# Updated file from the origin\ngit push &lt;remote_name&gt; &lt;branch_name&gt;\ngit push origin main\n</code></pre>"},{"location":"git-docs/#undo-a-git-merge-commit-that-hasnt-been-pushed-yet","title":"Undo a Git merge COMMIT that hasn't been pushed yet","text":"<p>if you accidentally merge a branch or you just want to under branch that has been **merged and commited **</p> <pre><code>git reset --hard &lt;commit_sha&gt;\n\ngit reset --hard HEAD~1 # There's also another way:\n</code></pre>"},{"location":"git-docs/#git-fetch-continuation","title":"Git fetch continuation","text":"<p>run  <code>git fetch origin</code> to pull all branches from the remote or <code>git fetch origin &lt;branch_name&gt;</code> to fetch specific branch</p> <p>run <code>git branch -r</code> to show the remote branches</p>"},{"location":"git-docs/#inspect-specific-fetched-content","title":"Inspect Specific Fetched Content:","text":"<p>To examine the content of a specific fetched branch or commit without merging it into your local branch, you can use <code>git log</code> or <code>git show</code>  with the remote-tracking branch name:</p> <p>View commit history of a remote branch:</p> <pre><code>    git log origin/your_remote_branch_name\n\n    # Git log range\n    git log HEAD..origin/your_local_branch_name \n</code></pre> <p>Inspect a specific commit from a remote branch:</p> <pre><code>git show origin/your_remote_branch_name^ #replace ^ with HEAD~N\n\n# for Example\ngit show origin/L10-end HEAD~2   # show all changes from HEAD~0 to HEAD~2\n</code></pre>"},{"location":"git-docs/#compare-local-and-remote-branches","title":"Compare Local and Remote Branches:","text":"<p>To see the differences between your local l branch and the corresponding remote-tracking branch after a fetch, use git difference:</p> <pre><code>git diff origin/&lt;remote_branch_name&gt;\n## for example \ngit diff origin/L10-start\n</code></pre>"},{"location":"git-docs/#git-stash","title":"Git stash","text":"<p>My use case: Want to create a new branch but I have not commited currently staged changes</p> <p>so I call :</p> <pre><code>git stash # keep my changes for later saving\ngit checkout -b L11-start origin/L11-start # create local from remote\n\n## Once I have checked out all I needed to do,\ngit checkout L10-start # Previous branch\ngit stash pop # Retrieve kept changes\n</code></pre>"},{"location":"godot-docs/","title":"Introduction to Godot","text":"<p>F6 to run current scene</p> <p></p>"},{"location":"godot-docs/godot_shader/","title":"Godot Shader Docs","text":""},{"location":"godot-docs/godot_shader/#scrolling-image","title":"Scrolling Image","text":"<pre><code>    shader_type spatial;\n\n    uniform sampler2D imgTex: source_color;\n    uniform vec3 color : source_color;\n\n    void vertex() {\n    }\n\n    void fragment() {\n        vec2 base_uv = UV;\n        base_uv.y += TIME * 0.5; // Translate the image\n        vec4 img_tex = texture(imgTex, base_uv);\n        ALBEDO = color * img_tex.rgb;\n    }\n</code></pre>"},{"location":"godot-docs/godot_shader/#changing-the-color-and-scrolling-image","title":"Changing the color and scrolling image","text":"<pre><code>shader_type spatial;\n\nuniform sampler2D imgTex: source_color;\nuniform vec3 color : source_color = vec3(0.5, 1.0, 1.0);\n\nvoid vertex() {\n// Called for every vertex the material is visible on.\n}\n\nvoid fragment() {\n    // Called for every pixel the material is visible on.\n    vec2 base_uv = UV;\n    vec3 base_color = color;\n\n    base_uv.y += TIME * 0.5; // Translate the image\n    vec4 img_tex = texture(imgTex, base_uv);\n\n    // Normalize stuff\n    base_color.rb *= (sin(TIME*2.0) + 1.0) / 2.0;\n\n    ALBEDO = base_color * img_tex.rgb;\n\n}\n</code></pre>"},{"location":"godot-docs/godot_shader/#moving-the-vertex-in-sinosidal","title":"Moving the Vertex in sinosidal","text":"<pre><code>void vertex() {\n    // Called for every vertex the material is visible on.\n    VERTEX.y += cos(4.0 * VERTEX.x + TIME * 2.0)  *  0.2;\n}\n</code></pre>"},{"location":"godot-docs/godot_shader/#loading-only-the-texture","title":"Loading only the texture","text":"<pre><code>uniform sampler2D img_tex2 : source_color;\n\nvoid fragment() {\n    vec4 tex1 = texture(img_tex2, UV);\n    ALBEDO = tex1.rgb;\n}\n</code></pre>"},{"location":"godot-docs/godot_shader/#working-with-images","title":"Working with Images","text":"<pre><code>uniform sampler2D img_tex2 : source_color;\nuniform sampler2D img_tex2_alpha : source_color;\n\nuniform vec3 header_color : source_color;\nuniform vec3 face_color : source_color;\n\nvoid fragment() {\n    vec4 tex1 = texture(img_tex2, UV);\n    //vec4 tex2 = texture(img_tex2_alpha, UV);\n\n    vec3 channel_1 = tex1.r * header_color;\n    vec3 channel_2 = tex1.g * face_color ;\n    vec3 outcolor = smoothstep(channel_1, channel_2, vec3(0.1, 0.1, 0.1));\n\n    ALBEDO = outcolor;\n}\n</code></pre>"},{"location":"godot-docs/godot_shader/#distort-the-image-uv-coords","title":"Distort the image uv coords","text":"<pre><code>void fragment() {\n    vec2 base_uv = UV;\n    base_uv.y += sin(100.0 * UV.x + TIME*5.0) * 0.01;\n    vec4 tex1 = texture(img_tex2, base_uv);\n    //vec4 tex2 = texture(img_tex2_alpha, UV);\n\n    vec3 channel_1 = tex1.r * header_color;\n    vec3 channel_2 = tex1.g * face_color ;\n    vec3 outcolor = smoothstep(channel_1, channel_2, vec3(0.1, 0.1, 0.1));\n\n    ALBEDO = outcolor;\n}\n</code></pre>"},{"location":"godot-docs/godot_shader/#mixing-colors-in-black-and-white-image","title":"Mixing colors in Black and White Image","text":"<pre><code>uniform vec3 header_color : source_color;\nuniform vec3 face_color : source_color;\n\nvoid fragment() {\n    vec2 base_uv = UV;\n    base_uv.y += sin(100.0 * UV.x + TIME*5.0) * 0.01;\n    vec4 tex1 = texture(img_tex2, base_uv);\n    vec3 outcolor = mix(header_color, face_color, tex1.rgb);\n    ALBEDO = outcolor;\n</code></pre>"},{"location":"godot-docs/godot_shader/#creating-fire-fx","title":"Creating Fire Fx","text":"<pre><code>shader_type spatial;\nrender_mode cull_disabled, unshaded, shadows_disabled, ambient_light_disabled;\n\nuniform vec3 fire_color : source_color;\nuniform sampler2D tex1Img : source_color, repeat_enable;\nuniform sampler2D gradImg : source_color;\n\n\nvoid fragment() {\n    vec2 b_uv = UV;\n    b_uv.y += TIME*2.0;\n\n\n    vec4 tex1 = texture(tex1Img, b_uv); // Fire texture (BW)\n    vec4 grad1 = texture(gradImg, UV); // Gradient 2d\n\n    ALBEDO = fire_color;\n    // Clamp the value between 0.0 and 1.0\n    ALPHA =  clamp((tex1.r - grad1.r), 0.0, 1.0 )* 4.0;\n    }\n</code></pre>"},{"location":"godot-docs/godot_shader/#basic-fresnel-shader","title":"Basic Fresnel Shader","text":"<pre><code>shader_type spatial;\nrender_mode cull_disabled, unshaded, shadows_disabled, ambient_light_disabled, depth_prepass_alpha;\n\nuniform vec3 fire_color : source_color;\nuniform vec3 fresnel_color : source_color;\nuniform float amo : hint_range(0.1, 10.0, 0.1);\nuniform float inten: hint_range(0.1, 5.0, 0.1);\n\nvec3 fresnel_glow(float amount, float intensity, vec3 color,   vec3 normal, vec3 view){\n    return pow(1.0 - dot(normalize(normal), normalize(view)), amount) * color * intensity;\n}\n\n\nvoid fragment() {\n    vec3 fresnel = fresnel_glow(amo, inten, fresnel_color, NORMAL, VIEW);\n    ALBEDO = fire_color + fresnel;\n    ALPHA =  clamp(fresnel.r, 0.0, 1.0);\n}\n</code></pre>"},{"location":"graphics/00_basics_cg_knowledge/","title":"Basic Knowledge for Computer Graphics","text":""},{"location":"graphics/00_basics_cg_knowledge/#calculating-delta-time","title":"Calculating Delta Time","text":"<pre><code>//       ct = getTime()\n//  dt = ct - lt\n//  lt = ct\nfloat deltaTime{}, lastTime{};\n. . .\n    float currentTime = glfwGetTime();\n    deltaTime = currentTime - lastTime;\n    lastTime = currentTime;\n</code></pre>"},{"location":"graphics/01_00_setting-up-opengl/","title":"Setting Up OpenGL","text":""},{"location":"graphics/01_00_setting-up-opengl/#glfw-glew-setting-up-basic-window","title":"GLFW / GLEW Setting Up Basic Window","text":"<ul> <li>Go to glfw download and download the 32bit binary. </li> </ul> <ul> <li>create a new Empty Project in Visual Studio</li> <li>In the solution directory, create a folder called <code>dependency</code>    this is where your <code>GLFW</code> will be located</li> </ul> <ul> <li>In your extracted <code>GLFW</code> binary directory, copy <code>include</code> and <code>lib-vc2022</code> and paste it in the <code>dependency &gt; glfw</code> directory of your project</li> </ul> <ul> <li>In your project dir, create an entry source file. in the <code>src</code> directory then <code>Main.cpp</code> for your entry point:</li> </ul>"},{"location":"graphics/01_00_setting-up-opengl/#getting-glfw-to-run-window","title":"Getting GLFW to Run Window","text":"<ul> <li>Go to GLFW Documentation copy the source code and paste it in your <code>Main.cpp</code>.  you will get a number of errors,</li> </ul> <pre><code>#include &lt;GLFW/glfw3.h&gt;\n\nint main(void)\n{\n    GLFWwindow* window;\n\n    /* Initialize the library */\n    if (!glfwInit())\n        return -1;\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\n    if (!window){\n        glfwTerminate();\n        return -1;\n    }\n\n    glfwMakeContextCurrent(window);  /* Make window's context current */\n\n    while (!glfwWindowShouldClose(window)){ /* Loop until the user closes win */\n\n        /* Render here */\n\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(window); /* Swap front and back buffers */\n\n        glfwPollEvents(); /* Poll for and process events */\n    }\n\n    glfwTerminate();\n    return 0;\n}\n</code></pre> <ul> <li> <p>So Next Step is:</p> <ul> <li> <p>Go to your Project Property <code>ALT + ENTER</code></p> </li> <li> <p>Make sure your program is in <code>all cofiguration</code> and <code>All Platforms</code> </p> </li> <li> <p>Under <code>C/C++ &gt; General &gt; Additional Include Directories &gt; \u2b07\ufe0f Edit</code> add <code>$(SolutionDir)\\dependency\\glfw\\include</code> </p> </li> <li> <p>Under <code>Linker &gt; General &gt; Additional Libary Directories</code> add <code>$(SolutionDir)\\dependency\\glfw\\lib-vc2022</code> </p> </li> <li>Under same <code>Linker</code> go to <code>Input &gt; Additional Dependencies</code> add <code>glfw3.lib;opengl32.lib</code>.  </li> </ul> <p>Note</p> <p><code>glfw3</code>is located in your <code>$(SolutionDir)\\dependency\\glfw\\lib-vc2022</code> While <code>opengl32.lib</code> is windows dependent</p> <p>  - Finally, Remember to Change your architecture you are rendering in to <code>x86</code> </p> </li> </ul>"},{"location":"graphics/01_00_setting-up-opengl/#using-glew-for-opengl-functions","title":"Using GLEW for Opengl functions","text":"<ul> <li>Download from here and copy to <code>dependency</code> directory</li> <li>Add the <code>include</code> and <code>lib</code> then link the <code>glew32s.lib</code> on your Visual studio.</li> <li>Under <code>C/C++ &gt; Preprocessor &gt; preprocessor def</code> add <code>GLEW_STATIC</code> macro</li> </ul> <p>The following are very important for <code>glew</code> to function properly:</p> <ul> <li>make sure you include <code>#include &lt;GL/glew.h&gt;</code> before any opengl include</li> <li>An opengl context must be called before calling <code>glewInit()</code></li> </ul> <pre><code>#include &lt;GL/glew.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;iostream&gt;\n\nint main(void)\n{\n    GLFWwindow* window;\n\n    /* Initialize the library */\n    if (!glfwInit())\n        return -1;\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\n    if (!window) {\n        glfwTerminate();\n        return -1;\n    }\n\n    glfwMakeContextCurrent(window);  /* Make window's context current */\n\n    if (glewInit() != GLEW_OK)\n        std::cout &lt;&lt; \"Error! at GLEW \" &lt;&lt; std::endl;\n\n    // Get the OPENGL VERSION \n    std::cout &lt;&lt; glGetString(GL_VERSION) &lt;&lt; std::endl;\n...\n    glfwTerminate();\n    return 0;\n}\n</code></pre> <p></p>"},{"location":"graphics/01_00_setting-up-opengl/#glfw-glad-setting-up","title":"GLFW / GLAD Setting Up","text":""},{"location":"graphics/01_00_setting-up-opengl/#dependency-setup-folder","title":"Dependency Setup Folder","text":"<p>Since you will be build a lot of small OpenGL projects, Its advicable to have a general dependency directory where you will always refer to your <code>includes</code>, <code>libraries</code> and <code>binaries</code> when you create new projects. This will saves you from have multiple copies on every projects.</p> <p>Here is my preferred setup is:</p> <p></p> <p>You can add more as times goes by, eg. the asset importer <code>assimp</code>, font library and video library like <code>ffmpeg</code> etc.</p>"},{"location":"graphics/01_00_setting-up-opengl/#building-glfw","title":"Building GLFW","text":"<p>Here we are going to download and compile the source code ourself. This is important because not all the library we will be working with will have a precompile binary for use we will have to do that ourself. So the earlier the better.</p> <ul> <li>Download the the source package code from GLFW repository site and the extract the folder.</li> </ul>"},{"location":"graphics/01_00_setting-up-opengl/#building-glfw-with-cmake","title":"Building GLFW with CMake","text":"<p>The next step involves the use of <code>CMake</code> to build our source code</p> <ul> <li>Inside your newly extracted <code>glfw3+</code> folder. create a new <code>build</code> folder</li> </ul> <p></p> <ul> <li>right Click inside your current <code>build</code> folder RIGHT+CLICK and <code>Open in Terminal</code></li> </ul> <p></p> <p>What this means is build the <code>glfw3.4</code> folder inside the <code>build</code> folder</p> <p>then you will get the following output</p> <p></p> <p>Then all you have to do is lunch <code>GLFW.sln</code> and build it in Visual Studio </p> <p></p> <p>The library we need is located in the following folder</p> <p></p> <p>copy the glfw include folder (<code>glfw3.4/include</code>) and your glfw library(<code>glfw3.4/build/src/Debug/glfw3.lib</code>) , inside your dependency directory in the OpenGL folder </p>"},{"location":"graphics/01_00_setting-up-opengl/#getting-glad-file","title":"Getting Glad file","text":"<p>visit https://glad.dav1d.de/ for glad zip</p> <p>Important setup:</p> <ul> <li>Language (C/C++), Specification (OpenGL)</li> <li>API - <code>gl : Version 3.3 and above</code></li> <li>Profile - <code>Core</code> dropdown</li> <li>Options - Check Generate a loader (checked by default)</li> </ul> <p>Then click GENERATE</p> <p>Download the glad.zip file</p> <p>when you extract you will find <code>src</code> and <code>include</code> folder</p> <ul> <li>The <code>include</code> will be in <code>C:/OpenGL/dependency/GLAD/include</code></li> <li>The <code>src/glad.c</code> will be in your <code>${ProjectDir}/src</code> where your <code>main.cpp</code> is located</li> </ul>"},{"location":"graphics/01_00_setting-up-opengl/#setting-up-visual-studio","title":"Setting up Visual Studio","text":"<p>Select your Program solution and ALT + ENTER</p> <ol> <li> <p>Visual Studio directory setup </p> </li> <li> <p>Linking library in Linker &gt; Input </p> </li> </ol>"},{"location":"graphics/01_00_setting-up-opengl/#run-basic-code","title":"Run Basic Code","text":"Main.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n\n\n\nvoid processInput(GLFWwindow* window){\n    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)\n        glfwSetWindowShouldClose(window, true);\n}\n\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height){\n    glViewport(0, 0, width, height);\n}\n\n// settings\nconst unsigned int S_W = 800;\nconst unsigned int S_H = 600;\n\n\nint main()\n{ \n    // glfw: initialize and configure\n    //--------------------------------\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n    /* Create a windowed mode window and its OpenGL context */\n    GLFWwindow* window = glfwCreateWindow(S_W, S_H, \"Testing Scene\", NULL, NULL);\n    if (!window) {\n        std::cout &lt;&lt; \"Failed to create GLFW window\" &lt;&lt; std::endl;\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window); /* Make window's context current */\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n\n\n    // glad: load all OpenGL function pointers\n    // ---------------------------------------\n    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))\n    {\n        std::cout &lt;&lt; \"Failed to initialize GLAD\" &lt;&lt; std::endl;\n        return -1;\n    }\n\n    while (!glfwWindowShouldClose(window)) { /* Loop until the user closes win */\n\n        // input\n        processInput(window);\n\n        // render\n // ------\n        glClearColor(0.7f, 0.3f, 0.7f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glfwSwapBuffers(window); /* Swap front and back buffers */\n\n        glfwPollEvents(); /* Poll for and process events */\n    }\n\n    glfwTerminate();\n    return 0;\n}\n</code></pre>"},{"location":"graphics/01_01_the-basics-opengl/","title":"Drawing OpenGL Quad","text":"<p>So here is the quad that will be rendered</p> Drawn Quad"},{"location":"graphics/01_01_the-basics-opengl/#parse-fragment-and-vertex-shader","title":"Parse Fragment and Vertex Shader","text":"<p>There are various approach to parse your shaders and you can start by creating things like <code>basic.shader</code> located in <code>$(ProjectDir)res/shader/</code> to serve as your default shader.</p> basic.shader<pre><code>#shader vertex\n#version 330 core\nlayout(location = 0) in vec4 pos;\nvoid main(){\n    gl_Position = pos;\n}\n\n#shader fragment\n#version 330 core\nlayout(location=0) out vec4 color;\nvoid main(){\n    color = vec4(0.3, 0.6, 0.9, 0.5);\n}\n</code></pre> <ul> <li>We start by creating a struct to hold the vertex and Fragment shader</li> </ul> <pre><code>struct ShaderSource {\n    std::string VertSource;\n    std::string FragSource;\n};\n\n\nstatic ShaderSource ParseShader(const std::string&amp; filePath)\n{\n    enum class shType{ NONE = -1, VERT = 0, FRAG = 1};\n    shType type = shType::NONE; // use to seperate lines of shaders\n\n    std::stringstream ss[2]; // array to hold  the shaders\n    std::ifstream stream(filePath); // load the file src in stream\n    std::string line{}; // holder for each line\n\n    while (getline(stream, line)) {\n\n        if (line.find(\"#shader\") != std::string::npos){\n\n            if (line.find(\"vertex\") != std::string::npos)\n                type = shType::VERT;\n\n            else if (line.find(\"fragment\") != std::string::npos)\n                type = shType::FRAG;\n\n        }\n        else {\n            ss[(int)type] &lt;&lt; line &lt;&lt; \"\\n\";\n        }\n    }\n\n    return { ss[0].str(), ss[1].str() };\n} // end ParseShader\n</code></pre> <p>This is the function we use to read our shaders from the <code>basic.shader</code> file.</p>"},{"location":"graphics/01_01_the-basics-opengl/#the-shader-compiler-function","title":"The Shader Compiler function","text":"<p>Up next is the code for compiling  the shader</p> <pre><code>tatic unsigned int CompileShader(unsigned int type, const std::string&amp; source) {\n    GLuint shader_id = glCreateShader(type);\n\n    const char* shader_src = source.c_str();\n    glShaderSource(shader_id, 1, &amp;shader_src, nullptr);\n\n    glCompileShader(shader_id);\n\n    int success;\n    glGetShaderiv(shader_id, GL_COMPILE_STATUS, &amp;success);\n    /* int length;\n     glGetShaderiv(shader_id, GL_INFO_LOG_LENGTH, &amp;length);\n     char* msg = (char*)alloca(length * sizeof(char));\n     glGetShaderInfoLog(shader_id, length, &amp;length, msg);*/\n    if (success == GL_FALSE) {\n        char msg[1024];\n        glGetShaderInfoLog(shader_id, 1024, NULL, msg);\n\n        std::cout &lt;&lt; \" VERTEX:  \\n\" &lt;&lt; msg &lt;&lt; \"\\n\";\n    }\n    return shader_id;\n}// end CompileShader\n</code></pre>"},{"location":"graphics/01_01_the-basics-opengl/#the-create-shader-function","title":"The Create shader function","text":"<p>This will be responsible for creating the shaders bring all the above functions together and to use</p> <pre><code>static unsigned int CreateShaderProgram(const std::string&amp; filePath) {\n    ShaderSource shaderSource = ParseShader(filePath);\n\n    // shaders compilation\n    GLuint vid = CompileShader(GL_VERTEX_SHADER, shaderSource.VertSource.c_str());\n    GLuint fid = CompileShader(GL_FRAGMENT_SHADER, shaderSource.FragSource.c_str());\n\n    //Linking the program\n    GLuint prog = glCreateProgram();\n\n    glAttachShader(prog, vid);\n    glAttachShader(prog, fid);\n\n    glLinkProgram(prog);\n    glValidateProgram(prog);\n\n    glDeleteShader(vid);\n    glDeleteShader(fid);\n\n    return prog;\n}\n</code></pre>"},{"location":"graphics/01_01_the-basics-opengl/#bring-all-together-in-main-function","title":"Bring All together in Main Function","text":"<p>Finally we bring them all together in the main function</p> <pre><code>int main(void)\n{\n    GLFWwindow* window;\n\n    /* Initialize the library */\n    if (!glfwInit())\n        return -1;\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(640, 480, \"Tutorial 01\", NULL, NULL);\n    if (!window)\n    {\n        glfwTerminate();\n        return -1;\n    }\n\n    /* Make the window's context current */\n    glfwMakeContextCurrent(window);\n\n    if (glewInit() != GLEW_OK) {\n        std::cout &lt;&lt; \" Glew Error \\n\";\n    }\n\n    float vert_pos[8] = {\n        0.1f, -0.4f,\n        -0.7f, 0.2f,\n        0.5f, 0.5f,\n        0.5f, -0.5f\n    };\n\n    int indices[6] = {\n        0, 1, 3,\n        1, 2, 3\n    };\n\n    unsigned int vao, vbo, ibo;\n\n    glGenVertexArrays(1, &amp;vao);\n    glGenBuffers(1, &amp;vbo);\n    glGenBuffers(1, &amp;ibo);\n\n    glBindVertexArray(vao);\n\n    glBindBuffer(GL_ARRAY_BUFFER, vbo);\n    glBufferData(GL_ARRAY_BUFFER, 8 * sizeof(float), vert_pos, GL_STATIC_DRAW);\n\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(int), indices, GL_STATIC_DRAW);\n\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0);\n\n    glBindVertexArray(0);\n\n\n    //Linking the program\n    GLuint prog = CreateShaderProgram(\"res/shader/basic.shader\");\n\n    /* Loop until the user closes the window */\n    while (!glfwWindowShouldClose(window))\n    {\n        /* Render here */\n        glClear(GL_COLOR_BUFFER_BIT);\n\n\n        glUseProgram(prog);\n\n        glBindVertexArray(vao);\n\n        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n\n        /* Swap front and back buffers */\n        glfwSwapBuffers(window);\n\n        /* Poll for and process events */\n        glfwPollEvents();\n    }\n\n    glfwTerminate();\n    return 0;\n}\n</code></pre>"},{"location":"graphics/01_02_draw-triangle/","title":"Drawing a Triangle in OpenGL","text":""},{"location":"graphics/01_02_draw-triangle/#passing-vertex-data-to-opengl","title":"Passing Vertex Data to OpenGL","text":"<p>Basic idea is I want to define a bunch of data which represent my triangle. I want to put it in my GPU VRAM . Then issue a draw call openGL from the CPU to GPU etc.</p> <p>When you generate anything in openGL, it returns an id whether its vertex buffer, vertex Array, Shader etc.</p> <pre><code> //Param: \n //n: int {number of buffers}, \n // buffer : GLuint(unsigned int) - Unique id to identify the buffer\n  unsigned int vb_id;\n glGenBuffers(1, &amp;vb_id);\n</code></pre> <p>Basically, selecting the buffer and how to use it</p> <pre><code>// GL_ARRAY_BUFFER means it is a contain of array \n// It can be use to do so many other this like store texture data etc\nglBindBuffer(GL_ARRAY_BUFFER, vb_id);\n</code></pre> <p>Next is, Put data into the buffer(container), specify how large it</p> <pre><code>// void glBufferData(\n// GLenum target - what type of buffer(here it container of array)\n// GLsizeiptr size - size of pointer,\n// const GLvoid * data - values container to store \n// GLenum usage - how to draw? not sure\n\n glBufferData(GL_ARRAY_BUFFER, 6*sizeof(float), position, GL_STATIC_DRAW);\n</code></pre>"},{"location":"graphics/01_02_draw-triangle/#telling-opengl-how-to-use-the-data","title":"Telling OpenGL how to use the data","text":"<p>The Next Phase is being able to tell openGL how to read the data, How our data is laid out.</p>"},{"location":"graphics/01_02_draw-triangle/#creating-shader-in-opengl","title":"Creating shader in Opengl","text":"<p>This function handles reading the shader source from string and compiling it with opengl. It then returns the shader id. The same function is used for both vertex and fragment shader</p> <pre><code>static unsigned int CompileShader(unsigned int type, const std::string&amp; source) {\n\n    GLuint sh_id = glCreateShader(type);\n\n    const char* shader_src = source.c_str();\n    glShaderSource(sh_id, 1, &amp;shader_src, nullptr);\n\n    glCompileShader(sh_id);\n\n    int success;\n    glGetShaderiv(sh_id, GL_COMPILE_STATUS, &amp;success);\n\n    if (success == GL_FALSE) {\n    int length;\n    glGetShaderiv(sh_id, GL_INFO_LOG_LENGTH, &amp;length);\n    char* msg = (char*)alloca(length * sizeof(char));\n    glGetShaderInfoLog(sh_id, length, &amp;length, msg);\n\n        /*char msg[1024];\n        glGetShaderInfoLog(shader_id, 1024, NULL, msg);*/\n\n        std::cout &lt;&lt; (type ==GL_VERTEX_SHADER ? \"vertex\":\"fragment\" ) &lt;&lt; \" Shader Error:  \\n\" &lt;&lt; msg &lt;&lt; \"\\n\";\n        std::cout &lt;&lt; msg &lt;&lt; std::endl;\n        glDeleteShader(sh_id);\n        return 0;\n    }\n    return sh_id;\n}// end CompileShader\n</code></pre>"},{"location":"graphics/01_02_draw-triangle/#creating-program-in-opengl","title":"Creating program in Opengl","text":"<p>This function is kinda similar to shader one but this create the shader program after get the both the shader id for the vertex and fragment shader.</p> <pre><code>static unsigned int CreateShader(const std::string&amp; vertShader, const std::string&amp; fragShader) {\n\n    unsigned int program = glCreateProgram();\n    unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertShader);\n    unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragShader);\n\n    glAttachShader(program, vs);\n    glAttachShader(program, fs);\n\n    glLinkProgram(program);\n    glValidateProgram(program);\n\n    glDeleteShader(vs);\n    glDeleteShader(fs);\n\n    return program;\n}\n</code></pre>"},{"location":"graphics/01_02_draw-triangle/#initiating-and-create-vertex","title":"Initiating and create Vertex","text":"<p>The next phase will be initiating drawing and stuff</p> <pre><code>    float vertex_positions[8] = {\n        -0.8f, -0.9f, // pos 1\n        0.2f, 0.7f, // pos 2\n        0.3f, -0.5f, // pos 3\n         0.7f, 0.7f, // pos 4\n    };\n\n    unsigned int buffer;\n    glGenBuffers(1, &amp;buffer);\n    glBindBuffer(GL_ARRAY_BUFFER, buffer);\n    glBufferData(GL_ARRAY_BUFFER, 8 * sizeof(float), vertex_positions, GL_STATIC_DRAW);\n\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0);\n</code></pre> <p>Then we create the shader and read it with the function we specified</p> <pre><code>std::string vShader =\n    R\"glsl(\n        #version 330 core\n        layout(location = 0) in vec4 position;\n        void main()\n        {\n            gl_Position = position;\n        }\n    )glsl\";\n\nstd::string fShader =\n    R\"glsl(\n     #version 330 core\n     layout(location = 0) out vec4 color;\n     void main()\n     {\n        color = vec4(1.0, 0.5, 0.3, 1.0);\n     }\n      )glsl\";\n\nunsigned int shader = CreateShader(vShader, fShader);\nglUseProgram(shader);\n</code></pre> <p>The final step is to go to our loop and then make the draw call</p> <pre><code>/* Loop until the user closes the window */\nwhile (!glfwWindowShouldClose(window))\n{\n    /* Render here */\n    glClear(GL_COLOR_BUFFER_BIT);\n    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);\n\n    // glDrawArrays(GL_TRIANGLE_STRIP, 0,4 ); // draw  four point\n    glDrawArrays(GL_TRIANGLES, 0, 3);\n\n    /* Swap front and back buffers */\n    glfwSwapBuffers(window);\n\n    /* Poll for and process events */\n    glfwPollEvents();\n}\n</code></pre> <p>Your output should be something like this</p> <p></p> <p>you can find the source code here</p>"},{"location":"graphics/01_03_draw-quad/","title":"How to draw Quad better option","text":"using `GL_TRIANGLES`  using `GL_LINE_STRIP`"},{"location":"graphics/01_03_draw-quad/#basic-shader","title":"Basic Shader","text":"basic.shader<pre><code>#shader vertex\n#version 330 core\nlayout(location = 0) in vec4 pos;\nvoid main(){\n    gl_Position = pos;\n}\n\n#shader fragment\n#version 330 core\nlayout(location=0) out vec4 color;\nuniform vec4 new_color;\n\nvoid main(){\n    // color = vec4(1.0, 1.0, 0.5, 1.0);\n    color = new_color;\n}\n</code></pre>"},{"location":"graphics/01_03_draw-quad/#shaderprogram-class","title":"ShaderProgram Class","text":"ShaderProgram.h<pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;fstream&gt;\n\nstruct ShaderSource {\n    std::string VertSource;\n    std::string FragSource;\n};\n\nclass ShaderProgram {\n    unsigned int vbo{}, vao{};\n    unsigned int sh_id{}, prog_id{}; // Shader and Program id\n\n    ShaderSource ParseShader(const std::string&amp; filePath)\n    {\n        enum class shType { NONE = -1, VERT = 0, FRAG = 1 };\n        shType type = shType::NONE; // use to seperate lines of shaders\n\n        std::stringstream ss[2]; // array to hold  the shaders\n        std::ifstream stream(filePath); // load the file src in stream\n        std::string line{}; // holder for each line\n\n        while (getline(stream, line)) {\n\n            if (line.find(\"#shader\") != std::string::npos) {\n\n                if (line.find(\"vertex\") != std::string::npos)\n                    type = shType::VERT;\n\n                else if (line.find(\"fragment\") != std::string::npos)\n                    type = shType::FRAG;\n\n            }\n            else {\n                ss[(int)type] &lt;&lt; line &lt;&lt; \"\\n\";\n            }\n        }\n\n        return { ss[0].str(), ss[1].str() };\n    }// end ParseShader\n\n    unsigned int CompileShader(unsigned int type, const std::string&amp; source) {\n\n        sh_id = glCreateShader(type);\n\n        const char* shader_src = source.c_str();\n        glShaderSource(sh_id, 1, &amp;shader_src, nullptr);\n\n        glCompileShader(sh_id);\n\n        int success;\n        glGetShaderiv(sh_id, GL_COMPILE_STATUS, &amp;success);\n\n        if (success == GL_FALSE) {\n            int length;\n            glGetShaderiv(sh_id, GL_INFO_LOG_LENGTH, &amp;length);\n            char* msg = (char*)alloca(length * sizeof(char));\n            glGetShaderInfoLog(sh_id, length, &amp;length, msg);\n\n            /*char msg[1024];\n            glGetShaderInfoLog(shader_id, 1024, NULL, msg);*/\n\n            std::cout &lt;&lt; (type == GL_VERTEX_SHADER ? \"vertex\" : \"fragment\") &lt;&lt; \" Shader Error:  \\n\" &lt;&lt; msg &lt;&lt; \"\\n\";\n            std::cout &lt;&lt; msg &lt;&lt; std::endl;\n            glDeleteShader(sh_id);\n            return 0;\n        }\n        return sh_id;\n    }// end CompileShader\n\n    unsigned int CreateShaderProgram(const std::string&amp; vertShader, const std::string&amp; fragShader) {\n\n        prog_id = glCreateProgram();\n        unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertShader);\n        unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragShader);\n\n        glAttachShader(prog_id, vs);\n        glAttachShader(prog_id, fs);\n\n        glLinkProgram(prog_id);\n        glValidateProgram(prog_id);\n\n        glDeleteShader(vs);\n        glDeleteShader(fs);\n\n        return prog_id;\n    }// end CreateShaderProgram : vs, fs\n\n    unsigned int CreateShaderProgram(const std::string&amp; filePath) {\n        ShaderSource shaderSource = ParseShader(filePath);\n        return CreateShaderProgram(shaderSource.VertSource.c_str(), shaderSource.FragSource.c_str());\n    } // end CreateShaderProgram : filepath\n\n\n\n    void init() {};\n\npublic:\n    ShaderProgram(const std::string&amp; filePath) {\n        CreateShaderProgram(filePath);\n    };\n    ShaderProgram(const std::string&amp; vertShader, const std::string&amp; fragShader) {\n        CreateShaderProgram(vertShader, fragShader);\n    }\n\n    void useProgram() {\n        glUseProgram(prog_id);\n    }\n\n    void Uniform4f(const char* uniform_string, float x, float y, float z, float w) {\n        unsigned int u_id = glGetUniformLocation(prog_id, uniform_string);\n        glUniform4f(u_id, x, y, z, w);\n    }\n\n    unsigned int getShaderID() const { return sh_id; }\n    unsigned int getProgramID() const { return prog_id; }\n};\n</code></pre>"},{"location":"graphics/01_03_draw-quad/#main-class","title":"Main Class","text":"main.cpp<pre><code>#include &lt;GL/glew.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include \"ShaderProgram.h\"\n\n\n\nint main(void)\n{\n    GLFWwindow* window;\n\n    /* Initialize the library */\n    if (!glfwInit())\n        return -1;\n\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(640, 480, \"Hello World\", NULL, NULL);\n    if (!window) {\n        glfwTerminate();\n        return -1;\n    }\n\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n\n    glfwMakeContextCurrent(window);  /* Make window's context current */\n\n    if (glewInit() != GLEW_OK)\n        std::cout &lt;&lt; \"Error! at GLEW \" &lt;&lt; std::endl;\n\n    // Get the OPENGL VERSION \n  /*  std::cout &lt;&lt; glGetString(GL_VERSION) &lt;&lt; std::endl;\n*/\n\n\n    float position[10] =\n    {\n         -0.3f, -0.5f,   // point 0\n          0.5f, -0.5f,   // point 1\n          0.5f,  0.5f,   // point 2\n         -0.5f,  0.5f,   // point 3\n          0.4f, 0.9f     // point 4\n    };\n\n    unsigned int pos_index[9] =\n    {\n        0, 1, 2,\n        2, 3, 0,\n        2, 4, 3\n    };\n\n    unsigned int va_id, vb_id, ib_id;\n    glGenVertexArrays(1, &amp;va_id);\n    glBindVertexArray(va_id);\n\n    glGenBuffers(1, &amp;vb_id);\n    glBindBuffer(GL_ARRAY_BUFFER, vb_id);\n    glBufferData(GL_ARRAY_BUFFER, 10 * sizeof(float), position, GL_STATIC_DRAW);\n\n    glGenBuffers(1, &amp;ib_id);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ib_id);\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 9 * sizeof(unsigned int), pos_index, GL_STATIC_DRAW);\n\n\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0);\n\n\n    ShaderProgram sProg(\"src/basic.shader\");\n\n    sProg.useProgram();\n\n    sProg.Uniform4f(\"new_color\", 0.7f, 0.2f, 0.3f, 1.0f);\n\n\n    while (!glfwWindowShouldClose(window)) { /* Loop until the user closes win */\n\n        /* Render here */\n\n        glClear(GL_COLOR_BUFFER_BIT);\n\n\n        glBindVertexArray(va_id);\n\n        glDrawElements(GL_LINE_STRIP, 9, GL_UNSIGNED_INT, nullptr); // Draw strip\n        //glDrawElements(GL_TRIANGLES, 9, GL_UNSIGNED_INT, nullptr);\n\n        glfwSwapBuffers(window); /* Swap front and back buffers */\n\n        glfwPollEvents(); /* Poll for and process events */\n    }\n\n\n    glfwTerminate();\n    return 0;\n}\n</code></pre>"},{"location":"graphics/01_03_draw-quad/#texture-drawing-class","title":"Texture drawing class","text":"Texture.h<pre><code>#pragma once\n#include &lt;iostream&gt;\n#include &lt;GL/glew.h&gt;\n\nclass Texture\n{\nprivate:\n    unsigned int texture_id; // Load and create image\n    unsigned int m_glTexture_num{ GL_TEXTURE0 };\n\npublic:\n    static int texture_count;\n    Texture(std::string texturePath);\n\n    void Bind() const;\n};\n</code></pre> Texture.cpp<pre><code>#include \"Texture.h\"\n\n#define STB_IMAGE_IMPLEMENTATION\n#include \"stb_image.h\"\n\nint Texture::texture_count = 0;\n\nTexture::Texture(std::string texturePath) {\n\n    texture_count ++;\n\n    // Switch the OpenGl texture, i.e. (GL_TEXTURE0 -&gt; GLTEXTURE1 -&gt; GL_TEXTURE2 ...)\n    //  if more texture detected\n    if (texture_count &gt; 1 ) \n        m_glTexture_num = m_glTexture_num + texture_count - 1;\n\n    // Load and create image\n    texture_id;\n    // texture 1\n    // ---------\n    glGenTextures(1, &amp;texture_id);\n    glBindTexture(GL_TEXTURE_2D, texture_id);\n    // set the texture wrapping parameters\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);   // set texture wrapping to GL_REPEAT (default wrapping method)\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n    // set texture filtering parameters\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n    // load image, create texture and generate mipmaps\n    int width, height, nrChannels;\n    stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.\n\n    unsigned char* data = stbi_load(texturePath.c_str(), &amp;width, &amp;height, &amp;nrChannels, 0);\n    if (data)\n    {\n        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);\n        glGenerateMipmap(GL_TEXTURE_2D);\n    }\n    else\n    {\n        std::cout &lt;&lt; \"Failed to load texture\" &lt;&lt; std::endl;\n    }\n    stbi_image_free(data);\n}\n\nvoid Texture::Bind() const\n{\n    // bind textures on corresponding texture units\n\n    glActiveTexture(m_glTexture_num);\n    glBindTexture(GL_TEXTURE_2D, texture_id);\n}\n</code></pre>"},{"location":"graphics/01_03_draw-quad/#modifying-the-shader","title":"Modifying the Shader","text":"basic.shader<pre><code>#shader vertex\n#version 330 core\n\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec2 aTexCoord;\n\nout vec2 TexCoord;\n\nvoid main()\n{\n    gl_Position = vec4(aPos, 1.0);\n    TexCoord = vec2(aTexCoord.x, aTexCoord.y);\n}\n\n#shader fragment\n#version 330 core\n\nout vec4 FragColor;\nin vec2 TexCoord;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n\nvoid main()\n{\n\n    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.5);\n}\n</code></pre>"},{"location":"graphics/01_03_draw-quad/#using-the-texture-class","title":"Using the Texture Class","text":"main.cpp<pre><code>... \n\nglVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));\nglEnableVertexAttribArray(1);\n\nTexture tex1(\"imgs/download.jpg\");\nTexture tex2(\"imgs/avatar200.jpg\");\n\nShaderProgram sProg(\"src/basic.shader\");\n\nsProg.useProgram();\nsProg.SetInt(\"texture1\", 0);\nsProg.SetInt(\"texture2\", 1);\n\n    while (!glfwWindowShouldClose(window)) { /* Loop until the user closes win */\n\n        ...\n        tex1.Bind();\n        tex2.Bind();\n        ...\n</code></pre> <p>Here is the full srcs: -  <code>Texture.h</code> -  <code>Texture.cpp</code> -  <code>ShaderProgram.h</code> -  <code>ShaderProgram.cpp</code> -  <code>basic.shader</code> - <code>stb_image.h</code> github repo here </p>"},{"location":"graphics/01_03_draw-quad/#open-gl-screen-normalization-coordinate-convertion","title":"Open GL Screen normalization, coordinate convertion","text":"<p>The goal here is to convert the opengl coordinate to pixel based.</p> <p></p> <p>where, </p> <ul> <li>\\(X_o\\), \\(Y_o\\) are current point openGl screen coordinate</li> <li>\\(X_p\\), \\(Y_p\\) are current point Pixel screen coordinate</li> <li>\\(W_p\\), \\(H_p\\) pixel screen width and height resolution</li> </ul>"},{"location":"graphics/01_03_draw-quad/#find-the-openggl-x-coord","title":"Find the OpengGl X coord","text":"<p>Finding \\(X_o\\),</p> \\[\\frac{X_o-(-1)}{X_p - 0} = \\frac{1-(-1)}{W_p - 0}\\] \\[\\frac{X_o + 1}{X_p} = \\frac{2}{W_p}\\] \\[\\boxed{X_o = \\frac{2X_p}{W_p} - 1 --- (1)}\\]"},{"location":"graphics/01_03_draw-quad/#find-the-openggl-y-coord","title":"Find the OpengGl Y coord","text":"<p>Finding \\(Y_o\\),</p> \\[\\frac{Y_o-(1)}{Y_p - 0} = \\frac{-1 - 1}{W_h - 0}\\] \\[\\frac{Y_o - 1}{Y_p} = \\frac{-2}{W_h}\\] \\[\\boxed{ X_o = \\frac{-2X_p}{W_p} + 1 --- (2)}\\]"},{"location":"graphics/01_03_draw-quad/#implementing-it-in-opengl","title":"Implementing it in OpenGL","text":"<p>This are the basic representation in cpp</p> <pre><code>float coordConvert(int dim, DimType type) {\n    if (type == X) return static_cast&lt;float&gt;(((2.0 * dim) / Width) - 1);\n    else if (type == Y) return static_cast&lt;float&gt;(((-2.0 * dim) / Height) + 1);\n}\n\nPosition Point(int Xdim, int Ydim) {\n    return { coordConvert(Xdim, X), coordConvert(Ydim, Y) };\n}\n...\n// we call it here like so\n    std::vector&lt;Position&gt; vert_p;\n    vert_p.push_back(Point(20, 20));\n    vert_p.push_back(Point(400, 50));\n    vert_p.push_back(Point(600, 400));\n    vert_p.push_back(Point(30, 480));\n</code></pre> <p>This is the full implementation</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;GL/glew.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;vector&gt;\n\nint Width = 960;\nint Height = 540;\n\n\nenum DimType { X, Y };\nstruct Position {float x; float y;};\n\nfloat coordConvert(int dim, DimType type) {\n    if (type == X) return static_cast&lt;float&gt;(((2.0 * dim) / Width) - 1);\n    else if (type == Y) return static_cast&lt;float&gt;(((-2.0 * dim) / Height) + 1);\n}\n\nPosition Point(int Xdim, int Ydim) {\n    return { coordConvert(Xdim, X), coordConvert(Ydim, Y) };\n}\n\nstruct ShaderSource {std::string VertSource; std::string FragSource;};\nstatic ShaderSource ParseShader(const std::string&amp; filePath){. . . .}\nstatic unsigned int CompileShader(unsigned int type, const std::string&amp; source) { . . . . }// end CompileShader\nstatic unsigned int CreateShaderProgram(const std::string&amp; vertShader, const std::string&amp; fragShader) { . . . . }\n\nstatic unsigned int CreateShaderProgram(const std::string&amp; filePath) {\n    ShaderSource shaderSource = ParseShader(filePath);\n    return CreateShaderProgram(shaderSource.VertSource.c_str(), shaderSource.FragSource.c_str());\n}\n\n\nint main(void)\n{\n    GLFWwindow* window;\n\n    /* Initialize the library */\n    if (!glfwInit()) return -1;\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(Width, Height, \"Tutorial 01\", NULL, NULL);\n\n    if (!window){\n        glfwTerminate();return -1;\n    }\n\n    //glfwSwapInterval(1);\n\n    /* Make the window's context current */\n    glfwMakeContextCurrent(window);\n\n    if (glewInit() != GLEW_OK) {\n        std::cout &lt;&lt; \" Glew Error \\n\";\n    }\n\n\n    std::vector&lt;Position&gt; vert_p;\n    vert_p.push_back(Point(20, 20));\n    vert_p.push_back(Point(400, 50));\n    vert_p.push_back(Point(600, 400));\n    vert_p.push_back(Point(30, 480));\n\n\n    int indices[6] = {\n        0, 1, 3,\n        1, 2, 3\n    };\n\n    unsigned int vao, vbo, ibo;\n\n    glGenVertexArrays(1, &amp;vao);\n    glGenBuffers(1, &amp;vbo);\n    glGenBuffers(1, &amp;ibo);\n\n    glBindVertexArray(vao);\n\n    glBindBuffer(GL_ARRAY_BUFFER, vbo);\n    glBufferData(GL_ARRAY_BUFFER,vert_p.size() * sizeof(Position), vert_p.data(), GL_STATIC_DRAW);\n\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(int), indices, GL_STATIC_DRAW);\n\n    glEnableVertexAttribArray(0);\n    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0);\n\n    glBindVertexArray(0);\n\n\n    //Linking the program\n    GLuint prog = CreateShaderProgram(\"res/shader/basic1.shader\");\n\n    glUseProgram(prog);\n\n /*   glUniform4f(glGetUniformLocation(prog, \"u_color\"),0.9f, 0.9f, 0.1f, 3.0f);*/\n    glUniform2f(glGetUniformLocation(prog, \"u_resolution\"), Width, Height);\n\n    /* Loop until the user closes the window */\n    float time_step = 0.0001f;\n    float current_time = 0.0f;\n    while (!glfwWindowShouldClose(window))\n    {\n        /* Render here */\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        glBindVertexArray(vao);\n\n        glUniform1f(glGetUniformLocation(prog, \"u_time\"), current_time); \n        current_time += time_step;\n\n        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\n\n        /* Swap front and back buffers */\n        glfwSwapBuffers(window);\n\n        /* Poll for and process events */\n        glfwPollEvents();\n    }\n\n    glfwTerminate();\n    return 0;\n}\n</code></pre>"},{"location":"graphics/02_01_materials/","title":"Basics of materials in OpenGL","text":"main.cpp<pre><code>#include \"ShaderProgram.h\"\n#include \"Texture.h\"\n\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly\nvoid processInput(GLFWwindow* win);\n\n// glfw: whenever the window size changed (by OS or user resize) this callback function executes\nvoid framebuffer_size_callback(GLFWwindow* window, int width, int height);\n// Handle mouse position\nvoid mouse_callback(GLFWwindow* win, double xposIn, double yposIn);\n// Handle mouse scroll\nvoid scroll_callback(GLFWwindow* win, double xoffset, double yoffset);\n\nconst int SCR_WIDTH = 640;\nconst int SCR_HEIGHT = 480;\n\n// time\nfloat lastTime{}, deltaTime{};\n\n// lighting\nglm::vec3 lightPos(0.6f, 0.5f, 1.0f);\n\nglm::vec3 camPos = glm::vec3(0.0f, 0.0f, 3.0f);\nglm::vec3 camFront = glm::vec3(0.0f, 0.0f, -1.0f);\nglm::vec3 camUp = glm::vec3(0.0f, 1.0f, 0.0f);\n\nbool firsMouse = true;\nfloat yaw = -90.0f; //since yaw 0.0 result to direction to right\nfloat pitch = 0.0f;\nfloat lastX = SCR_WIDTH / 2.0f;\nfloat lastY = SCR_HEIGHT / 2.0f;\nfloat fov = 45.0f;\n\nint main(void)\n{\n\n    /* Initialize the library */\n    if (!glfwInit())\n        return -1;\n\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n    GLFWwindow* window;\n\n    /* Create a windowed mode window and its OpenGL context */\n    window = glfwCreateWindow(640, 480, \"Image Display\", NULL, NULL);\n    if (!window) {\n        glfwTerminate();\n        return -1;\n    }\n\n\n    glfwMakeContextCurrent(window);  /* Make window's context current */\n    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);\n    glfwSetCursorPosCallback(window, mouse_callback);\n    glfwSetScrollCallback(window, scroll_callback);\n\n    // tell GLFW to capture our mouse\n    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);\n\n\n    if (glewInit() != GLEW_OK)\n        std::cout &lt;&lt; \"Error! at GLEW \" &lt;&lt; std::endl;\n\n    // Get the OPENGL VERSION \n    std::cout &lt;&lt; glGetString(GL_VERSION) &lt;&lt; std::endl;\n\n\n    // configure global opengl state\n    glEnable(GL_DEPTH_TEST);\n    glEnable(GL_BLEND);\n    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);\n\n    // set up vertex data (and buffer(s)) and configure vertex attributes\n    // ------------------------------------------------------------------\n    float vertices[] = {\n        -0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,\n         ...\n        -0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,\n        -0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f\n    };\n\n\n    unsigned int cubeVAO, VBO;\n    glGenVertexArrays(1, &amp;cubeVAO);\n    glBindVertexArray(cubeVAO);\n\n    glGenBuffers(1, &amp;VBO);\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n\n    // position attribute\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), 0);\n    glEnableVertexAttribArray(0);\n    //// color attributes                               \n\n    // texture cordinate                            \n    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));\n    glEnableVertexAttribArray(1);\n\n\n    // second, configure the light's VAO (VBO stays the same; the vertices are the same for the light object which is also a 3D cube)\n    unsigned int lightCubeVAO;\n    glGenVertexArrays(1, &amp;lightCubeVAO);\n    glBindVertexArray(lightCubeVAO);\n\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    // note that we update the lamp's position attribute's stride to reflect the updated buffer data\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);\n    glEnableVertexAttribArray(0);\n\n    ShaderProgram sCubeShader(\"src/01_materials.shader\");\n    ShaderProgram sLightCubeShader(\"src/01_lightCube.shader\");\n\n;\n\n\n    while (!glfwWindowShouldClose(window)) { /* Loop until the user closes win */\n\n\n        // per-frame time logic\n        // --------------------\n        float currentTime = static_cast&lt;float&gt;(glfwGetTime());\n        deltaTime = currentTime - lastTime;\n        lastTime = currentTime;\n\n        // input -----\n        processInput(window);\n\n        /* Render here */\n        glClearColor(0.2f, 0.2f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n\n        // be sure to activate shader when setting uniforms/drawing objects\n        sCubeShader.useProgram();\n        sCubeShader.SetVec3(\"light.position\", lightPos);\n        sCubeShader.SetVec3(\"viewPos\", camPos);\n\n        // light properties\n        glm::vec3 lightColor;\n        lightColor.x = static_cast&lt;float&gt;(sin(glfwGetTime() * 2.0));\n        lightColor.y = static_cast&lt;float&gt;(sin(glfwGetTime() * 0.7));\n        lightColor.z = static_cast&lt;float&gt;(sin(glfwGetTime() * 1.3));\n\n        glm::vec3 diffuseColor = lightColor * glm::vec3(0.5f); // decrease the influence\n        glm::vec3 ambientColor = diffuseColor * glm::vec3(0.2f); // low influence\n        sCubeShader.SetVec3(\"light.ambient\", ambientColor);\n        sCubeShader.SetVec3(\"light.diffuse\", diffuseColor);\n        sCubeShader.SetVec3(\"light.specular\", 1.0f, 1.0f, 1.0f);\n\n        // Material properties\n        sCubeShader.SetVec3(\"material.ambient\", 1.0f, 0.5f, 0.31f);\n        sCubeShader.SetVec3(\"material.diffuse\", 1.0f, 0.5f, 0.31f);\n        sCubeShader.SetVec3(\"material.specular\", 0.5f, 0.5f, 0.5f); // specular lighting doesn't\n        sCubeShader.SetFloat(\"material.shininess\", 32.0f);\n\n        // view/projection transformation\n        glm::mat4 projection = glm::perspective(glm::radians(fov), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);\n\n        glm::mat4 view = glm::lookAt(camPos, camPos + camFront, camUp);\n        sCubeShader.SetMat4(\"projection\", projection);\n        sCubeShader.SetMat4(\"view\", view);\n\n        // world transformation\n        glm::mat4 model = glm::mat4(1.0f);\n        float rotateAngle = (float)glfwGetTime() * 12.0f;\n        model = glm::rotate(model, glm::radians(rotateAngle), glm::vec3(0, 1, 0));\n        sCubeShader.SetMat4(\"model\", model);\n\n        // render cube\n        glBindVertexArray(cubeVAO);\n        glDrawArrays(GL_TRIANGLES, 0, 36);\n\n        // also draw the lamp object\n        sLightCubeShader.useProgram();\n        sLightCubeShader.SetMat4(\"projection\", projection);\n        sLightCubeShader.SetMat4(\"view\", view);\n        model = glm::mat4(1.0f);\n        model = glm::translate(model, lightPos);\n        model = glm::scale(model, glm::vec3(0.1f)); // a smaller cube\n        sLightCubeShader.SetMat4(\"model\", model);\n\n        glBindVertexArray(lightCubeVAO);\n        glDrawArrays(GL_TRIANGLES, 0, 36);\n\n\n        glfwSwapBuffers(window); /* Swap front and back buffers */\n        glfwPollEvents(); /* Poll for and process events */\n    }\n\n\n    glfwTerminate();\n    return 0;\n}\n\n...\n</code></pre> <p>The shader used for the material</p> 01_materials.shader<pre><code>#shader vertex===============================\n#version 330 core\nlayout (location = 0) in vec3 aPos;\nlayout (location = 1) in vec3 aNormal;\n\nout vec3 FragPos;\nout vec3 Normal;\n\nuniform mat4 model, view, projection;\n\nvoid main()\n{\n    FragPos = vec3(model * vec4(aPos, 1.0));\n    Normal = mat3(transpose(inverse(model))) * aNormal;  \n\n    gl_Position = projection * view * vec4(FragPos, 1.0);\n}\n\n#shader fragment=================================\n#version 330 core\nin vec3 FragPos;  \nin vec3 Normal;  \n\nout vec4 FragColor;\n\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;    \n    float shininess;\n}; \n\nstruct Light {\n    vec3 position;\n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n};\n\n\n\nuniform vec3 viewPos;\nuniform Material material;\nuniform Light light;\n\nvoid main()\n{\n    // ambient\n    vec3 ambient = light.ambient * material.ambient;\n\n    // diffuse \n    vec3 norm = normalize(Normal);\n    vec3 lightDir = normalize(light.position - FragPos);\n    float diff = max(dot(norm, lightDir), 0.0);\n    vec3 diffuse = light.diffuse * (diff * material.diffuse);\n\n    // specular\n    vec3 viewDir = normalize(viewPos - FragPos);\n    vec3 reflectDir = reflect(-lightDir, norm);  \n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n    vec3 specular = light.specular * (spec * material.specular);  \n\n    vec3 result = ambient + diffuse + specular;\n    FragColor = vec4(result, 1.0);\n} \n</code></pre> <p>The shader for the light object(cube)</p> 01_lightCube.shader<pre><code>#shader vertex===============================\n#version 330 core\n\nlayout (location = 0) in vec3 aPos;\n\nuniform mat4 model, view, projection;\n\nvoid main()\n{\n    gl_Position = projection * view * model * vec4(aPos, 1.0);\n}\n\n#shader fragment=================================\n#version 330 core\nout vec4 FragColor;\n\nvoid main()\n{\n    FragColor = vec4(1.0); // set all 4 vector values to 1.0\n}\n</code></pre> <ul> <li> <code>main.cpp</code> </li> <li> <code>01_materials.shader</code> </li> <li> <p> <code>01_lightCube.shader</code> </p> </li> <li> <p> <code>Texture.h</code> </p> </li> <li> <code>Texture.cpp</code> </li> <li> <code>ShaderProgram.h</code> </li> <li> <code>ShaderProgram.cpp</code> </li> <li><code>stb_image.h</code> github repo here </li> </ul>"},{"location":"graphics/02_02_assimp_setup/","title":"ASSIMP (Open Asset Import Library) Setup","text":"<ul> <li>Download and Install Cmake if not already available</li> <li>Download <code>Assimp</code> for its github repository </li> <li> <p>Extract your assimp into the \"assimp-master\" and create a \"build\" folder.   Inside your \"build\" folder, open terminal      </p> <p> </p> </li> <li> <p>in your terminal type <code>cmake ..\\assimp-master</code> and wait for the build to finish processing   </p> </li> <li> <p>Once done building, in same build folder, you open Assimp.sln in the visual studio</p> </li> <li> <p> </p> </li> <li> <p>Right click on the <code>ALL BUILD &gt; Build</code>, wait a while for it to finish processing and you will be good.</p> </li> </ul>"},{"location":"graphics/03_01_adv_stencil_testing/","title":"Code documentation for Stencil testing","text":""},{"location":"graphics/03_01_adv_stencil_testing/#maincpp","title":"Main.cpp","text":"<pre><code>#include &lt;iostream&gt;\n\n#include &lt;sstream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\n#include \"Renderer.h\"\n#include \"PrimitiveMesh.h\"\n#include \"Camera.h\"\n\n\nclass RenderTriangle : public Renderer {\n\npublic:\n    Renderer::Renderer;\n\n    unique_ptr&lt;GraphicObject&gt; rectObject;\n    unique_ptr&lt;GraphicObject&gt; cubeObject;\n\n    Shader* shaderSingleColor;\n\n\n    void setupDraw() override{\n        Renderer::setupDraw();\n\n\n        // configure global opengl state\n        // -----------------------------\n        glEnable(GL_DEPTH_TEST);\n        glDepthFunc(GL_LESS);\n\n        glEnable(GL_STENCIL_TEST);\n        glStencilFunc(GL_NOTEQUAL, 1, 0xFF);\n        glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);\n\n\n            //=============== Rectangle Object ==================================\n\n\n        vector&lt;VertexInfo&gt; rectMesh;\n            // positions          // texture Coords (note we set these higher than 1 (together with GL_REPEAT as texture wrapping mode). this will cause the floor texture to repeat)\n            VertexInfo::attribComponentCount = { 3,  2 };\n            rectMesh.push_back({ 5.0f, -0.5f,  5.0f,  2.0f, 0.0f});\n            rectMesh.push_back({-5.0f, -0.5f,  5.0f,  0.0f, 0.0f});\n            rectMesh.push_back({-5.0f, -0.5f, -5.0f,  0.0f, 2.0f});\n\n            rectMesh.push_back({ 5.0f, -0.5f,  5.0f,  2.0f, 0.0f});\n            rectMesh.push_back({-5.0f, -0.5f, -5.0f,  0.0f, 2.0f});\n            rectMesh.push_back({ 5.0f, -0.5f, -5.0f,  2.0f, 2.0f});\n\n\n\n        // ================== Rectangle Object Draw =================\n        rectObject = make_unique&lt;GraphicObject&gt;(rectMesh);\n        rectObject-&gt;initShader(\"src/basic01.shader\");\n        rectObject-&gt;initTexture(\"images/picture186.png\");\n\n\n        // ================= Cube Object Draw =======================   \n        cubeObject = make_unique&lt;GraphicObject&gt;(GetCubeMesh());\n        cubeObject-&gt;initShader(\"src/basic01.shader\");\n        cubeObject-&gt;initTexture(\"images/wall.jpg\");\n\n        // ================= Single color Shader ====================\n        shaderSingleColor = new Shader(\"src/02_stencil_single_color.shader\");\n\n\n    }\n\n    void draw(GLFWwindow* win) override {\n        Renderer::draw(win);\n\n        // per-frame time logic\n // --------------------\n        float currentFrame = static_cast&lt;float&gt;(glfwGetTime());\n        deltaTime = currentFrame - lastFrame;\n        lastFrame = currentFrame;\n\n        // input\n        // -----\n        processInput(win, deltaTime);\n\n        glClearColor(0.1f, 0.5f, 0.5f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);\n\n\n\n        glm::mat4 model = glm::mat4(1.0f);\n        glm::mat4 view = cam.GetViewMatrix();\n        glm::mat4 projection = glm::perspective(glm::radians(cam.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);\n\n        shaderSingleColor-&gt;setMat4(\"u_view\", view);\n        shaderSingleColor-&gt;setMat4(\"u_projection\", projection);\n\n\n        // draw floor as normal, \n        // but don't write the floor to the stencil buffer, we only care about the containers. \n        // We set its mask to 0x00 to not write to the stencil buffer.\n        glStencilMask(0x00);\n\n        rectObject-&gt;initMVP(view, projection);\n        rectObject-&gt;scale(8.0f);\n        rectObject-&gt;bindTexture();\n        rectObject-&gt;draw();\n\n        // 1st. render passm draw objects as normal,\n        // writing to the stencil buffer\n        glStencilFunc(GL_ALWAYS, 1, 0xFF);\n        glStencilMask(0xFF);\n\n        // Draw the first cube\n        cubeObject-&gt;useShader(0);\n        cubeObject-&gt;initMVP(view, projection);\n        cubeObject-&gt;translate(glm::vec3(-1.0f, 0.0f, -1.0f));\n        cubeObject-&gt;bindTexture();\n        cubeObject-&gt;draw();\n\n        cubeObject-&gt;resetModel();\n        cubeObject-&gt;translate(glm::vec3(1.0f, 0.0f, 0));\n        cubeObject-&gt;rotate((float)glfwGetTime()*30.0f, glm::vec3(1, 0, 0));\n        cubeObject-&gt;draw();\n\n\n        // 2nd render pass : \n        glStencilFunc(GL_NOTEQUAL, 1, 0xFF);\n        glStencilMask(0x00);\n        glDisable(GL_DEPTH_TEST);\n\n        cubeObject-&gt;addShader(shaderSingleColor);\n        cubeObject-&gt;useShader(1);\n\n        float scaleFactor = 1.1f;\n\n        cubeObject-&gt;resetModel();\n        cubeObject-&gt;translate(glm::vec3(-1.0f, 0.0f, -1.0f));\n        cubeObject-&gt;scale(scaleFactor);\n        cubeObject-&gt;draw();\n\n        cubeObject-&gt;resetModel();\n        cubeObject-&gt;translate(glm::vec3(1.0f, 0, 0));\n        cubeObject-&gt;rotate((float)glfwGetTime() * 30.0f, glm::vec3(1, 0, 0));\n        cubeObject-&gt;scale(scaleFactor);\n        cubeObject-&gt;draw();\n\n        glStencilMask(0xFF);\n        glStencilFunc(GL_ALWAYS, 0, 0xFF);\n        glEnable(GL_DEPTH_TEST);\n\n\n\n    }\n\n    virtual ~RenderTriangle(){\n        delete shaderSingleColor;\n        shaderSingleColor = nullptr;\n    }\n};\n\n\n\nint main()\n{\n\n    RendererWindow rendererWindow(800, 600, \"some title\");\n\n    RenderTriangle drawObjects;\n    drawObjects.setupDraw();\n\n    while (!rendererWindow.mainloop()) {\n\n        drawObjects.draw(rendererWindow.getWindow());\n\n        rendererWindow.swapBuffers();\n        rendererWindow.pollEvents();\n    }\n\n\n\n}\n</code></pre>"},{"location":"graphics/03_01_adv_stencil_testing/#graphicobjecth","title":"GraphicObject.h","text":"<pre><code>#ifndef GRAPHICOBJECT_H\n#define GRAPHICOBJECT_H\n\n#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\n#include \"Shader.h\"\n#include \"Texture.h\"\n#include \"Renderer.h\"\n\nusing std::vector, std::cout, std::endl, std::string, std::unique_ptr, std::make_unique;\n\n\nstruct VertexInfo {\n\n    // store the actual vertex data\n    vector&lt;float&gt; vertex{};\n\n    // attribute count as in the coordinate x, y, z\n    // index           0            1           2\n    // e.g count       3            2           3\n    //             0.5, 0.2, 0.4,  1.0, 1.0,  0.5, 0.5, 0.0\n    static inline vector&lt;unsigned int&gt; attribComponentCount;\n\n    // total count of layout\n    static inline unsigned int stride{};\n\n    VertexInfo() = default;\n\n    VertexInfo(std::initializer_list&lt;float&gt; v) : vertex(v){\n        stride = vertex.size() * sizeof(float);\n    }\n\n};\n\nclass GraphicObject{\n    vector&lt;VertexInfo&gt; verticesInfo;\n    vector&lt;float&gt;vertices{};\n    vector&lt;unsigned int&gt;indices{};\n\n    unsigned int VBO{}, IBO{};\n\n    bool hasIBO{}, hasTexture{};\n\n    vector&lt;Shader*&gt; shaders;\n    int currentShaderIndex = -1;\n    glm::mat4 projection;\n    glm::mat4 view;\n    glm::mat4 model;\n    glm::mat4 MVP;\n\n    void setupVBO() {\n\n        glGenBuffers(1, &amp;VBO);\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferData(GL_ARRAY_BUFFER, vertices.size() * VertexInfo::stride, vertices.data(), GL_STATIC_DRAW);\n\n    }\n\n    void setupIBO() {\n\n        glGenBuffers(1, &amp;IBO);\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * VertexInfo::stride, indices.data(), GL_STATIC_DRAW);\n\n    }\n\n    void setupObject() {\n\n        glGenVertexArrays(1, &amp;VAO);\n        glBindVertexArray(VAO);\n\n        setupVBO();\n        if(hasIBO) setupIBO();\n\n        // for all layout\n        int offset = 0;\n        for (int i = 0; i &lt; VertexInfo::attribComponentCount.size(); i++){\n\n            // attribut component component eg. x, y =&gt; (2); x,y,z =&gt; (3),\n            int attribCompCount = VertexInfo::attribComponentCount[i];\n            glVertexAttribPointer(\n                i,                                  // index\n                attribCompCount,    // component count\n                GL_FLOAT,                           // component type\n                GL_FALSE,                           // Normalize?\n                VertexInfo::stride,                 // vertex attributes stride\n                (void*)(offset * sizeof(float))); // vertex attribute offset\n\n            glEnableVertexAttribArray(i);\n\n            offset += attribCompCount;\n        }\n\n        glBindVertexArray(0);\n    }\n\n\npublic:\n    unsigned int VAO;\n    Texture* tex1;\n\n    GraphicObject(vector&lt;VertexInfo&gt; verticesInfos) {\n        this-&gt;verticesInfo = verticesInfos;\n\n        //append the vertices\n        for (size_t i = 0; i &lt; verticesInfos.size(); i++)\n            vertices.insert( vertices.end(), verticesInfos[i].vertex.begin(), verticesInfos[i].vertex.end() );\n\n        hasIBO = false;\n\n        setupObject();\n    };\n\n\n    GraphicObject(vector&lt;VertexInfo&gt;verticesInfos, vector&lt;unsigned int&gt;indices) {\n        this-&gt;verticesInfo = verticesInfos;\n\n        //append the vertices\n        for (size_t i = 0; i &lt; verticesInfos.size(); i++)\n            vertices.insert( vertices.end(), verticesInfos[i].vertex.begin(), verticesInfos[i].vertex.end() );\n\n\n        this-&gt;indices = indices;\n        hasIBO = true;\n\n        setupObject();\n    }\n\n    // === SHADER RELATED ==============================\n\n    // add new shader to arrays of shaders\n    void initShader(const char* shaderPath){\n        this-&gt;addShader( new Shader(shaderPath));\n\n    }\n\n    Shader* getShader(const int idx) const { \n        return shaders[idx]; \n    }\n\n    void addShader(Shader* newShader, bool use=true) {\n\n        shaders.push_back(newShader);\n        currentShaderIndex++;\n\n        if(use) shaders[currentShaderIndex]-&gt;useProgram();\n\n    }\n\n    void useShader(int idx) {\n        currentShaderIndex = idx;\n        shaders[currentShaderIndex]-&gt;useProgram();\n    }\n\n    // === TEXTURE RELATED =============================\n\n    void initTexture(const char* texturePath) {\n        hasTexture = true;\n        tex1 = new Texture(texturePath);\n        shaders[0]-&gt;useProgram();\n        shaders[0]-&gt;setInt(\"texture1\", 0);\n    }\n\n    void bindTexture(unsigned int slot = 0) {\n        tex1-&gt;bindTexture(slot);\n    }\n\n    void unBindTexture() {\n        tex1-&gt;unBindTexture();\n    }\n\n\n\n    // === MVP RELATED =========================\n\n    void initMVP(glm::mat4 view = glm::mat4(0), glm::mat4 proj = glm::mat4(0)) {\n        this-&gt;model = glm::mat4(1.0f);\n        this-&gt;view = glm::mat4(1.0f);\n        this-&gt;projection = glm::mat4(1.0f);\n\n\n        // Should the view be set;\n        if (view != glm::mat4(0))   this-&gt;view = view;\n        else                        this-&gt;view = glm::translate(this-&gt;view, glm::vec3(0.0f, 0.0f, -3.0f));\n\n        // should the projection be set\n        if (proj != glm::mat4(0))   this-&gt;projection = proj;\n        else                        this-&gt;projection = glm::perspective(glm::radians(45.0f), (float)800 / 600, 0.1f, 100.0f);\n\n        this-&gt;setMVP(this-&gt;model, this-&gt;view, this-&gt;projection);\n\n    }\n\n\n    GraphicObject&amp; setMVP(glm::mat4 model, glm::mat4 view, glm::mat4 projection) {\n\n        this-&gt;model = model;\n        this-&gt;view = view;\n        this-&gt;projection = projection;\n\n        //this-&gt;MVP = this-&gt;projection * this-&gt;view * this-&gt;model;\n\n        bindVertex();\n        shaders[currentShaderIndex]-&gt;useProgram();\n        //objShader-&gt;setMat4(\"u_MVP\", this-&gt;MVP);\n        shaders[currentShaderIndex]-&gt;setMat4(\"u_model\", this-&gt;model);\n        shaders[currentShaderIndex]-&gt;setMat4(\"u_view\", this-&gt;view);\n        shaders[currentShaderIndex]-&gt;setMat4(\"u_projection\", this-&gt;projection);\n\n        return *this;\n    }\n\n    glm::mat4 getModel() const { return this-&gt;model; }\n    glm::mat4 getView() const { return this-&gt;view;  }\n    glm::mat4 getProjection() const { return this-&gt;projection; }\n\n    // === TRANSFORMATIONS RELATED =========================\n\n    void translate(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f)) {\n        // calc. the model matrix for each object and pass it to shader before drawing\n\n        this-&gt;model = glm::translate(this-&gt;model, position);\n        shaders[currentShaderIndex]-&gt;setMat4(\"u_model\", this-&gt;model);\n    }\n\n    void rotate(const float angle = 0.0f, glm::vec3 rotateAround = glm::vec3(0.0f, 0.0f, 1.0f)) {\n        this-&gt;model = glm::rotate(this-&gt;model, glm::radians(angle), rotateAround);\n        shaders[currentShaderIndex]-&gt;setMat4(\"u_model\", this-&gt;model);\n\n    }\n\n    void scale(float x, float y, float z) {\n        this-&gt;model = glm::scale(this-&gt;model, glm::vec3(x, y, z));\n        shaders[currentShaderIndex]-&gt;setMat4(\"u_model\", this-&gt;model);\n    }\n\n    void scale(float value) {\n        this-&gt;scale(value, value, value);\n    }\n\n    void resetModel() {\n        this-&gt;model = glm::mat4(1.0f);\n    }\n\n\n    void bindVertex() const {\n        glBindVertexArray(VAO);\n    }\n\n    void unbindVertex()const {\n        glBindVertexArray(0);\n    }\n\n\n    void draw(){\n\n        // render boxes\n        //this-&gt;bindVertex();\n        if (hasIBO) glDrawElements(GL_TRIANGLES, (int)indices.size(), GL_UNSIGNED_INT, 0);\n        else        glDrawArrays(GL_TRIANGLES, 0, verticesInfo.size());\n        //this-&gt;unbindVertex();\n\n    }\n\n    ~GraphicObject() {\n        delete tex1;\n    }\n};\n\n#endif # GRAPHICOBJECT_H\n</code></pre>"},{"location":"graphics/03_07_advance_glsl/","title":"Advance glsl","text":""},{"location":"graphics/03_07_advance_glsl/#rendering-part-of-base-on-gl_fragcoord","title":"Rendering part of base on <code>gl_FragCoord</code>","text":"<pre><code>void main(){\n    if(gl_FragCoord.x &lt; 400)\n        FragColor = texture(texture1, uTexcoord);\n    else \n        FragColor = vec4(0.5, 1.0, 0.5, 1.0);\n}\n</code></pre>"},{"location":"graphics/03_07_advance_glsl/#zooming-in-and-scaling-vertex-point-using-gl_pointsize","title":"Zooming in and scaling vertex point using <code>gl_PointSize</code>","text":"<p><pre><code>...\n// Key is call both draw GL_POINTS and GL_LINE_STRIP\nglBufferSubData(GL_ARRAY_BUFFER, 0, vertices.size() * sizeof(Position), vertices.data());\nglDrawArrays(GL_POINTS, 0, vertices.size());\nglDrawArrays(GL_LINE_STRIP, 0, vertices.size());\nglBindVertexArray(0);\n</code></pre> Vertex Shader <pre><code>    gl_Position = u_projection * u_view * u_model * vec4(aPos, 1.0);\n    gl_PointSize = gl_Position.z;\n</code></pre></p> When zoomed out When zoomed in"},{"location":"graphics/099_abstraction01_GraphicObj/","title":"Quick Documentation for the level of Abstraction","text":""},{"location":"graphics/099_abstraction01_GraphicObj/#vertexinfo","title":"VertexInfo","text":"<p>What I initial had was a <code>Vertex</code> struct which holds all the layout attribute like so:</p> <pre><code>struct Vertex{\n    glm::vec3 position;\n    glm::vec2 texcoord;\n    glm::vec3 normal;\n    glm::vec3 tangent;\n    ...\n}\n</code></pre> <p>but after some trials and looking on how I can best represent I arrived at this (which might definitely change later)</p> <p>This is located in the <code>GraphicsObject</code> class <pre><code>struct LayoutInfo {\n    unsigned int count;\n    unsigned int offset;\n};\n\nstruct VertexInfo {\n\n    // store the actual vertex data\n    vector&lt;float&gt; vertex{};\n\n\n    // attribute index of layout \n    // NOTE : This can actual be removed, but I kept it for easy readability\n    //e.g index:        0           1           2\n    //                position  texcoord      normal\n    static inline unsigned int index{}; \n\n    // attribute count as in the coordinate x, y, z\n    // e.g count       3            2           3\n    //             0.5, 0.2, 0.4,  1.0, 1.0,  0.5, 0.5, 0.0\n    vector&lt;unsigned int&gt; count;\n\n    // layoutInfo stores:\n    //  the `vertex attribute component count` as in 3 for (x, y, z), 2 for (x, y) etc.\n    // and `attribute offset` from another attribute\n    static inline vector&lt;LayoutInfo&gt; layoutInfo;\n\n    // total attribute byte count of layout\n    static inline unsigned int stride{};\n\n    VertexInfo() {};\n\n    // With this we can initialize each vertex like so\n    // Vertex v1 = {0.5f, 0.0f, 0.3f} \n    // Vertex v1 = {-0.1f, 0.2f, 1.0f, 1.0f, 0.0f} etc\n    VertexInfo(std::initializer_list&lt;float&gt; v) : vertex(v){\n\n        // position 2D ===============================\n        if (vertex.size() == 2) {\n            stride = vertex.size() * sizeof(float);\n            index = 0;\n            // count and offset\n            layoutInfo.push_back({2, 0}); // layout position 2d\n        }\n        else if (vertex.size() == 4) {\n            stride = vertex.size() * sizeof(float);\n            index = 1;\n            // count and offset\n            layoutInfo.push_back({2, 0}); // layout position 2d\n            layoutInfo.push_back({2, 2}); // layout texcoord\n        }\n\n        // position 3D ================================\n        else if (vertex.size() == 3) {\n            stride = vertex.size() * sizeof(float);\n            index = 0;\n            // count and offset\n            layoutInfo.push_back({3,0}); // layout position 3d\n        }\n\n        // position , texcoord\n        else if (vertex.size() == 5) {\n            stride = vertex.size() * sizeof(float);\n            index = 1;\n            // count and offset\n            layoutInfo.push_back({3, 0}); // layout position 3d\n            layoutInfo.push_back({2, 3}); // layout texcoord\n        }\n\n        // position , color or normal\n        else if (vertex.size() == 6) {\n            stride = vertex.size() * sizeof(float);\n            index = 1;\n            // count and offset\n            layoutInfo.push_back({ 3, 0 }); // layout position 3d\n            layoutInfo.push_back({ 3, 3 }); // layout texcoord\n        }\n\n        // position , texcoord, normal\n        else if (vertex.size() == 8) {\n            stride = vertex.size() * sizeof(float);\n            index = 2;\n            // count and offset\n            layoutInfo.push_back({3, 0}); // layout position 3d\n            layoutInfo.push_back({2, 3}); // layout texcoord\n            layoutInfo.push_back({3, 5}); // normal\n        };\n    }\n    };\n</code></pre></p>"},{"location":"graphics/099_abstraction01_GraphicObj/#graphicobject-class","title":"GraphicObject Class","text":"<p>This is going to handle the individual object render.</p> <p>here is the definitions:</p> <pre><code>class GraphicObject\nprivate:\n    vector&lt;VertexInfo&gt; verticesInfo;\n    vector&lt;float&gt;vertices;\n    vector&lt;unsigned int&gt;indices;\n    unsigned int VBO{}, IBO{};\n    bool hasIBO{}; // in case of Index Buffer specified\n\n    glm::mat4 projection, view, model;\n    void setupVBO()\n    void setupIBO()\n    void setupObject()\n\npublic:\n    unsigned int VAO;\n    Shader* objShader;\n    std::unique_ptr &lt;Texture&gt; tex1, tex2;\n\n    GraphicObject(vector&lt;VertexInfo&gt; verticesInfos) \n    GraphicObject(vector&lt;VertexInfo&gt;verticesInfos, vector&lt;unsigned int&gt;indices) {\n    void initShader(const char* shaderPath)\n\n    GraphicObject&amp; setProjection(glm::mat4 projection = glm::mat4(1.0f)) \n    GraphicObject&amp; setView(glm::mat4 view = glm::mat4(1.0f)) \n    GraphicObject&amp; setModel(glm::mat4 model = glm::mat4(1.0f))\n\n    void translate(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f)) \n    void rotate(const float angle = 0.0f, glm::vec3 rotateAround = glm::vec3(0.0f, 0.0f, 1.0f))\n\n    void bindVertex() const \n    void unbindVertex()const\n    void draw()\n</code></pre> GraphicObject.h<pre><code>class GraphicObject{\n    vector&lt;VertexInfo&gt; verticesInfo;\n    vector&lt;float&gt;vertices{};\n    vector&lt;unsigned int&gt;indices{};\n\n    unsigned int VBO{}, IBO{};\n\n    bool hasIBO{};\n\n    glm::mat4 projection{};\n    glm::mat4 view{};\n    glm::mat4 model{};\n\n    void setupVBO() {\n\n        glGenBuffers(1, &amp;VBO);\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferData(GL_ARRAY_BUFFER, vertices.size() * VertexInfo::stride, vertices.data(), GL_STATIC_DRAW);\n\n\n    }\n\n    void setupIBO() {\n\n        glGenBuffers(1, &amp;IBO);\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * VertexInfo::stride, indices.data(), GL_STATIC_DRAW);\n\n    }\n\n    void setupObject() {\n\n        glGenVertexArrays(1, &amp;VAO);\n        glBindVertexArray(VAO);\n\n        setupVBO();\n        if(hasIBO) setupIBO();\n\n        // for all layout\n        for (int i = 0; i &lt;= VertexInfo::index; i++){\n            glVertexAttribPointer(\n                i,                                  // index\n                VertexInfo::layoutInfo[i].count,    // component count\n                GL_FLOAT,                           // component type\n                GL_FALSE,                           // Normalize?\n                VertexInfo::stride,                 // vertex attributes stride\n                (void*)(VertexInfo::layoutInfo[i].offset * sizeof(float))); // vertex attribute offset\n\n            glEnableVertexAttribArray(i);\n        }\n\n        glBindVertexArray(0);\n    }\n\n\n    public:\n    unsigned int VAO;\n    Shader* objShader;\n    std::unique_ptr &lt;Texture&gt; tex1, tex2;\n\n    GraphicObject(vector&lt;VertexInfo&gt; verticesInfos) {\n        this-&gt;verticesInfo = verticesInfos;\n\n        //append the vertices\n        for (size_t i = 0; i &lt; verticesInfos.size(); i++)\n            vertices.insert(vertices.end(), verticesInfos[i].vertex.begin(), verticesInfos[i].vertex.end());\n\n        this-&gt;vertices = vertices;\n        hasIBO = false;\n\n        setupObject();\n    };\n\n\n    GraphicObject(vector&lt;VertexInfo&gt;verticesInfos, vector&lt;unsigned int&gt;indices) {\n        this-&gt;verticesInfo = verticesInfos;\n\n        //append the vertices\n        for (size_t i = 0; i &lt; verticesInfos.size(); i++)\n            vertices.insert(vertices.end(), verticesInfos[i].vertex.begin(), verticesInfos[i].vertex.end());\n\n        this-&gt;vertices = vertices;\n        this-&gt;indices = indices;\n        hasIBO = true;\n\n        setupObject();\n    }\n\n    void initShader(const char* shaderPath){\n\n    objShader = new Shader(shaderPath);\n\n    objShader-&gt;useProgram();\n\n    //tex1 = std::make_unique &lt;Texture&gt;(\"imgs/picture1.png\");\n    //tex1-&gt;bindTexture(0);\n\n    //tex2 = std::make_unique &lt;Texture&gt;(\"imgs/picture2.png\");\n    //tex2-&gt;bindTexture(1);\n\n    // objShader-&gt;setInt(\"texture1\", 0);\n    // objShader-&gt;setInt(\"texture2\", 1);\n\n        this-&gt;model = glm::mat4(1.0f);\n        this-&gt;view = glm::mat4(1.0f);\n        this-&gt;projection = glm::perspective(glm::radians(45.0f), (float)800 / (float)600, 0.1f, 100.0f);\n        this-&gt;setProjection(projection);\n\n    }\n\n    GraphicObject&amp; setProjection(glm::mat4 projection = glm::mat4(1.0f))  {\n\n        this-&gt;projection = projection;\n        objShader-&gt;useProgram();\n        objShader-&gt;setMat4(\"projection\", this-&gt;projection);\n        return *this;\n    }\n\n    GraphicObject&amp; setView(glm::mat4 view = glm::mat4(1.0f)) {\n\n        this-&gt;view = view;\n        objShader-&gt;useProgram();\n        objShader-&gt;setMat4(\"view\", this-&gt;view);\n\n        return *this;\n    }\n\n    GraphicObject&amp; setModel(glm::mat4 model = glm::mat4(1.0f)) {\n\n        objShader-&gt;useProgram();\n        objShader-&gt;setMat4(\"model\", this-&gt;model);\n\n        return *this;\n    }\n\n    void translate(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f)) {\n        // calc. the model matrix for each object and pass it to shader before drawing\n        this-&gt;model = glm::translate(this-&gt;model, position);\n        this-&gt;setModel();\n    }\n\n    void rotate(const float angle = 0.0f, glm::vec3 rotateAround = glm::vec3(0.0f, 0.0f, 1.0f)) {\n        this-&gt;model = glm::rotate(this-&gt;model, glm::radians(angle), rotateAround);\n        this-&gt;setModel();\n    }\n\n    void bindVertex() const {\n        glBindVertexArray(VAO);\n    }\n\n    void unbindVertex()const {\n        glBindVertexArray(0);\n    }\n\n    void draw(){\n\n        // render boxes\n        this-&gt;bindVertex();\n        if (!hasIBO) glDrawArrays(GL_TRIANGLES, 0, verticesInfo.size());\n        else         glDrawElements(GL_TRIANGLES, (int)indices.size(), GL_UNSIGNED_INT, 0);\n\n    }\n\n\n\n    ~GraphicObject() {\n        delete objShader;\n    }\n\n};\n</code></pre>"},{"location":"graphics/099_abstraction01_GraphicObj/#shader-class-update","title":"Shader Class update","text":"<p>Tried going through the shader class presented by learnOpenGl and the one I preferred from the Cherno yt channel, I get to modify the <code>Shader</code> class combining this knowledge.</p> <pre><code>struct ShaderSources {string vertexSource; string fragmentSource;};\nenum shaderType { VERT, FRAG };\n\nclass Shader\n{\n\npublic:\n    unsigned int programID;\n    /\n    Shader()\n    Shader(const char* ShaderPath, const char* geometryPath = nullptr)\n\n    Shader&amp; operator () (const char* ShaderPath)\n\n    void useProgram()\n\n    void setBool(const std::string&amp; name, bool value) const\n    void setInt(const std::string&amp; name, int value) const \n    void setFloat(const std::string&amp; name, float value) const\n    // ------------------------------------------------------------------------\n    void setVec2(const std::string&amp; name, const glm::vec2&amp; value) const\n    void setVec2(const std::string&amp; name, float x, float y) const\n    // ------------------------------------------------------------------------\n    void setVec3(const std::string&amp; name, const glm::vec3&amp; value) const\n    void setVec3(const std::string&amp; name, float x, float y, float z) const\n    // ------------------------------------------------------------------------\n    void setVec4(const std::string&amp; name, const glm::vec4&amp; value) const\n    void setVec4(const std::string&amp; name, float x, float y, float z, float w)\n    // ------------------------------------------------------------------------\n    void setMat2(const std::string&amp; name, const glm::mat2&amp; mat) const\n    // ------------------------------------------------------------------------\n    void setMat3(const std::string&amp; name, const glm::mat3&amp; mat) const\n    // ------------------------------------------------------------------------\n    void setMat4(const std::string&amp; name, const glm::mat4&amp; mat) const\n\nprivate:\n    // utility function for checking shader compilation/linking errors.\n    // ------------------------------------------------------------------------\n    void checkCompileErrors(GLuint shader, std::string type)\n    ShaderSources ParseShaderCode(const string&amp; path) \n    unsigned int CompileShader(unsigned int type, string&amp; shaderSrc) \n</code></pre> <pre><code>#ifndef SHADER_H\n#define SHADER_H\n\n#include &lt;glad/glad.h&gt;\n#include &lt;glm/glm.hpp&gt;\n\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n\nusing std::string;\n\nstruct ShaderSources {\n    string vertexSource;\n    string fragmentSource;\n};\n\nenum shaderType { VERT, FRAG };\n\nclass Shader\n{\n    ShaderSources ParseShaderCode(const string&amp; path) {\n        std::ifstream shaderCode(path);\n        std::stringstream ss[2];\n        int type = -1;\n        string line{};\n\n        while (std::getline(shaderCode, line)) {\n            if (line.find(\"#vertex\") != std::string::npos) type = VERT;\n            else if (line.find(\"#fragment\") != std::string::npos) type = FRAG;\n            else ss[(int)type] &lt;&lt; line &lt;&lt; \"\\n\";\n        }\n\n\n        return { ss[0].str(), ss[1].str() };\n\n    } // End ParseShaderCode\n\n    unsigned int CompileShader(unsigned int type, string&amp; shaderSrc) {\n\n        unsigned int shaderID = glCreateShader(type);\n\n        const char* shaderCode = shaderSrc.c_str();\n        glShaderSource(shaderID, 1, &amp;shaderCode, NULL);\n\n        glCompileShader(shaderID);\n\n        int success;\n        glGetShaderiv(shaderID, GL_COMPILE_STATUS, &amp;success);\n\n        if (!success) {\n            int length;\n            glGetShaderiv(shaderID, GL_INFO_LOG_LENGTH, &amp;length);\n            char* msg = (char*)alloca(length * sizeof(char));\n            glGetShaderInfoLog(shaderID, length, &amp;length, msg);\n\n            std::cout &lt;&lt; ((type == GL_VERTEX_SHADER) ? \"vertex \" : \"fragment \") &lt;&lt; \"shader error :\\n\" &lt;&lt; msg &lt;&lt; std::endl;\n            glDeleteShader(shaderID);\n            return -1;\n        }\n\n        return shaderID;\n    }\n\n\npublic:\n    unsigned int programID;\n    // constructor generates the shader on the fly\n    // ------------------------------------------------------------------------\n    Shader() {}\n\n    Shader(const char* ShaderPath, const char* geometryPath = nullptr)\n    {\n\n        ShaderSources shaderSources = ParseShaderCode(ShaderPath);\n        // 1. retrieve the vertex/fragment source code from filePath\n        std::string geometryCode;\n        std::ifstream gShaderFile;\n\n        // convert stream into string\n        string vertexCode = shaderSources.vertexSource;\n        string fragmentCode = shaderSources.fragmentSource;\n\n\n        // if geometry shader path is present, also load a geometry shader\n        if (geometryPath != nullptr)\n        {\n            gShaderFile.open(geometryPath);\n            std::stringstream gShaderStream;\n            gShaderStream &lt;&lt; gShaderFile.rdbuf();\n            gShaderFile.close();\n            geometryCode = gShaderStream.str();\n        }\n\n        // 2. compile shaders\n        unsigned int vertex, fragment;\n        vertex = CompileShader(GL_VERTEX_SHADER, vertexCode);\n        fragment = CompileShader(GL_FRAGMENT_SHADER, fragmentCode);\n\n        // if geometry shader is given, compile geometry shader\n        unsigned int geometry;\n        if (geometryPath != nullptr)\n        {\n            const char* gShaderCode = geometryCode.c_str();\n            geometry = glCreateShader(GL_GEOMETRY_SHADER);\n            glShaderSource(geometry, 1, &amp;gShaderCode, NULL);\n            glCompileShader(geometry);\n            checkCompileErrors(geometry, \"GEOMETRY\");\n        }\n        // shader Program\n        programID = glCreateProgram();\n        glAttachShader(programID, vertex);\n        glAttachShader(programID, fragment);\n        if (geometryPath != nullptr) glAttachShader(programID, geometry);\n\n        glLinkProgram(programID);\n        glValidateProgram(programID);\n\n        checkCompileErrors(programID, \"PROGRAM\");\n        // delete the shaders as they're linked into our program now and no longer necessary\n        glDeleteShader(vertex);\n        glDeleteShader(fragment);\n        if (geometryPath != nullptr) glDeleteShader(geometry);\n\n    }\n    // activate the shader\n    // ------------------------------------------------------------------------\n\n    Shader&amp; operator () (const char* ShaderPath) {\n        return *this;\n    }\n\n    // activate the shader\n    // ------------------------------------------------------------------------\n    void useProgram()\n    {\n        glUseProgram(programID);\n    }\n    // utility uniform functions\n    // ------------------------------------------------------------------------\n    void setBool(const std::string&amp; name, bool value) const{\n        glUniform1i(glGetUniformLocation(programID, name.c_str()), (int)value);\n    }\n    // ------------------------------------------------------------------------\n    void setInt(const std::string&amp; name, int value) const{\n        glUniform1i(glGetUniformLocation(programID, name.c_str()), value);\n    }\n    // ------------------------------------------------------------------------\n    void setFloat(const std::string&amp; name, float value) const{\n        glUniform1f(glGetUniformLocation(programID, name.c_str()), value);\n    }\n    // ------------------------------------------------------------------------\n    void setVec2(const std::string&amp; name, const glm::vec2&amp; value) const{\n        glUniform2fv(glGetUniformLocation(programID, name.c_str()), 1, &amp;value[0]);\n    }\n    void setVec2(const std::string&amp; name, float x, float y) const{\n        glUniform2f(glGetUniformLocation(programID, name.c_str()), x, y);\n    }\n    // ------------------------------------------------------------------------\n    void setVec3(const std::string&amp; name, const glm::vec3&amp; value) const{\n        glUniform3fv(glGetUniformLocation(programID, name.c_str()), 1, &amp;value[0]);\n    }\n    void setVec3(const std::string&amp; name, float x, float y, float z) const{\n        glUniform3f(glGetUniformLocation(programID, name.c_str()), x, y, z);\n    }\n    // ------------------------------------------------------------------------\n    void setVec4(const std::string&amp; name, const glm::vec4&amp; value) const{\n        glUniform4fv(glGetUniformLocation(programID, name.c_str()), 1, &amp;value[0]);\n    }\n    void setVec4(const std::string&amp; name, float x, float y, float z, float w){\n        glUniform4f(glGetUniformLocation(programID, name.c_str()), x, y, z, w);\n    }\n    // ------------------------------------------------------------------------\n    void setMat2(const std::string&amp; name, const glm::mat2&amp; mat) const{\n        glUniformMatrix2fv(glGetUniformLocation(programID, name.c_str()), 1, GL_FALSE, &amp;mat[0][0]);\n    }\n    // ------------------------------------------------------------------------\n    void setMat3(const std::string&amp; name, const glm::mat3&amp; mat) const{\n        glUniformMatrix3fv(glGetUniformLocation(programID, name.c_str()), 1, GL_FALSE, &amp;mat[0][0]);\n    }\n    // ------------------------------------------------------------------------\n    void setMat4(const std::string&amp; name, const glm::mat4&amp; mat) const{\n        glUniformMatrix4fv(glGetUniformLocation(programID, name.c_str()), 1, GL_FALSE, &amp;mat[0][0]);\n    }\n\nprivate:\n    // utility function for checking shader compilation/linking errors.\n    // ------------------------------------------------------------------------\n    void checkCompileErrors(GLuint shader, std::string type)\n    {\n        GLint success;\n        GLchar infoLog[1024];\n        if (type != \"PROGRAM\")\n        {\n            glGetShaderiv(shader, GL_COMPILE_STATUS, &amp;success);\n            if (!success)\n            {\n                glGetShaderInfoLog(shader, 1024, NULL, infoLog);\n                std::cout &lt;&lt; \"ERROR::SHADER_COMPILATION_ERROR of type: \" &lt;&lt; type &lt;&lt; \"\\n\" &lt;&lt; infoLog &lt;&lt; \"\\n -- --------------------------------------------------- -- \" &lt;&lt; std::endl;\n            }\n        }\n        else\n        {\n            glGetProgramiv(shader, GL_LINK_STATUS, &amp;success);\n            if (!success)\n            {\n                glGetProgramInfoLog(shader, 1024, NULL, infoLog);\n                std::cout &lt;&lt; \"ERROR::PROGRAM_LINKING_ERROR of type: \" &lt;&lt; type &lt;&lt; \"\\n\" &lt;&lt; infoLog &lt;&lt; \"\\n -- --------------------------------------------------- -- \" &lt;&lt; std::endl;\n            }\n        }\n    }\n};\n#endif\n</code></pre>"},{"location":"graphics/099_abstraction01_GraphicObj/#texture-implementation","title":"Texture Implementation","text":"<pre><code>#ifndef  TEXTURE\n#define TEXTURE\n\n#include &lt;glad/glad.h&gt;\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\n#define STB_IMAGE_IMPLEMENTATION\n#include \"stb_image.h\"\n\nusing std::string, std::cout, std::endl;\n\nclass Texture {\n    unsigned int textureID;\n    public:\n    Texture(){}\n    Texture(const string&amp; path) {\n\n        glGenTextures(1, &amp;textureID);\n\n        int w, h, ncomp;\n        unsigned char* data = stbi_load(path.c_str(), &amp;w, &amp;h, &amp;ncomp, 0);\n        if (data) {\n\n            glBindTexture(GL_TEXTURE_2D, textureID);\n\n            GLenum format{};\n            if (ncomp == 1) format = GL_RED;\n            else if (ncomp == 3) format = GL_RGB;\n            else if (ncomp == 4) format = GL_RGBA;\n\n            glTexImage2D(GL_TEXTURE_2D, 0, format, w, h, 0, format, GL_UNSIGNED_BYTE, data);\n            glGenerateMipmap(GL_TEXTURE_2D);\n\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n            stbi_image_free(data);\n        }\n        else {\n            cout &lt;&lt; \" Texture Failed to load at path: \" &lt;&lt; path &lt;&lt; endl;\n\n        }\n\n    }\n\n    Texture* operator() (const string&amp; path) {\n        return this;\n    }\n\n    unsigned int getTextureID() const {\n        return textureID;\n    }\n\n    void bindTexture(const unsigned int texSlot = 0) const {\n        glActiveTexture(GL_TEXTURE0 + texSlot);\n        glBindTexture(GL_TEXTURE_2D, textureID);\n    }\n\n\n};\n\n\n#endif // ! TEXTURE\n</code></pre>"},{"location":"graphics/099_abstraction01_GraphicObj/#renderer-structure","title":"Renderer Structure","text":"<p>This is a basic class for all different stuff to render</p> <pre><code>#ifndef RENDERER_H\n#define RENDERER_H\n\n#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n#include \"Shader.h\"\n#include \"Texture.h\"\n\n#include \"GraphicObject.h\"\n\nclass Renderer {\n\npublic:\n    GLFWwindow* win{};\n    Renderer() {}\n    void init(int scr_W, int scr_H, const char* title) {\n        glfwInit();\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n        win = glfwCreateWindow(scr_W, scr_H, title, NULL, NULL);\n        if (!win) {\n            std::cout &lt;&lt; \"GLFW failed to load\" &lt;&lt; std::endl;\n            glfwTerminate();\n\n        }\n\n        glfwMakeContextCurrent(win);\n\n        if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {\n            std::cout &lt;&lt; \"GLAD failed to load\" &lt;&lt; std::endl;\n\n        }\n    }\n\n    GLFWwindow* getWindow() {\n        return win;\n    }\n    virtual void setupDraw() {};\n\n    virtual void draw() {}\n\n    virtual ~Renderer() {\n        glfwTerminate();\n    }\n\n\n};\n\n\n#endif // RENDERER_H\n</code></pre>"},{"location":"graphics/099_abstraction01_GraphicObj/#main-structure","title":"Main Structure","text":"<pre><code>#include &lt;iostream&gt;\n\n#include &lt;sstream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\n#include \"Renderer.h\"\n\n\nclass RenderTriangle : public Renderer {\n\npublic:\n    unique_ptr&lt;GraphicObject&gt; graphicObject;\n    unique_ptr&lt;GraphicObject&gt; graphicObject1;\n    Renderer::Renderer;\n\n    void setupDraw() override{\n        Renderer::setupDraw();\n\n        // Vertices\n        vector&lt;VertexInfo&gt; triangleVertices;\n                                        // Position      // color\n        triangleVertices.push_back({ -0.5f, -0.5f, 0.0f, 1.0f , 0.0f, 0.0f});\n        triangleVertices.push_back({ 0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f });\n        triangleVertices.push_back({ 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f});\n\n\n        graphicObject = make_unique&lt;GraphicObject&gt;(triangleVertices);\n        graphicObject-&gt;initShader(\"src/basic01.shader\");\n\n\n        graphicObject1 = make_unique&lt;GraphicObject&gt;(triangleVertices);\n        graphicObject1-&gt;initShader(\"src/basic02.shader\");\n\n        graphicObject-&gt;translate(glm::vec3(0.5f, 0.0f, 0.0f));\n        graphicObject-&gt;rotate(180.0f, glm::vec3(0.0f, 0.0f, 1.0f));\n\n\n    }\n\n    void draw() override {\n        Renderer::draw();\n\n        glClearColor(0.1f, 0.5f, 0.5f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n        // Upside down triangle\n\n        graphicObject-&gt;setModel();\n        graphicObject-&gt;draw();\n        graphicObject-&gt;unbindVertex();\n\n        double time = glfwGetTime();\n        float color_offset = static_cast&lt;float&gt;(cos(time)/2.0 + 0.5);\n        graphicObject1-&gt;setModel();\n        graphicObject1-&gt;objShader-&gt;setFloat(\"c_offset\", color_offset);\n        graphicObject1-&gt;draw();\n\n        glfwSwapBuffers(win);\n        glfwPollEvents();\n\n    }\n\n    virtual ~RenderTriangle(){\n\n    }\n};\n\n\nint main()\n{\n    RenderTriangle triangle;\n    triangle.init(800, 600, \"some title\");\n    triangle.setupDraw();\n    while (!glfwWindowShouldClose(triangle.getWindow()) ) {\n        triangle.draw();\n    }\n\n}\n</code></pre>"},{"location":"graphics/099_abstraction01_GraphicObj/#full-code-list","title":"Full Code list","text":"<p>The full codes can be found here:      GraphicObject.h Shader.h Texture.h Renderer.h Main.cpp basic01.shader basic02.shader </p> <p></p>"},{"location":"graphics/099_abstraction02_GraphicObj/","title":"Quick Documentation for the level of Abstraction","text":""},{"location":"graphics/099_abstraction02_GraphicObj/#vertexinfo","title":"VertexInfo","text":"<p>What I initial had was a <code>Vertex</code> struct which holds all the layout attribute like so:</p> <pre><code>struct Vertex{\n    glm::vec3 position;\n    glm::vec2 texcoord;\n    glm::vec3 normal;\n    glm::vec3 tangent;\n    ...\n}\n</code></pre> <p>but after some trials and looking on how I can best represent I arrived at this (which might definitely change later)</p> <p>This is located in the <code>GraphicsObject</code> class <pre><code>struct LayoutInfo {\n    unsigned int count;\n    unsigned int offset;\n};\n\nstruct VertexInfo {\n\n    // store the actual vertex data\n    vector&lt;float&gt; vertex{};\n\n\n    // attribute index of layout \n    // NOTE : This can actual be removed, but I kept it for easy readability\n    //e.g index:        0           1           2\n    //                position  texcoord      normal\n    static inline unsigned int index{}; \n\n    // attribute count as in the coordinate x, y, z\n    // e.g count       3            2           3\n    //             0.5, 0.2, 0.4,  1.0, 1.0,  0.5, 0.5, 0.0\n    vector&lt;unsigned int&gt; count;\n\n    // layoutInfo stores:\n    //  the `vertex attribute component count` as in 3 for (x, y, z), 2 for (x, y) etc.\n    // and `attribute offset` from another attribute\n    static inline vector&lt;LayoutInfo&gt; layoutInfo;\n\n    // total attribute byte count of layout\n    static inline unsigned int stride{};\n\n    VertexInfo() {};\n\n    // With this we can initialize each vertex like so\n    // Vertex v1 = {0.5f, 0.0f, 0.3f} \n    // Vertex v1 = {-0.1f, 0.2f, 1.0f, 1.0f, 0.0f} etc\n    VertexInfo(std::initializer_list&lt;float&gt; v) : vertex(v){\n\n        // position 2D ===============================\n        if (vertex.size() == 2) {\n            stride = vertex.size() * sizeof(float);\n            index = 0;\n            // count and offset\n            layoutInfo.push_back({2, 0}); // layout position 2d\n        }\n        else if (vertex.size() == 4) {\n            stride = vertex.size() * sizeof(float);\n            index = 1;\n            // count and offset\n            layoutInfo.push_back({2, 0}); // layout position 2d\n            layoutInfo.push_back({2, 2}); // layout texcoord\n        }\n\n        // position 3D ================================\n        else if (vertex.size() == 3) {\n            stride = vertex.size() * sizeof(float);\n            index = 0;\n            // count and offset\n            layoutInfo.push_back({3,0}); // layout position 3d\n        }\n\n        // position , texcoord\n        else if (vertex.size() == 5) {\n            stride = vertex.size() * sizeof(float);\n            index = 1;\n            // count and offset\n            layoutInfo.push_back({3, 0}); // layout position 3d\n            layoutInfo.push_back({2, 3}); // layout texcoord\n        }\n\n        // position , color or normal\n        else if (vertex.size() == 6) {\n            stride = vertex.size() * sizeof(float);\n            index = 1;\n            // count and offset\n            layoutInfo.push_back({ 3, 0 }); // layout position 3d\n            layoutInfo.push_back({ 3, 3 }); // layout texcoord\n        }\n\n        // position , texcoord, normal\n        else if (vertex.size() == 8) {\n            stride = vertex.size() * sizeof(float);\n            index = 2;\n            // count and offset\n            layoutInfo.push_back({3, 0}); // layout position 3d\n            layoutInfo.push_back({2, 3}); // layout texcoord\n            layoutInfo.push_back({3, 5}); // normal\n        };\n    }\n    };\n</code></pre></p>"},{"location":"graphics/099_abstraction02_GraphicObj/#graphicobject-class","title":"GraphicObject Class","text":"<p>This is going to handle the individual object render.</p> <p>here is the definitions:</p> <pre><code>class GraphicObject\nprivate:\n    vector&lt;VertexInfo&gt; verticesInfo;\n    vector&lt;float&gt;vertices;\n    vector&lt;unsigned int&gt;indices;\n    unsigned int VBO{}, IBO{};\n    bool hasIBO{}; // in case of Index Buffer specified\n\n    glm::mat4 projection, view, model;\n    void setupVBO()\n    void setupIBO()\n    void setupObject()\n\npublic:\n    unsigned int VAO;\n    Shader* objShader;\n    std::unique_ptr &lt;Texture&gt; tex1, tex2;\n\n    GraphicObject(vector&lt;VertexInfo&gt; verticesInfos) \n    GraphicObject(vector&lt;VertexInfo&gt;verticesInfos, vector&lt;unsigned int&gt;indices) {\n    void initShader(const char* shaderPath)\n\n    GraphicObject&amp; setProjection(glm::mat4 projection = glm::mat4(1.0f)) \n    GraphicObject&amp; setView(glm::mat4 view = glm::mat4(1.0f)) \n    GraphicObject&amp; setModel(glm::mat4 model = glm::mat4(1.0f))\n\n    void translate(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f)) \n    void rotate(const float angle = 0.0f, glm::vec3 rotateAround = glm::vec3(0.0f, 0.0f, 1.0f))\n\n    void bindVertex() const \n    void unbindVertex()const\n    void draw()\n</code></pre> GraphicObject.h<pre><code>class GraphicObject{\n    vector&lt;VertexInfo&gt; verticesInfo;\n    vector&lt;float&gt;vertices{};\n    vector&lt;unsigned int&gt;indices{};\n\n    unsigned int VBO{}, IBO{};\n\n    bool hasIBO{};\n\n    glm::mat4 projection{};\n    glm::mat4 view{};\n    glm::mat4 model{};\n\n    void setupVBO() {\n\n        glGenBuffers(1, &amp;VBO);\n        glBindBuffer(GL_ARRAY_BUFFER, VBO);\n        glBufferData(GL_ARRAY_BUFFER, vertices.size() * VertexInfo::stride, vertices.data(), GL_STATIC_DRAW);\n\n\n    }\n\n    void setupIBO() {\n\n        glGenBuffers(1, &amp;IBO);\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * VertexInfo::stride, indices.data(), GL_STATIC_DRAW);\n\n    }\n\n    void setupObject() {\n\n        glGenVertexArrays(1, &amp;VAO);\n        glBindVertexArray(VAO);\n\n        setupVBO();\n        if(hasIBO) setupIBO();\n\n        // for all layout\n        for (int i = 0; i &lt;= VertexInfo::index; i++){\n            glVertexAttribPointer(\n                i,                                  // index\n                VertexInfo::layoutInfo[i].count,    // component count\n                GL_FLOAT,                           // component type\n                GL_FALSE,                           // Normalize?\n                VertexInfo::stride,                 // vertex attributes stride\n                (void*)(VertexInfo::layoutInfo[i].offset * sizeof(float))); // vertex attribute offset\n\n            glEnableVertexAttribArray(i);\n        }\n\n        glBindVertexArray(0);\n    }\n\n\n    public:\n    unsigned int VAO;\n    Shader* objShader;\n    std::unique_ptr &lt;Texture&gt; tex1, tex2;\n\n    GraphicObject(vector&lt;VertexInfo&gt; verticesInfos) {\n        this-&gt;verticesInfo = verticesInfos;\n\n        //append the vertices\n        for (size_t i = 0; i &lt; verticesInfos.size(); i++)\n            vertices.insert(vertices.end(), verticesInfos[i].vertex.begin(), verticesInfos[i].vertex.end());\n\n        this-&gt;vertices = vertices;\n        hasIBO = false;\n\n        setupObject();\n    };\n\n\n    GraphicObject(vector&lt;VertexInfo&gt;verticesInfos, vector&lt;unsigned int&gt;indices) {\n        this-&gt;verticesInfo = verticesInfos;\n\n        //append the vertices\n        for (size_t i = 0; i &lt; verticesInfos.size(); i++)\n            vertices.insert(vertices.end(), verticesInfos[i].vertex.begin(), verticesInfos[i].vertex.end());\n\n        this-&gt;vertices = vertices;\n        this-&gt;indices = indices;\n        hasIBO = true;\n\n        setupObject();\n    }\n\n    void initShader(const char* shaderPath){\n\n    objShader = new Shader(shaderPath);\n\n    objShader-&gt;useProgram();\n\n    //tex1 = std::make_unique &lt;Texture&gt;(\"imgs/picture1.png\");\n    //tex1-&gt;bindTexture(0);\n\n    //tex2 = std::make_unique &lt;Texture&gt;(\"imgs/picture2.png\");\n    //tex2-&gt;bindTexture(1);\n\n    // objShader-&gt;setInt(\"texture1\", 0);\n    // objShader-&gt;setInt(\"texture2\", 1);\n\n        this-&gt;model = glm::mat4(1.0f);\n        this-&gt;view = glm::mat4(1.0f);\n        this-&gt;projection = glm::perspective(glm::radians(45.0f), (float)800 / (float)600, 0.1f, 100.0f);\n        this-&gt;setProjection(projection);\n\n    }\n\n    GraphicObject&amp; setProjection(glm::mat4 projection = glm::mat4(1.0f))  {\n\n        this-&gt;projection = projection;\n        objShader-&gt;useProgram();\n        objShader-&gt;setMat4(\"projection\", this-&gt;projection);\n        return *this;\n    }\n\n    GraphicObject&amp; setView(glm::mat4 view = glm::mat4(1.0f)) {\n\n        this-&gt;view = view;\n        objShader-&gt;useProgram();\n        objShader-&gt;setMat4(\"view\", this-&gt;view);\n\n        return *this;\n    }\n\n    GraphicObject&amp; setModel(glm::mat4 model = glm::mat4(1.0f)) {\n\n        objShader-&gt;useProgram();\n        objShader-&gt;setMat4(\"model\", this-&gt;model);\n\n        return *this;\n    }\n\n    void translate(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f)) {\n        // calc. the model matrix for each object and pass it to shader before drawing\n        this-&gt;model = glm::translate(this-&gt;model, position);\n        this-&gt;setModel();\n    }\n\n    void rotate(const float angle = 0.0f, glm::vec3 rotateAround = glm::vec3(0.0f, 0.0f, 1.0f)) {\n        this-&gt;model = glm::rotate(this-&gt;model, glm::radians(angle), rotateAround);\n        this-&gt;setModel();\n    }\n\n    void bindVertex() const {\n        glBindVertexArray(VAO);\n    }\n\n    void unbindVertex()const {\n        glBindVertexArray(0);\n    }\n\n    void draw(){\n\n        // render boxes\n        this-&gt;bindVertex();\n        if (!hasIBO) glDrawArrays(GL_TRIANGLES, 0, verticesInfo.size());\n        else         glDrawElements(GL_TRIANGLES, (int)indices.size(), GL_UNSIGNED_INT, 0);\n\n    }\n\n\n\n    ~GraphicObject() {\n        delete objShader;\n    }\n\n};\n</code></pre>"},{"location":"graphics/099_abstraction02_GraphicObj/#shader-class-update","title":"Shader Class update","text":"<p>Tried going through the shader class presented by learnOpenGl and the one I preferred from the Cherno yt channel, I get to modify the <code>Shader</code> class combining this knowledge.</p> <pre><code>struct ShaderSources {string vertexSource; string fragmentSource;};\nenum shaderType { VERT, FRAG };\n\nclass Shader\n{\n\npublic:\n    unsigned int programID;\n    /\n    Shader()\n    Shader(const char* ShaderPath, const char* geometryPath = nullptr)\n\n    Shader&amp; operator () (const char* ShaderPath)\n\n    void useProgram()\n\n    void setBool(const std::string&amp; name, bool value) const\n    void setInt(const std::string&amp; name, int value) const \n    void setFloat(const std::string&amp; name, float value) const\n    // ------------------------------------------------------------------------\n    void setVec2(const std::string&amp; name, const glm::vec2&amp; value) const\n    void setVec2(const std::string&amp; name, float x, float y) const\n    // ------------------------------------------------------------------------\n    void setVec3(const std::string&amp; name, const glm::vec3&amp; value) const\n    void setVec3(const std::string&amp; name, float x, float y, float z) const\n    // ------------------------------------------------------------------------\n    void setVec4(const std::string&amp; name, const glm::vec4&amp; value) const\n    void setVec4(const std::string&amp; name, float x, float y, float z, float w)\n    // ------------------------------------------------------------------------\n    void setMat2(const std::string&amp; name, const glm::mat2&amp; mat) const\n    // ------------------------------------------------------------------------\n    void setMat3(const std::string&amp; name, const glm::mat3&amp; mat) const\n    // ------------------------------------------------------------------------\n    void setMat4(const std::string&amp; name, const glm::mat4&amp; mat) const\n\nprivate:\n    // utility function for checking shader compilation/linking errors.\n    // ------------------------------------------------------------------------\n    void checkCompileErrors(GLuint shader, std::string type)\n    ShaderSources ParseShaderCode(const string&amp; path) \n    unsigned int CompileShader(unsigned int type, string&amp; shaderSrc) \n</code></pre> <pre><code>#ifndef SHADER_H\n#define SHADER_H\n\n#include &lt;glad/glad.h&gt;\n#include &lt;glm/glm.hpp&gt;\n\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;iostream&gt;\n\nusing std::string;\n\nstruct ShaderSources {\n    string vertexSource;\n    string fragmentSource;\n};\n\nenum shaderType { VERT, FRAG };\n\nclass Shader\n{\n    ShaderSources ParseShaderCode(const string&amp; path) {\n        std::ifstream shaderCode(path);\n        std::stringstream ss[2];\n        int type = -1;\n        string line{};\n\n        while (std::getline(shaderCode, line)) {\n            if (line.find(\"#vertex\") != std::string::npos) type = VERT;\n            else if (line.find(\"#fragment\") != std::string::npos) type = FRAG;\n            else ss[(int)type] &lt;&lt; line &lt;&lt; \"\\n\";\n        }\n\n\n        return { ss[0].str(), ss[1].str() };\n\n    } // End ParseShaderCode\n\n    unsigned int CompileShader(unsigned int type, string&amp; shaderSrc) {\n\n        unsigned int shaderID = glCreateShader(type);\n\n        const char* shaderCode = shaderSrc.c_str();\n        glShaderSource(shaderID, 1, &amp;shaderCode, NULL);\n\n        glCompileShader(shaderID);\n\n        int success;\n        glGetShaderiv(shaderID, GL_COMPILE_STATUS, &amp;success);\n\n        if (!success) {\n            int length;\n            glGetShaderiv(shaderID, GL_INFO_LOG_LENGTH, &amp;length);\n            char* msg = (char*)alloca(length * sizeof(char));\n            glGetShaderInfoLog(shaderID, length, &amp;length, msg);\n\n            std::cout &lt;&lt; ((type == GL_VERTEX_SHADER) ? \"vertex \" : \"fragment \") &lt;&lt; \"shader error :\\n\" &lt;&lt; msg &lt;&lt; std::endl;\n            glDeleteShader(shaderID);\n            return -1;\n        }\n\n        return shaderID;\n    }\n\n\npublic:\n    unsigned int programID;\n    // constructor generates the shader on the fly\n    // ------------------------------------------------------------------------\n    Shader() {}\n\n    Shader(const char* ShaderPath, const char* geometryPath = nullptr)\n    {\n\n        ShaderSources shaderSources = ParseShaderCode(ShaderPath);\n        // 1. retrieve the vertex/fragment source code from filePath\n        std::string geometryCode;\n        std::ifstream gShaderFile;\n\n        // convert stream into string\n        string vertexCode = shaderSources.vertexSource;\n        string fragmentCode = shaderSources.fragmentSource;\n\n\n        // if geometry shader path is present, also load a geometry shader\n        if (geometryPath != nullptr)\n        {\n            gShaderFile.open(geometryPath);\n            std::stringstream gShaderStream;\n            gShaderStream &lt;&lt; gShaderFile.rdbuf();\n            gShaderFile.close();\n            geometryCode = gShaderStream.str();\n        }\n\n        // 2. compile shaders\n        unsigned int vertex, fragment;\n        vertex = CompileShader(GL_VERTEX_SHADER, vertexCode);\n        fragment = CompileShader(GL_FRAGMENT_SHADER, fragmentCode);\n\n        // if geometry shader is given, compile geometry shader\n        unsigned int geometry;\n        if (geometryPath != nullptr)\n        {\n            const char* gShaderCode = geometryCode.c_str();\n            geometry = glCreateShader(GL_GEOMETRY_SHADER);\n            glShaderSource(geometry, 1, &amp;gShaderCode, NULL);\n            glCompileShader(geometry);\n            checkCompileErrors(geometry, \"GEOMETRY\");\n        }\n        // shader Program\n        programID = glCreateProgram();\n        glAttachShader(programID, vertex);\n        glAttachShader(programID, fragment);\n        if (geometryPath != nullptr) glAttachShader(programID, geometry);\n\n        glLinkProgram(programID);\n        glValidateProgram(programID);\n\n        checkCompileErrors(programID, \"PROGRAM\");\n        // delete the shaders as they're linked into our program now and no longer necessary\n        glDeleteShader(vertex);\n        glDeleteShader(fragment);\n        if (geometryPath != nullptr) glDeleteShader(geometry);\n\n    }\n    // activate the shader\n    // ------------------------------------------------------------------------\n\n    Shader&amp; operator () (const char* ShaderPath) {\n        return *this;\n    }\n\n    // activate the shader\n    // ------------------------------------------------------------------------\n    void useProgram()\n    {\n        glUseProgram(programID);\n    }\n    // utility uniform functions\n    // ------------------------------------------------------------------------\n    void setBool(const std::string&amp; name, bool value) const{\n        glUniform1i(glGetUniformLocation(programID, name.c_str()), (int)value);\n    }\n    // ------------------------------------------------------------------------\n    void setInt(const std::string&amp; name, int value) const{\n        glUniform1i(glGetUniformLocation(programID, name.c_str()), value);\n    }\n    // ------------------------------------------------------------------------\n    void setFloat(const std::string&amp; name, float value) const{\n        glUniform1f(glGetUniformLocation(programID, name.c_str()), value);\n    }\n    // ------------------------------------------------------------------------\n    void setVec2(const std::string&amp; name, const glm::vec2&amp; value) const{\n        glUniform2fv(glGetUniformLocation(programID, name.c_str()), 1, &amp;value[0]);\n    }\n    void setVec2(const std::string&amp; name, float x, float y) const{\n        glUniform2f(glGetUniformLocation(programID, name.c_str()), x, y);\n    }\n    // ------------------------------------------------------------------------\n    void setVec3(const std::string&amp; name, const glm::vec3&amp; value) const{\n        glUniform3fv(glGetUniformLocation(programID, name.c_str()), 1, &amp;value[0]);\n    }\n    void setVec3(const std::string&amp; name, float x, float y, float z) const{\n        glUniform3f(glGetUniformLocation(programID, name.c_str()), x, y, z);\n    }\n    // ------------------------------------------------------------------------\n    void setVec4(const std::string&amp; name, const glm::vec4&amp; value) const{\n        glUniform4fv(glGetUniformLocation(programID, name.c_str()), 1, &amp;value[0]);\n    }\n    void setVec4(const std::string&amp; name, float x, float y, float z, float w){\n        glUniform4f(glGetUniformLocation(programID, name.c_str()), x, y, z, w);\n    }\n    // ------------------------------------------------------------------------\n    void setMat2(const std::string&amp; name, const glm::mat2&amp; mat) const{\n        glUniformMatrix2fv(glGetUniformLocation(programID, name.c_str()), 1, GL_FALSE, &amp;mat[0][0]);\n    }\n    // ------------------------------------------------------------------------\n    void setMat3(const std::string&amp; name, const glm::mat3&amp; mat) const{\n        glUniformMatrix3fv(glGetUniformLocation(programID, name.c_str()), 1, GL_FALSE, &amp;mat[0][0]);\n    }\n    // ------------------------------------------------------------------------\n    void setMat4(const std::string&amp; name, const glm::mat4&amp; mat) const{\n        glUniformMatrix4fv(glGetUniformLocation(programID, name.c_str()), 1, GL_FALSE, &amp;mat[0][0]);\n    }\n\nprivate:\n    // utility function for checking shader compilation/linking errors.\n    // ------------------------------------------------------------------------\n    void checkCompileErrors(GLuint shader, std::string type)\n    {\n        GLint success;\n        GLchar infoLog[1024];\n        if (type != \"PROGRAM\")\n        {\n            glGetShaderiv(shader, GL_COMPILE_STATUS, &amp;success);\n            if (!success)\n            {\n                glGetShaderInfoLog(shader, 1024, NULL, infoLog);\n                std::cout &lt;&lt; \"ERROR::SHADER_COMPILATION_ERROR of type: \" &lt;&lt; type &lt;&lt; \"\\n\" &lt;&lt; infoLog &lt;&lt; \"\\n -- --------------------------------------------------- -- \" &lt;&lt; std::endl;\n            }\n        }\n        else\n        {\n            glGetProgramiv(shader, GL_LINK_STATUS, &amp;success);\n            if (!success)\n            {\n                glGetProgramInfoLog(shader, 1024, NULL, infoLog);\n                std::cout &lt;&lt; \"ERROR::PROGRAM_LINKING_ERROR of type: \" &lt;&lt; type &lt;&lt; \"\\n\" &lt;&lt; infoLog &lt;&lt; \"\\n -- --------------------------------------------------- -- \" &lt;&lt; std::endl;\n            }\n        }\n    }\n};\n#endif\n</code></pre>"},{"location":"graphics/099_abstraction02_GraphicObj/#texture-implementation","title":"Texture Implementation","text":"<pre><code>#ifndef  TEXTURE\n#define TEXTURE\n\n#include &lt;glad/glad.h&gt;\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\n#define STB_IMAGE_IMPLEMENTATION\n#include \"stb_image.h\"\n\nusing std::string, std::cout, std::endl;\n\nclass Texture {\n    unsigned int textureID;\n    public:\n    Texture(){}\n    Texture(const string&amp; path) {\n\n        glGenTextures(1, &amp;textureID);\n\n        int w, h, ncomp;\n        unsigned char* data = stbi_load(path.c_str(), &amp;w, &amp;h, &amp;ncomp, 0);\n        if (data) {\n\n            glBindTexture(GL_TEXTURE_2D, textureID);\n\n            GLenum format{};\n            if (ncomp == 1) format = GL_RED;\n            else if (ncomp == 3) format = GL_RGB;\n            else if (ncomp == 4) format = GL_RGBA;\n\n            glTexImage2D(GL_TEXTURE_2D, 0, format, w, h, 0, format, GL_UNSIGNED_BYTE, data);\n            glGenerateMipmap(GL_TEXTURE_2D);\n\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\n\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n            stbi_image_free(data);\n        }\n        else {\n            cout &lt;&lt; \" Texture Failed to load at path: \" &lt;&lt; path &lt;&lt; endl;\n\n        }\n\n    }\n\n    Texture* operator() (const string&amp; path) {\n        return this;\n    }\n\n    unsigned int getTextureID() const {\n        return textureID;\n    }\n\n    void bindTexture(const unsigned int texSlot = 0) const {\n        glActiveTexture(GL_TEXTURE0 + texSlot);\n        glBindTexture(GL_TEXTURE_2D, textureID);\n    }\n\n\n};\n\n\n#endif // ! TEXTURE\n</code></pre>"},{"location":"graphics/099_abstraction02_GraphicObj/#renderer-structure","title":"Renderer Structure","text":"<p>This is a basic class for all different stuff to render</p> <pre><code>#ifndef RENDERER_H\n#define RENDERER_H\n\n#include &lt;glad/glad.h&gt;\n#include &lt;GLFW/glfw3.h&gt;\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/gtc/matrix_transform.hpp&gt;\n#include &lt;glm/gtc/type_ptr.hpp&gt;\n\n#include \"Shader.h\"\n#include \"Texture.h\"\n\n#include \"GraphicObject.h\"\n\nclass Renderer {\n\npublic:\n    GLFWwindow* win{};\n    Renderer() {}\n    void init(int scr_W, int scr_H, const char* title) {\n        glfwInit();\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n        win = glfwCreateWindow(scr_W, scr_H, title, NULL, NULL);\n        if (!win) {\n            std::cout &lt;&lt; \"GLFW failed to load\" &lt;&lt; std::endl;\n            glfwTerminate();\n\n        }\n\n        glfwMakeContextCurrent(win);\n\n        if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {\n            std::cout &lt;&lt; \"GLAD failed to load\" &lt;&lt; std::endl;\n\n        }\n    }\n\n    GLFWwindow* getWindow() {\n        return win;\n    }\n    virtual void setupDraw() {};\n\n    virtual void draw() {}\n\n    virtual ~Renderer() {\n        glfwTerminate();\n    }\n\n\n};\n\n\n#endif // RENDERER_H\n</code></pre>"},{"location":"graphics/099_abstraction02_GraphicObj/#main-structure","title":"Main Structure","text":"<pre><code>#include &lt;iostream&gt;\n\n#include &lt;sstream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n\n#include \"Renderer.h\"\n\n\nclass RenderTriangle : public Renderer {\n\npublic:\n    unique_ptr&lt;GraphicObject&gt; graphicObject;\n    unique_ptr&lt;GraphicObject&gt; graphicObject1;\n    Renderer::Renderer;\n\n    void setupDraw() override{\n        Renderer::setupDraw();\n\n        // Vertices\n        vector&lt;VertexInfo&gt; triangleVertices;\n                                        // Position      // color\n        triangleVertices.push_back({ -0.5f, -0.5f, 0.0f, 1.0f , 0.0f, 0.0f});\n        triangleVertices.push_back({ 0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f });\n        triangleVertices.push_back({ 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f});\n\n\n        graphicObject = make_unique&lt;GraphicObject&gt;(triangleVertices);\n        graphicObject-&gt;initShader(\"src/basic01.shader\");\n\n\n        graphicObject1 = make_unique&lt;GraphicObject&gt;(triangleVertices);\n        graphicObject1-&gt;initShader(\"src/basic02.shader\");\n\n        graphicObject-&gt;translate(glm::vec3(0.5f, 0.0f, 0.0f));\n        graphicObject-&gt;rotate(180.0f, glm::vec3(0.0f, 0.0f, 1.0f));\n\n\n    }\n\n    void draw() override {\n        Renderer::draw();\n\n        glClearColor(0.1f, 0.5f, 0.5f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n        // Upside down triangle\n\n        graphicObject-&gt;setModel();\n        graphicObject-&gt;draw();\n        graphicObject-&gt;unbindVertex();\n\n        double time = glfwGetTime();\n        float color_offset = static_cast&lt;float&gt;(cos(time)/2.0 + 0.5);\n        graphicObject1-&gt;setModel();\n        graphicObject1-&gt;objShader-&gt;setFloat(\"c_offset\", color_offset);\n        graphicObject1-&gt;draw();\n\n        glfwSwapBuffers(win);\n        glfwPollEvents();\n\n    }\n\n    virtual ~RenderTriangle(){\n\n    }\n};\n\n\nint main()\n{\n    RenderTriangle triangle;\n    triangle.init(800, 600, \"some title\");\n    triangle.setupDraw();\n    while (!glfwWindowShouldClose(triangle.getWindow()) ) {\n        triangle.draw();\n    }\n\n}\n</code></pre>"},{"location":"graphics/099_abstraction02_GraphicObj/#full-code-list","title":"Full Code list","text":"<p>The full codes can be found here:      GraphicObject.h Shader.h Texture.h Renderer.h Main.cpp basic01.shader basic02.shader </p> <p></p>"},{"location":"graphics/099_shader-learning/","title":"Shader Learning Process","text":""},{"location":"graphics/099_shader-learning/#introductions-to-shaders","title":"Introductions to Shaders","text":"<pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif \n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {   \n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n    st.x *= u_resolution.x/u_resolution.y;\n\n    // Base color of some sort\n    vec3 color = vec3(st.x,st.y,abs(sin(u_time)));;\n\n    // some kind of  value:\n    //      (1) Linear: st.x\n    //      (2) Linear: st.y - st.x\n    //      (3) curve: st.y * st.x\n\n    float x_val =   abs(smoothstep(0.2, 0.5, st.y * st.x)) ; \n\n    color = color + (sin(u_time +  (x_val)) ) ;\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p>Result: Is some kind of animation </p>"},{"location":"graphics/099_shader-learning/#basic-shader-drawing","title":"Basic Shader Drawing","text":"<pre><code>/**\n\n */\nvoid main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(0.0);\n\n    color = vec3(st.xx, 0.0); // using swizzle\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p><pre><code>void main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(st.xy, 0.0);\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> Result:  </p>"},{"location":"graphics/099_shader-learning/#draw-some-graph-of-sort","title":"Draw some graph of sort","text":"<pre><code>void main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(0.0);\n\n    //when value is &lt; 0.5 = 0, value &gt; 0.5 = 1\n    //The boundary is 0.5(a constant) along x axis\n    float x = step(0.5, st.x);\n\n    //when you do it like this plot an equation in boundary,\n\n    //: Graph of x against y - diagonal\n    float x1 = step(st.x, st.y);\n\n    // Graph of x*x against y - a curve\n    float x2 = step(st.x * st.x , st.y);\n\n    color = vec3(x2);\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre>"},{"location":"graphics/099_shader-learning/#explaining-fract","title":"Explaining Fract","text":"<p>More code to support:</p> <pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\n\nvoid main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(0.0);\n\n    color.rb = abs( 2.0 * fract(vec2(st.x) * 5.0) - 1.0);\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p>Result: </p>"},{"location":"graphics/099_shader-learning/#mixing-shaders","title":"Mixing shaders","text":""},{"location":"graphics/099_shader-learning/#example-1-mixing-with-sin-waves","title":"Example 1 : Mixing with sin waves","text":"<pre><code>#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec3 colorA = vec3(1.000,0.511,0.000);\nvec3 colorB = vec3(0.348,0.282,0.680);\n\nvoid main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(0.0);\n\n    // use mix_val values between 0 and 1.0 to mix\n    float mix_val = abs(sin(u_time)); \n    color = mix(colorA, colorB, mix_val);\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre> <p>The Result is a continuous mixture between the two colors</p>"},{"location":"graphics/099_shader-learning/#example-2-mixing-with-step-function","title":"Example 2 : mixing with step function","text":"<pre><code>vec3 colorA = vec3(1.000,0.511,0.000);\nvec3 colorB = vec3(0.348,0.282,0.680);\n\nvoid main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(0.0);\n\n    color = mix(colorA, colorB, step(0.5, st.x));\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre>"},{"location":"graphics/099_shader-learning/#example-3-mixing-with-smoothstep","title":"Example 3: mixing with smoothstep","text":"<pre><code>vec3 colorA = vec3(1.000,0.511,0.000);\nvec3 colorB = vec3(0.348,0.282,0.680);\n\nvoid main() {\n\n    vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 color = vec3(0.0);\n\n    color = mix(colorA, colorB, smoothstep(0.25, 0.75, st.x));\n\n    gl_FragColor = vec4(color, 1.0);\n}\n</code></pre>"},{"location":"graphics/099_shader-learning/#example-4-a-little-more-complex-mix","title":"Example 4: A little more complex mix","text":"<pre><code>define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(1.000,0.833,0.224);\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec3 pct = vec3(st.x);\n    float exp_val = abs(exp((st.x * st.y ) - 0.5));\n\n    // Use different value to change the value of rb\n    pct.r = abs(sin(u_time));\n    pct.b = abs(fract(exp_val * 5.0) - 1.0);\n\n    color = mix(colorA, colorB, pct);\n\n    gl_FragColor = vec4(color,1.0);\n}\n</code></pre>"},{"location":"graphics/099_shader-learning/#shader-vocab","title":"SHADER VOCAB","text":"<p>This section is dedicated to this like spontaneous discovery or some form of beautiful mistake of some sort.</p> <p></p> <p></p>"},{"location":"graphics/trans_coord_cam/","title":"Transformation, Coordinate system and Camera System","text":"<pre><code>// Getting screen mouse position from glfw\n    double xPos, yPos;\n    glfwGetCursorPos(window, &amp;xPos, &amp;yPos);\n    std::cout &lt;&lt; \"xPos = \" &lt;&lt; xPos &lt;&lt; \", yPos = \" &lt;&lt; yPos &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"html5-docs/","title":"Introduction to HTML and CSS","text":"<p>CSS - Means Cascading and Style Sheet. This is a way of telling computer which to apply and which to ignore when the styling ruling are stacked.</p> <p>Usually the one that is most important is what you see on the screen.</p> <p>Three ways of adding CSS to a page</p> <p></p> <pre><code>font-family: 'Montserrat', sans-serif;\n</code></pre> <pre><code>font-family: 'Merriweather', serif;\n</code></pre> <pre><code>font-family: 'Sacramento', cursive;\n</code></pre> <p>Note</p> <p>Note that this are all google fonts and you will need to include the link below in your head tag: <pre><code>&lt;link href=\"https://fonts.googleapis.com/css?family=Merriweather|Montserrat|Sacramento\" rel=\"stylesheet\"&gt;\n</code></pre></p>"},{"location":"html5-docs/#basic-example-css","title":"Basic Example Css","text":""},{"location":"html5-docs/#element-selector","title":"Element Selector","text":"<pre><code>/* Apply to all h2 elements */\nh2{color: blue;} \n</code></pre>"},{"location":"html5-docs/#class-selector","title":"Class Selector  <code>.</code>","text":"<p>A class is an html attribute that can be added to a tag in order to give it a specific styling.</p> <pre><code>/* Changes ALL text in 'blue-heading' class container to blue color*/\n.blue-heading{color: blue}\n</code></pre> <pre><code>  &lt;div&gt;\n        &lt;h2&gt;Red&lt;/h2&gt;\n        &lt;h2&gt;Green&lt;/h2&gt;\n        &lt;h2 class=\"blue-heading\"&gt;Blue&lt;/h2&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"html5-docs/#id-selector","title":"ID Selector <code>#</code>","text":"<p>Id is a element tag attribute use to specify css and also link to an element with a page. Id selector only works on one element with the id in a page. It must be 'Unique'</p> <pre><code>/* Changes element with 'green-heading' id container to blue color*/\n#green-heading{color: green}\n</code></pre> <pre><code>  &lt;div&gt;\n        &lt;h2&gt;Red&lt;/h2&gt;\n        &lt;h2  id=\"green-heading\"&gt;Green&lt;/h2&gt;\n        &lt;h2 class=\"blue-heading\"&gt;Blue&lt;/h2&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"html5-docs/#attribute-selector","title":"Attribute Selector","text":"<p>This is when you use any attribute specify in an html element to select it</p> <pre><code>/* You can select just by attribute */\np[data]{\n    background-color: blueviolet;\n}\n\n/* Or by specifying the attribute and the value in it */\np[data=\"desc\"]{\n    background-color: blueviolet;\n}\n\n/* You can also specify your own attribute */\nh1[someattr]{\n    font-style: italic;\n    color:chocolate;\n}\n</code></pre> <pre><code>&lt;div class=\"container\"&gt;\n        &lt;h1 someattr&gt;I'm Adeoye&lt;/h1&gt; \n        &lt;p data=\"desc\"&gt; I am a creative at heart \ud83d\udc96. &lt;br&gt;\n            A business man in the wild \ud83d\ude9d&lt;/p&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"html5-docs/#universal-selector-with","title":"Universal Selector with <code>*</code>","text":"<p>Apply to all the html element in the page</p> <pre><code>*{ text-align: center;}\n</code></pre>"},{"location":"html5-docs/#example-css","title":"Example - CSS","text":"<p>This demonstrate the old way on how to quickly centralized your page with automatic flexibility.</p> <pre><code>.container{\n    /* position: relative; */\n    margin: auto 100px;\n    background-color: bisque;\n    height: 50vh;\n}\n\n.container h1{\n    text-align: center;\n    font-family: 'Montserrat', serif;;\n}\n</code></pre>"},{"location":"html5-docs/#font-propeties","title":"Font Propeties","text":"<p>Note</p> <p>Always use <code>rem</code> over <code>em</code> as <code>rem</code> it is more manageable and consistent in changing of sizes.</p>"},{"location":"html5-docs/#control-the-font-with-font-size","title":"Control the font with <code>font-size</code>","text":"<pre><code> body {\n     font-size: 14px; \n     }\n</code></pre>"},{"location":"html5-docs/#affect-weigth-with-font-weight","title":"affect weigth with <code>font-weight</code>","text":"<pre><code>body {\n    font-weight: bold;\n    }\n</code></pre>"},{"location":"html5-docs/#style-your-text-more-with-text-decoration","title":"Style your text more with <code>text-decoration</code>","text":"<pre><code>body {\n text-decoration: underline;\n }\n</code></pre>"},{"location":"html5-docs/#more-styling-wiht-font-style","title":"More styling wiht <code>font-style</code>","text":"<pre><code>font-style: italic;\n</code></pre>"},{"location":"html5-docs/#working-with-font-family","title":"Working with font-family","text":""},{"location":"html5-docs/#serif","title":"serif","text":"<p>Serif are words that has sharp, edges - This fonts are similar to the newspaper fonts.    Examples - <code>Times, Times New Roman, Georgia, Savannah, Palomino, Quarter</code></p> <p></p>"},{"location":"html5-docs/#san-serif","title":"san-serif","text":"<p>The word \"San\" is a french word meaning \"without\". This has no serif basicly, no sharp edges Examples <code>Verdana, Geneva, Arial, Arial Black, Trebuchet MS, Iceland, Angel, Nautica</code></p> <p></p>"},{"location":"html5-docs/#monospace","title":"Monospace","text":"<p>This are fonts that has constant width characters. Eg. horizontal space in \"i\" take same as in \"w\". The are primary used for codes too. Examples <code>Courier, Courier New, Andele Mono, Messenger, Bainbridge</code></p> <p></p>"},{"location":"html5-docs/#cursive","title":"Cursive","text":"<p>This are font that looks like handwritten. This fonts are sometimes used in headings. Examples <code>Comic Sans, Apple Chancery, Cartoon</code></p> <p></p>"},{"location":"html5-docs/#fantasy-family","title":"Fantasy Family","text":"<p>This are fancy and fantansy styled fonts Examples - <code>Last Ninja, Impact, Crush</code></p> <p></p>"},{"location":"html5-docs/#using-font-family","title":"Using Font family","text":"<p>Most of the time when specifying font family, you make looks like so:</p> <pre><code>/* Suggetst options to fallback to */\n font-family: Verdana, Geneva, Arial, sans-serif; \n\n /* one prefers */\n font-family: Verdana, sans-serif;\n\n/* Use the default font family from device */\n font-family:  sans-serif;\n</code></pre>"},{"location":"html5-docs/#changing-font-size","title":"Changing Font size","text":"<p>Picture from Head First Html and Css</p> <p>The 3 major font-changing css are: <code>px</code>,<code>em</code>, <code>rem</code> and <code>%</code></p> <pre><code>body { font-size: 15px; } /* Using the screen pixel */\n h1 { font-size: 2em; } /* 2 the size of parent size */\n h2 { font-size: 150%; } /* 150% of the parent size  */\n h3{font-size: large} /* or small */\n</code></pre> <p></p>"},{"location":"html5-docs/#aligning-text-with-text-alignment","title":"Aligning Text with <code>text-alignment</code>","text":""},{"location":"html5-docs/#box-model-margin-padding-and-border","title":"Box-Model Margin, Padding and Border","text":""},{"location":"html5-docs/#css-levels-of-important","title":"CSS Levels of Important","text":"<p>There are four categories we look into when one need to determine the level of importance of a style rule:</p> <ul> <li>Position</li> <li>Specificity</li> <li>Type</li> <li>Importance</li> </ul>"},{"location":"html5-docs/#position","title":"Position","text":"<p>This is to check if a rule is at a lower or higher position relative to other rules.</p> <p>The more lower down the style script the more important the rule is.</p> <pre><code>li{ color: red;\n    color: blue;} /* pos &gt; red */\n\n.color-li{color: green;} /* pos &gt;  blue */\n</code></pre> <pre><code>    &lt;li&gt;Buscuit&lt;/li&gt;\n    &lt;li class=\"color-li\"&gt;Meat Pie&lt;/li&gt;\n    &lt;li&gt;Sausage&lt;/li&gt;\n</code></pre>"},{"location":"html5-docs/#specificity","title":"Specificity","text":"<p>Is how specific a selector is in terms of the css you applying the style to</p> <p><pre><code>li{color: blue} \n.firstclass{color: red}\nli[draggable]{color: purple}\n#first-id{color: orange}\n</code></pre> <code>li</code> tag has the lowest importance - applicable to multple element  follow by class <code>.firstclass</code> and the attribute selector <code>li[draggable]</code>. An id  <code>#first-id</code> has the highest specificity here because it can only be applied to one element.</p>"},{"location":"html5-docs/#type","title":"Type","text":"<p>This is based on when the css is linked(External), Internal or Inline</p>"},{"location":"html5-docs/#important","title":"Important","text":"<p>This has the highest Specificity of all. It doesn't follow any of the other specification above.</p> <pre><code>.color_h1{\n    color: red;\n    color: green !important; /* This has highest piority */\n}\n</code></pre>"},{"location":"html5-docs/#combining-css-selector","title":"Combining CSS Selector","text":""},{"location":"html5-docs/#group-selection-rule","title":"Group Selection Rule","text":"<pre><code>/* Apply to both of selector */\nselector1, selector2{\n  color : blue;\n}\n\n/* E.g */\nh1, h3{\n    border: 20px solid blueviolet;\n}\n</code></pre>"},{"location":"html5-docs/#parent-child-selection-rule","title":"Parent-Child Selection Rule","text":"<pre><code>parent_sel &gt; child_sel{\n  color : blue;\n}\n\n/* Example */\n div &gt; p {\n     color : blue;\n }\n</code></pre>"},{"location":"html5-docs/#ancestor-descendant-selection-rule","title":"Ancestor-Descendant Selection Rule","text":"<pre><code>ancestor_sel  desendant_sel{\n  color : blue;\n}\n\n/* Example \n Select all descendant `li` irrespective its hierachy \n*/\n div  li {\n     color : blue;\n }\n</code></pre>"},{"location":"html5-docs/#selecting-nth-child-of-selection","title":"Selecting nth child of selection","text":"<pre><code>/* number - 1, 2, 3 ... or odd/even  */\ndiv li:nth-child(odd){\n    background-color: #ff00aa;\n    color: white;\n}\n\ndiv &gt; p:nth-child(1){\n    background-color: green;\n    color : yellow;\n}\n</code></pre>"},{"location":"html5-docs/#chaining-selector-rules","title":"Chaining Selector Rules","text":"<pre><code>selector-1Selector-2{\n    property: attribute;\n}\n/* Examples */\n/* h2 tag that has 'content' class */\nh2.content{\n\n}\n\n/* div tag that '.tag' class and '#school' id */\ndiv.tag#school{\n\n}\n\n/* element that has both 'box' and 'schoolbox' class */\n.box.schoolbox{\n\n}\n</code></pre>"},{"location":"html5-docs/#css-positioning","title":"CSS Positioning","text":"<p>Here is a quick summary of the position posibilities</p>"},{"location":"html5-docs/#static","title":"Static","text":"<p>this is the default position for all html tags <pre><code>element_tag{\nposition: static;\n}\n</code></pre></p>"},{"location":"html5-docs/#relative","title":"Relative","text":"<p><code>postion: relative</code> This align element relative to the top element above them</p> <pre><code>element_tag{\nposition: relative;\ntop: 30px;\nleft: 10px;\n}\n\n/* Example */\n.container &gt; p{\n    position: relative;\n    top: -50px;\n    right:10px;\n    z-index: 1;\n}\n</code></pre> <p>Before relative positioning </p> <p>After relative positioning </p>"},{"location":"html5-docs/#absolute","title":"Absolute","text":"<p>This align element relative to the parent or anscestor element that has <code>postion: relative</code> or else its attached to the top tag which is the <code>html</code> tag</p> <pre><code>parent_or_ancestor_tag{\n    position: relative;\n}\n\nchild_or_descedant_tag{\nposition: absolute;\ntop: 30px;\nleft: 10px;\n}\n</code></pre> <pre><code>/* Example ======== */\n.container{\n    position: relative;\n    ...\n}\n/* Same code for prev. but changed to 'absolute' */\n.container &gt; p{\n    position: absolute;\n    top: -50px;\n    right:10px;\n\n}\n</code></pre>"},{"location":"html5-docs/#fixed","title":"Fixed","text":"<p>This does not obey any element it just fix itself to top element (<code>html</code> tag) <pre><code>element{\n    position: fixed;\n    top: 30px;\n    left: 10px;\n}\n</code></pre></p>"},{"location":"html5-docs/#box-shadow","title":"Box Shadow","text":"<ul> <li>simple box-shadow</li> </ul> <pre><code>header{\n    box-shadow: 10px 10px;\n}\n</code></pre> <ul> <li>Specifying color </li> </ul> <pre><code>header{\n    box-shadow: 10px 10px lightpink;\n}\n</code></pre> <ul> <li>Adding Shadow</li> </ul> <pre><code>header{\n    box-shadow: 10px 10px 10px lightpink;\n}\n</code></pre> <ul> <li>Setting the <code>spread radius</code> of the shadow    +ve increase the shadow, -ve decrease the shadow</li> </ul> <pre><code>header{\n    box-shadow: 10px 10px 10px 25px \n    lightpink;\n}\n</code></pre> <ul> <li>Set the inset parameter</li> </ul> <p>This changes box shadow from outer shadow (outset) to an inner shadow.</p> <pre><code>header{\n    box-shadow: -5px -5px 5px \n    #6c6c71 inset;\n}\n</code></pre> <p></p> <ul> <li>Applying Multiple shadow</li> </ul> <pre><code>.container{\n\n    position: relative;\n    top: 10px;\n\n\n    margin: auto 100px;\n    background-color: bisque;\n    height: 50vh;\n    box-shadow: 5px 3px rgb(93, 42, 169), \n                10px 13px  goldenrod,\n                31px 25px greenyellow ;\n}\n</code></pre>"},{"location":"html5-docs/#css-display-property","title":"CSS Display property","text":"<p>there are three properties for display:</p>"},{"location":"html5-docs/#block","title":"Block","text":"<p>The width fill the browser's width and the next element  is displayed below it. Most of html element has the default set the block. Eg. elements like <code>div</code>,<code>p</code>and <code>h1</code></p> <pre><code>p {display: block;} \n</code></pre>"},{"location":"html5-docs/#inline","title":"Inline","text":"<p>The element is displayed in same line as the next element,  The width wrap up to the content.</p> <p>Note</p> <p><code>inline</code> does not allow you to set width and height of your element.</p> <p>It elements stacks up to the side until is reach the end of the browser then it flows to the other side This is Default for elements like <code>span</code>,<code>em</code>...</p> <pre><code>p {display: inline;}\n</code></pre>"},{"location":"html5-docs/#inline-block","title":"Inline-block","text":"<p>This is a combination of the <code>block</code> on <code>inline</code>. By default,  this set the elements to be placed next to each other line by line. However, you are able to set the width and height if you need to.</p> <pre><code>p {display: inline-block;}\n</code></pre>"},{"location":"html5-docs/#display-none","title":"display none","text":"<p>this is basically making the html element disappear from view but still remain in the html code if you inspect it. <pre><code>p {display: none;}\n</code></pre></p>"},{"location":"html5-docs/#css-float","title":"CSS Float","text":"<pre><code>div.description img{\n    /* width: 200px; */\n    float: left; /* or right */\n}\n</code></pre>"},{"location":"html5-docs/#clear-left-right-or-both","title":"clear left, right or both","text":"<p>This properties is mostly useful if you don't want an element to float with the element(s) that has float applied to them.</p> <pre><code>element{\n    clear: both /* left or right */\n}\n</code></pre>"},{"location":"html5-docs/#media-query","title":"Media Query","text":""},{"location":"html5-docs/flexbox/","title":"Flexbox Doc","text":"<p>Flex is a better way of setting up your webpage layout display or a more comtemporary way of setting it up for responsiveness.</p>"},{"location":"html5-docs/flexbox/#setting-display-flex-and-gap","title":"Setting display <code>flex</code> and gap","text":"<pre><code>.container {\n    display: flex;\n    gap: 5px;\n}\n\n.section{\n    background-color: #eee;\n    padding: 5px;\n}\n</code></pre> <pre><code>&lt;div class=\"container\"&gt;\n&lt;section class=\"section\"&gt;\nLorem ipsum dolor sit amet, ... \n&lt;/section&gt;\n\n&lt;section class=\"section\"&gt;\nAliquam erat volutpat. Nullam ...\n&lt;/section&gt;\n\n&lt;section class=\"section\"&gt;\nCurabitur varius sagittis quam, ...\n&lt;/section&gt;\n&lt;/div&gt;\n</code></pre> <p>Before <code>flex</code> </p> <p>After <code>flex</code> </p> <ul> <li>By default, <code>flex</code> container displays its element in a column format.</li> <li>Flex will try to display all of your content no matter the content ('div', 'span', 'images') in one line while putting into consideration the content of the html elements.</li> </ul> <p></p>"},{"location":"html5-docs/flexbox/#setting-up-display-inline-flex","title":"Setting up  display <code>inline-flex</code>","text":"<p>Just like when you have display block, and inline-block, by default flex container is a kind of block form. so you can so set it to <code>inline-flex</code></p> <pre><code>.container {\n    display: inline-flex;\n    gap: 5px;\n    border: 2px dashed green;\n}\n</code></pre> <p>before </p> <p>after </p>"},{"location":"html5-docs/flexbox/#example-work-with-flex-and-justify","title":"Example - Work with flex and Justify","text":"<p>What we know so far <pre><code>nav &gt; ul{\nbackground-color: orange;\ndisplay: flex; gap:5px; \nheight: 40px;\n}\n</code></pre> </p> <p>With <code>justify-content</code> you can have more flexiblity in the content</p> <p><pre><code>nav &gt; ul{\nbackground-color: orange;\ndisplay: flex; gap:5px; \nheight: 40px;\njustify-content: center; /* center ther content of container */\n}\n</code></pre> </p>"},{"location":"html5-docs/flexbox/#setting-the-flex-direction","title":"Setting the Flex direction","text":"<p>This is basically the direction along which flex is stacking up the html elements. By default <code>flex-direction</code> is set to <code>row</code> this is the  Main axis, which is along X-axis. Here the Cross axis is along the Y-axis </p> <p><pre><code>/* This is the default behaviour */\n section.color{\ndisplay:flex; \nbackground-color: aquamarine;   \nmargin-top: 20px;        \n}\n\nsection.color &gt; div{\nborder: 1px solid #eee;\nwidth: 100%; height: 50px;\n}\n</code></pre> </p> <p>The second and obvious alternative is setting the <code>flex-direction</code> to <code>column</code> which is now makes the the Main-axis in Y-direction, column direction and the Cross-axis along the X-direction basically flipping it.</p> <pre><code> section.color{\ndisplay:flex; \nflex-direction: column;  /* This is what changed */\nbackground-color: aquamarine;   \nmargin-top: 20px;        \n}\n</code></pre> <p></p> <p></p>"},{"location":"html5-docs/flexbox/#flex-basis","title":"Flex Basis","text":"<p>So if we set thing like the <code>flex-basic</code> it is basically setting the width (or height) of each flexbox container item and it does so along the <code>Main-axis</code> so depending on weather the <code>flex-direction</code> is <code>row or column</code>, it will expand them in their respective direction. In other word, we are flexing along the Main Axis</p> <pre><code> section.color{\ndisplay:flex; \n/* flex-direction: column; */\nbackground-color: aquamarine;          \n}\nsection.color &gt; div{\n    flex-basis: 100px;\n}\n</code></pre> <p></p> <pre><code> section.color{\ndisplay:flex; \nflex-direction: column;\nbackground-color: aquamarine;          \n}\nsection.color &gt; div{\n    flex-basis: 100px;\n}\n</code></pre> <p></p>"},{"location":"html5-docs/flexbox/#flex-order","title":"Flex order","text":"<p>Flex order basically re-order the item in your flexbox, by stacking the highest order item at the far end of the items. All items has a defaults  <code>order: 0</code> if you  set an item order higher than 0, it stacks it to the far left.</p> <p>Note</p> <ul> <li>This is an ITEM property</li> <li>It operates along the MAIN-AXIS direction</li> </ul> <p>Example:</p> <pre><code>.box .green{\nbackground-color: #00ff7b;\n/* order:1; */\n}\n</code></pre> <p></p> <pre><code>.box .green{\nbackground-color: #00ff7b;\norder:1;\n}\n</code></pre> <p></p> <p>Just as the order can be set to positive values, It can also be set to negative values.</p> <pre><code>.box .img{width: 100%;\nmax-width: 200px;\norder: -1;\n }\n</code></pre> <p></p> <p>The higher the order number, the higher the stacking</p> <p><pre><code>.box .img{width: 100%;\nmax-width: 200px;\norder: -2;\n}\n.box .green{\nbackground-color: #00ff7b;\norder:1;\n}\n.box .orange{\nbackground-color: orange;\norder:3;\n}\n</code></pre> </p>"},{"location":"html5-docs/flexbox/#flex-wrap","title":"Flex Wrap","text":"<p>This is useful when the container items exceed what the window can container. E.g. In case of say mobile devices with low screen dimension.</p> <p>By default, the <code>flex-wrap</code> property is set to <code>nowrap</code>. </p> <p>Note</p> <ul> <li>This is a COINTAINER/PARENT property</li> <li>It works along the MAIN-AXIS</li> </ul> <pre><code>.box{\ndisplay: flex;\n\nflex-direction: row;\nflex-wrap: wrap;\n\n/* Short-hand form */\nflex-flow: row wrap;\n\n}\n</code></pre> <p>On a wide screen </p> <p>On a low dimension screen</p> <p>there is also a property called <code>wrap-reverse</code> which layout the items from the bottom up.</p> <p></p>"},{"location":"html5-docs/flexbox/#important-note","title":"important Note","text":"<p>Depending on how the content is written flex wrap may work differently.</p> <p>Look at this Example</p> <p>This is the default  <code>nowrap</code> for this flex box:</p> <p></p> <p>The moment it changes to <code>wrap</code> it behaves differently: The expectation might be that I will still layout in a column along the row.</p> <p></p> <p>The problem stems from the fact that the content is written in one line. To make this behave in a more desirable way, one will need to break the text content in a more manageable lines using the <code>br</code> tag. Rather than it being one line. </p> <p></p> <p>However, breaking using <code>br</code> tag diffinitely work, but the best solution method will be to use the <code>@media</code> query to change the flex from <code>nowrap</code> to <code>wrap</code> after a certain width condition.</p> <pre><code> .container {\ndisplay: flex;\nflex-wrap: nowrap;\n}\n\n\n@media screen and (max-width: 800px) {\n.container{\n    flex-wrap: wrap;\n}\n}\n</code></pre> <p>width <code>&gt; 800px</code> </p> <p>width <code>&lt; 800px</code> </p>"},{"location":"html5-docs/flexbox/#flex-flow","title":"flex-flow","text":"<p>This is a shorthand for the <code>flex-direction</code> and <code>flex-wrap</code> properties, which together define the flex container\u2019s main and cross axes. The default value is <code>row nowrap</code>.</p> <pre><code>.container {\n  flex-flow: column wrap;\n}\n</code></pre>"},{"location":"html5-docs/flexbox/#justify-content","title":"Justify content","text":"<p>This help arrange the html items along the  main-axis in the contain.</p> <p>Note</p> <ul> <li>this is property on the COINTAINER</li> <li>It applied along the MAIN-AXIS weather <code>row</code> or <code>column</code></li> </ul>"},{"location":"html5-docs/flexbox/#align-items","title":"Align items","text":"<p>This help arrange/align items along the cross-axis when the <code>flex-wrap</code> is set to <code>nowrap</code></p> <p>Note</p> <ul> <li>this is property on the COINTAINER</li> <li>It applied along the CROSS-AXIS </li> </ul> <p>Warning</p> <p>it only work when the <code>flex-wrap: nowrap</code> and when the container <code>height</code> is set say <code>px, vh, rem, %</code> etc.</p>"},{"location":"html5-docs/flexbox/#align-self","title":"Align self","text":"<p>This is if you want to change the postioning of the child item from the other elements</p> <pre><code>section.color{\n    display:flex; \n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items:center;\n}\n\nsection.color &gt; div:nth-child(even){\n    ...\n    align-self: flex-end\n;}\n</code></pre> <p></p>"},{"location":"html5-docs/flexbox/#align-content","title":"Align content","text":"<p>This is similar to <code>align-items</code> item help arrange/align items along the cross-axis when the <code>flex-wrap</code> is set to <code>wrap</code></p> <p>Note</p> <ul> <li>this is property on the COINTAINER</li> <li>It applied along the CROSS-AXIS </li> </ul> <p>Warning</p> <p>it only work when the <code>flex-wrap: wrap</code> and when the container <code>height</code> is set say <code>px, vh, rem, %</code> etc.</p>"},{"location":"html5-docs/flexbox/#flex-shrink-flex-grow-flex-basis","title":"Flex-shrink, flex-grow &amp; flex-basis","text":"<p>This is applied across the individual element along the main-Axis</p> <p>Note</p> <ul> <li>this is property on the ITEM elements</li> <li>It applied along the MAIN-AXIS </li> </ul>"},{"location":"html5-docs/flexbox/#flex-grow","title":"flex-grow","text":"<p>It tries to redistribute the remaining space in the container base on the  grow size set</p> <pre><code>section.color &gt; div:nth-child(2){\n    /* flex-grow: 1; */\n}\n</code></pre> <p></p> <pre><code>section.color &gt; div:nth-child(2){\n    flex-grow: 1;\n}\n</code></pre> <p></p> <pre><code> section.color &gt; div:nth-child(2){\n    flex-grow: 0.5; /* now have the yellow*/\n}\n\nsection.color &gt; div:nth-child(3){\n    flex-grow: 1;\n}\n</code></pre> <p></p>"},{"location":"html5-docs/flexbox/#flex","title":"flex","text":"<p>This is the shorthand for <code>flex-grow</code>, <code>flex-shrink</code> and <code>flex-basis</code> combined. The second and third parameters (<code>flex-shrink</code> and <code>flex-basis</code>) are optional. The default is 0 1 auto, but if you set it with a single number value, like <code>flex: 5;</code>, that changes the <code>flex-basis</code> to 0%, so it\u2019s like setting <code>flex-grow: 5; flex-shrink: 1; flex-basis: 0%</code>;.</p> <pre><code>.item {\n  flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]\n}\n\n.box .item{\n    flex: 1 1 0; /* Very common */\n    flex : 1 /* Same as flex : 1 1 0 */\n}\n</code></pre>"},{"location":"html5-docs/flexbox/#flex-sizing","title":"flex sizing","text":"<p>the order by which the flexbox algorithm determine the size is this:</p> <p>It first check for the <code>min-width/max-width</code>, if not available then goes on to check if there is <code>flex-basis</code> set if not available It check if <code>width</code> is set  else is check for the <code>content-width</code></p>  How `min-width/max-width` where determined  <p>Note that when you have a <code>flex-basis</code> set, It is going to ignore the <code>width</code> property on the item</p> <p>Consequent if the <code>max-width</code> is set to say <code>100px</code> and <code>flex-basis</code> is <code>200px</code>, the algo. picks the <code>max-width</code> dimension over <code>flex-basis</code>. Unless the <code>flex-basis</code> is set to say <code>50px</code> that it will read it over <code>max-width</code>.</p> <p>Sametime happens when the <code>min-width</code> is set. It takes preference for that over <code>flex-basis</code> and <code>width</code></p>"},{"location":"html5-docs/gridbox/","title":"Grid Box","text":""},{"location":"html5-docs/gridbox/#introduction","title":"Introduction","text":"<p>Grid is another useful Html layout with css. Just like flexbox, it makes arrangement of html much easier to use.</p> <p>It gives use capacity to layout out html elements in \"2D\" i.e along the <code>row</code> and <code>column</code> of the grid</p> <p>In general flexbox is good for 1D and grid in 2D</p> <p></p>"},{"location":"html5-docs/gridbox/#do-i-have-to-choose","title":"Do I have to Choose?","text":"<p>The truth is you will mostly use a combination of the while working on a project.</p>"},{"location":"html5-docs/gridbox/#flexbox-example","title":"Flexbox Example","text":"<pre><code>  .grid-box{\ndisplay: grid;\n\n/* repeat(number_of_repeats, value_to_repeat) - Repeat value a number of times*/\n/* minmax(min_value, max_value) - Value ranging between min and max*/\ngrid-template-columns: repeat(auto-fill, minmax(80px,1fr));\ngrid-auto-rows: 50px;\ngap: 2px;\n        }\n</code></pre> <p><pre><code> &lt;section class=\"grid-box\"&gt;\n            &lt;div&gt;This&lt;/div&gt;\n            &lt;div&gt;is the content&lt;/div&gt;\n            &lt;div&gt;for the &lt;/div&gt;\n            &lt;div&gt;Next level&lt;/div&gt;\n            &lt;div&gt;of grid &lt;/div&gt;\n            ...\n            ...\n&lt;/section&gt;\n</code></pre> </p>"},{"location":"html5-docs/gridbox/#grid-sizing","title":"Grid Sizing","text":""},{"location":"html5-docs/gridbox/#fixed-sized-grid","title":"Fixed Sized Grid","text":"<p>This involves setting a fixed size on grid. It is not responsive.</p> <pre><code>.grid-box{\n  display: grid;\n  grid-template-rows: 50px 100px;\n  grid-template-columns: 80px 150px;\n  gap: 2px;\n}\n</code></pre> <p></p> <p>Note</p> <p>You can write a short-hand form of the <code>grid-template-row</code> and <code>grid-template-column</code> like this</p> <pre><code>.grid-box{\n  grid-template: 50px 100px / 80px 150px;\n}\n</code></pre>"},{"location":"html5-docs/gridbox/#auto-for-sizing","title":"Auto for Sizing","text":"<p>It gives your element room to fill up the width.</p> <pre><code>.grid-box{\n  display: grid;\n  grid-template-rows: 50px auto;\n  grid-template-columns: 80px auto;\n  gap: 2px;\n}\n</code></pre> <p></p> <p>Note</p> <p>When you do <code>auto</code> for <code>grid-template-columns</code> it tries to fill the width of parent. However, for <code>grid-template-rows</code> it tries to fit to content</p>"},{"location":"html5-docs/gridbox/#ratio-for-sizing","title":"Ratio for Sizing","text":"<p>This is done by using <code>fr</code> to qualify the ratio you want</p> <pre><code>  .grid-box{\n  display: grid;\n  grid-template-rows: 2fr 1fr;\n  grid-template-columns: 1fr 2fr;\n  gap: 2px;\n}\n</code></pre> <p>Most of the time, this is what you will probably want to use.</p>"},{"location":"html5-docs/gridbox/#using-minmax","title":"using minmax()","text":"<p>This you basically create a minium and maximum stop dimension especially in the column when shrinking or expanding.</p> <pre><code>  .grid-box{\n  display: grid;\n  grid-template-rows: 2fr 1fr;\n  grid-template-columns: 1fr minmax(50px, 300px);\n  gap: 2px;\n}\n</code></pre>"},{"location":"html5-docs/gridbox/#using-repeat","title":"using repeat()","text":"<p>Instead of writing all the row or column individual dimension, repeat helps repeat the value</p> <pre><code>  .grid-box{\n  display: grid;\n  grid-template-rows: 2fr 1fr;\n  grid-template-columns: repeat(7, 100px);\n  gap: 2px;\n}\n</code></pre>"},{"location":"html5-docs/gridbox/#grid-auto-rows-and-columns","title":"Grid Auto rows and columns","text":"<p>If you create an html group that does not later fit into your dimension set by <code>grid-template</code> you can add <code>grid-auto-rows</code> or <code>grid-auto-columns</code> to give them a default value</p>"},{"location":"html5-docs/gridbox/#grid-placement","title":"Grid Placement","text":"<p>The containing html element is the grid container and the children html elements are the grid items</p> <p></p> <p>Grid rows and columms </p> <p>Grid lines </p>"},{"location":"html5-docs/gridbox/#grid-overlapping","title":"Grid overlapping","text":"<p>Here is the grid container css for the overlapping grids</p> <pre><code>.grid-box{\n  display: grid;\n  grid-template-columns:  repeat(4, 1fr);\n  grid-auto-rows: 50px;\n  gap: 2px;\n}\n</code></pre> <pre><code> .grid-box .this{\n/* grid-column: span 4; */\ngrid-area: 3 / 1 / 4 / 4;\nbackground-color: rgba(156, 74, 233, .7);\n}\n\n.grid-box .that{\n/* grid-row:span 4; */\ngrid-area: 1 / 1 / 4 / 2;\nbackground-color: #933939a9; \n}\n</code></pre> <p></p>"},{"location":"js_docs/","title":"Basics of Javascript","text":""},{"location":"js_docs/#index-value-of-array","title":"Index, Value of Array","text":"<p>Remember than an Array is an object too</p> <pre><code>let foods = [\"Eba\", \"Egusi\", \"Iyana\", \"Amala\"];\n\n//  Get the keys of Object (Array is an Object too)\nfor (const f in foods) {\n    console.log(f);         //Index :  0, 1, 2, 3\n    console.log(foods[f]);  //Value: \"Eba\",\"Egusi\",\"Iyana\",\"Amala\"\n}\n\n// // Get the Values of Object/Dict\nfor (const f of foods) {\n    console.log(f); //Value: \"Eba\",\"Egusi\",\"Iyana\",\"Amala\"\n}\n</code></pre>"},{"location":"js_docs/#keys-value-of-dictionary","title":"Keys, Value of Dictionary","text":"<p>Get the Keys and Values of an Object of Dictionary <pre><code>let foods = {\"Eba\": 20, \"Egusi\":  5, \"Iyana\": 0, \"Amala\": 34};\n\n//  Get the keys of Object/Dict\nfor (const f in foods) {\n    console.log(f); //\"Eba\",\"Egusi\",\"Iyana\",\"Amala\"\n    console.log(foods[f]); // 20, 5, 0, 34\n\n// Get the Values of Object/Dict\nfor (const f of Object.values(foods)) {\n    console.log(f); // 20, 5, 0, 34\n}\n\n// Get the Values of Object/Dict\nfor (const f of Object.keys(foods)) {\n    console.log(f); // Eba, Egusi, ...\n}\n\nconsole.log(Object.keys(foods)) // \"Eba\", \"Egusi\", ...\nconsole.log(Object.entries(foods)) // ['Eba', 20], ['Egusi', 5] ...\n</code></pre></p>"},{"location":"js_docs/#mapping-example-in-javascript","title":"Mapping example in javascript","text":"<pre><code>const numbers = [1, 2, 3, 4];\n\n// Using map to double each number\nconst doubledNumbers = numbers.map(function(number) {\n  return number * 2;\n});\n\nconsole.log(doubledNumbers); // Output: [2, 4, 6, 8]\nconsole.log(numbers);       // Output: [1, 2, 3, 4] (original array unchanged)\n</code></pre>"},{"location":"js_docs/code-snippet/","title":"Making code Snippet in VsCode","text":"<p>First go to File &gt; Preference &gt; configure Snippets or CTRL + SHIFT + P &gt; type 'snippet' select (Snippets:Configure Snippets)</p> <p>Select the language you will like make snippet for or if you want it applicable globally.</p> <pre><code>{\n    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and \n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \n    // same ids are connected.\n    // Example:\n    // \"Print to console\": {\n    //  \"prefix\": \"log\",\n    //  \"body\": [\n    //      \"console.log('$1');\",\n    //      \"$2\"\n    //  ],\n    //  \"description\": \"Log output to console\"\n    // }\n\n    \"Anonymous function for route \": {\n        \"prefix\": \"afr\",\n        \"body\" : [\n            \"(req, res)=&gt;{\",\n            \"\\tres.send($0);\",\n            \"}\"\n        ],\n        \"description\": \"add anonymous function callback\"\n    },\n\n    \"General anonymous function\":{\n        \"prefix\": \"af\",\n        \"body\":[\n            \"($1)=&gt;{$2}$0\"\n        ],\n        \"description\": \"create basic anonymous funciotn\"\n    }\n}\n</code></pre>"},{"location":"js_docs/code-snippet/#bind-to-key-shortcut-additional-step-for-difficult-setup","title":"Bind to Key shortcut : Additional step for difficult setup","text":"<p>In situation where you are having difficulty with code snippet. You can bind to keyboard shortcut</p> <p>CTRL + SHIFT + P &gt; type \"Open Keyboard Shortcuts (JSON)\"</p> <pre><code>// Place your key bindings in this file to override the defaultsauto[]\n[\n    // {\n    //     \"key\": \"ctrl+shift+v\",\n    //     \"command\": \"markdown.showPreviewToSide\",\n    //     \"when\": \"!notebookEditorFocused &amp;&amp; editorLangId == 'markdown'\"\n    // },\n    // {\n    //     \"key\": \"ctrl+k v\",\n    //     \"command\": \"-markdown.showPreviewToSide\",\n    //     \"when\": \"!notebookEditorFocused &amp;&amp; editorLangId == 'markdown'\"\n    // },\n    {\n        \"key\": \"ctrl+1\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus\",\n        \"args\": {\n            \"langId\": \"markdown\",\n            \"name\": \"mkdocs Figure\"\n        }\n    },\n\n    {\n        \"key\": \"ctrl+2\",\n        \"command\": \"editor.action.insertSnippet\",\n        \"when\": \"editorTextFocus\",\n        \"args\": {\n            \"langId\": \"markdown\",\n            \"name\": \"display div mkdocs\"\n        }\n    }\n]\n</code></pre>"},{"location":"js_docs/express-doc/","title":"Getting Started with Express","text":""},{"location":"js_docs/express-doc/#setup","title":"Setup","text":"<p>Make a new directory for your file and do <code>npm init</code> to follow step by step instruction  or <code>npm init -y</code> for default settings.</p> <p>main change is  the  package.json</p> package.json<pre><code>{\n  \"name\": \"node04\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"type\": \"module\", // use es6 syntax\n  \"scripts\": {\n    \"start\": \"node --watch server\", // auto update\n    \"dev\" : \"node &lt;some-command&gt;\"\n  },\n...\n  \"dependencies\": {\n    \"express\": \"^4.21.2\"\n  }\n}\n</code></pre> <ul> <li>Here you call on console <code>npm start</code> </li> <li>Or call <code>npm run dev</code> for any other than <code>start</code></li> </ul>"},{"location":"js_docs/express-doc/#running-basic-get","title":"Running basic <code>get</code>","text":"<p><pre><code>import express from 'express';\n// express = require(\"express\");\nconst app = express();\n\n\n// Arg: path_url, callback function\napp.get('/', (req, res)=&gt;{\n    res.send(\"Hello from Express\");\n});\n\n// Creating more route\n// Creating more route\napp.get('/api/playlist', (req, res)=&gt;{\n    res.send({song1: \"ahala\", song2: \"holoa way\"});\n})\n\n// Pass callback to display on console\napp.listen(3000, ()=&gt;{\n    console.log(\"listening on port 3000...\")\n});\n</code></pre> </p> <p>Note install <code>nodemon</code> package to avoid having to restart everytime</p> <p><code>npm i -g nodemon</code> </p>"},{"location":"js_docs/express-doc/#creating-environment-variable-for-the-port","title":"creating environment variable for the Port","text":"<pre><code>// PORT for server\nconst port = process.env.PORT;\napp.listen(port, ()=&gt;{\n    console.log(`listening on port ${port}..`)\n});\n</code></pre>"},{"location":"js_docs/express-doc/#method-1","title":"Method 1","text":"<p>set environment variable in your console  <code>&gt;&gt;&gt; $env:PORT=5000</code></p>"},{"location":"js_docs/express-doc/#method-2-recommended","title":"Method 2 (Recommended)","text":"<ul> <li>Create an .env file in your working directory, here is where you store your port <code>PORT=5000</code> environment variable</li> <li>Then in your package.json file, append a flag <code>--env-file=.env</code> to your scripts</li> </ul> <pre><code>{\n  \"name\": \"node04\",\n  \"main\": \"server.js\",\n...\n  \"scripts\": {\n    \"start\": \"node --watch --env-file=.env server\"\n  },\n...\n\n}\n</code></pre>"},{"location":"js_docs/express-doc/#full-basic-code","title":"Full Basic Code","text":".env<pre><code>PORT=5000\n</code></pre> package.json<pre><code>{\n  \"name\": \"node04\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node server\",\n    \"dev\": \"node --watch --env-file=.env server\"\n  },\n...\n  \"dependencies\": {\n    \"express\": \"^4.21.2\"\n  }\n}\n</code></pre> server.js<pre><code>import express from 'express';\nconst port = process.env.PORT || 3000;\n\nconst app =  express();\n\napp.get('/', (req, res)=&gt;{\n    res.send(`&lt;h1&gt;Express yourself on port ${port}&lt;/h1&gt;`);\n});\n\napp.listen(port, ()=&gt;console.log(\"listening on port \"+port));\n</code></pre>  Response from server"},{"location":"js_docs/express-doc/#route-parameters","title":"Route Parameters","text":"<pre><code>// Defining a parameter in a route\napp.get('/api/playlist/:idx', (req, res)=&gt;{\n    res.send(req.params.idx);\n})\n</code></pre>"},{"location":"js_docs/express-doc/#reading-multiple-params","title":"Reading multiple Params","text":"<pre><code>// reading multiple params\napp.get(\"/api/user/:year/:month\", (req, res)=&gt;{\n    res.send(req.params);\n});\n</code></pre>"},{"location":"js_docs/express-doc/#reading-query-parameters","title":"Reading Query Parameters","text":"<pre><code>// reading Query params\napp.get(\"/api/song\", (req, res)=&gt;{\n    res.send(req.query);\n})\n</code></pre>"},{"location":"js_docs/express-doc/#handing-get-in-express","title":"Handing GET in express","text":"<pre><code>const courses = [\n    {id:1, name : \"Math\"},\n    {id:2, name : \"English\"},\n    {id:3, name : \"Further Math\"},\n];\n\n// Arg: path_url, callback function\napp.get(\"/\", (req, res)=&gt;{\n    res.send(\"Hello from Express\");\n});\n\n// course route\napp.get('/api/courses', (req, res)=&gt;{\n    res.send(courses);\n })\n\n// course route handling get\napp.get('/api/courses/:id', (req, res)=&gt;{\n   let course = courses.find(c=&gt;c.id === parseInt(req.params.id))\n   if(!course) res.status(404).send('The given course ID not found');\n   res.send(course);\n})\n</code></pre>"},{"location":"js_docs/express-doc/#basics-of-post-in-express","title":"Basics of POST in express","text":"<pre><code>const courses = [\n    {id:1, name : \"Math\"}, \n    {id:2, name : \"English\"},\n    {id:3, name : \"Further Math\"},\n];\n\n...\n\napp.use(express.json()); // Add middleware \n\napp.post('/api/courses', (req, res)=&gt;{\n    let course = {\n        id : courses.length + 1,\n        name : req.body.name\n    };\n\n    // Add to database\n    courses.push(course);\n\n    // send new course for user to see\n    res.send(course);\n});\n</code></pre>"},{"location":"js_docs/express-doc/#input-valiation-using-joi","title":"Input Valiation using Joi","text":"<p>Make sure you have postman vscode install</p> <pre><code>// ============ POST ===================\n\nimport Joi from 'joi';\n\napp.use(express.json()); // Add middleware \n\napp.post('/api/courses', (req, res)=&gt;{\n\n    const schema = Joi.object({name: Joi.string().min(3).required()});\n\n    //using object destructuring on `req.error` to get `error`\n    const {error} = schema.validate(req.body); \n\n    if(error) {\n        res.status(400).send(error.details[0].message);\n        return;\n    }\n\n    let course = {\n        id : courses.length + 1,\n        name : req.body.name\n    };\n\n    // Add to database\n    courses.push(course);\n\n    // send new course for user to see\n    res.send(course);\n});\n</code></pre>"},{"location":"js_docs/express-doc/#put-and-delete-in-node","title":"Put and Delete in node","text":"<pre><code>// ============ PUT ===================\n\nfunction validateCourse(course){\n    // Create validation criterias\n    const schema = Joi.object({name: Joi.string().min(3).required()});\n    //using spread operator on `req.error` to get `error`\n    return schema.validate(course); \n}\n\nfunction checkUserId(req, res){\n    let cs = courses.find(c=&gt;c.id === parseInt(req.params.id))\n   if(!cs) {\n        res.status(404).send('The given course ID not found');\n    }\n   else return cs;\n}\n. . .\n\napp.put('/api/courses/:id', (req, res)=&gt;{\n    // Look up the course - If not exisiting, return 404\n    let course = checkUserId(req, res);\n\n    // Validate - If invalid, return 400 - Bad request\n    const {error} = validateCourse(req.body); \n    if(error) {\n        res.status(400).send(error.details[0].message);\n        return;\n    }\n    // Update course\n    course.name = req.body.name;\n    // Return the updated course\n    res.send(course);\n})\n\n//========== DELETE ================\napp.delete(\"/api/courses/:id\", (req, res)=&gt;{\n    // Look up the course - If not exisiting, return 404\n    let course = checkUserId(req, res);\n\n    let index = courses.indexOf(course);\n    courses.splice(index, 1);\n\n    res.send(`${course} course has been removed`);\n})\n</code></pre>"},{"location":"js_docs/express-doc/#sending-a-static-file-with-express","title":"Sending a static file with express","text":"<p>In your current directory, create a public folder where you will store all your static files.  </p> <p>Note</p> <p>As of Node v21.2.0 and 20.11.0, you can access yor <code>__dirname</code> and <code>__filename</code> like so: <pre><code>const __filename = import.meta.filename;\nconst __dirname = import.meta.dirname;\n\nconsole.log(__filename);\nconsole.log(__dirname);\nconsole.log(import.meta.url);\n</code></pre> </p> <pre><code>import express from 'express';\nimport url from 'url';\nimport path from 'path';\nconst port = process.env.PORT || 3000;\n\nconst __dirname = path.dirname(url.fileURLToPath(import.meta.url));\n\nconst app =  express();\n\n// Get HomePage\napp.get('/', (req, res)=&gt;{\n    res.sendFile(path.join(__dirname, \"public\", \"index.html\"));\n});\n\napp.listen(port, ()=&gt;console.log(\"listening on port \"+port));\n</code></pre> <p>Working on a more express way:</p> <pre><code>import express from 'express';\nimport path from 'path';\n\nconst port = process.env.PORT || 3000;\n\nconst __dirname = import.meta.dirname;\n\nconst app =  express();\n\napp.use(express.static(path.join(__dirname, \"public\")));\n\napp.listen(port, ()=&gt;console.log(\"listening on port \"+port));\n</code></pre> <p>all you need to this time is just load with <code>.html</code></p>"},{"location":"js_docs/node_getting_started/","title":"Basics of NodeJs","text":"<p>Creating a new node app</p> <pre><code># Require you answer follow up quest\n&gt;&gt;&gt; npm init \n\n# Use default info\n&gt;&gt;&gt; npm init -yes \n\n&gt;&gt;&gt; npm install &lt; package_name &gt;\n# or \n&gt;&gt;&gt; npm i &lt; package_name &gt;\n</code></pre>"},{"location":"js_docs/node_getting_started/#intro-hello-node","title":"intro <code>hello node</code>","text":"<p>First node code</p> <pre><code>console.log(\"Hello node\");\n</code></pre> <p>in console run : <code>node dir/index.js</code></p>"},{"location":"js_docs/node_getting_started/#copying-file-in-node","title":"copying file in node","text":"<p>This will copy the file in our current directory</p> <pre><code>const fs = require(\"fs\")\n\nfs.copyFileSync(\"file1.txt\", \"file2.txt\")\n</code></pre> <p></p>"},{"location":"js_docs/node_getting_started/#using-the-basic-express-js","title":"Using the basic express js","text":"<pre><code>import express from 'express'\n\nconst app = express()\n\napp.get('/', (req, res) =&gt;{\n  res.send('Hello World')\n})\n\napp.listen(3000)\n</code></pre>"},{"location":"js_docs/node_getting_started/#basic-importexport-in-nodejs","title":"Basic Import/export in NodeJs","text":"<p>This demonstrate import using both commonjs(cjs) and Esmacript 6(es6) syntax</p> es6cjs utils.js<pre><code>export function randNumGen(){\n    return Math.floor(Math.random() * 100) + 1;\n}\n</code></pre> index.js<pre><code>import { randNumGen } from \"./utils.js\";\nconsole.log(randNumGen());\n</code></pre> utils.js<pre><code>function randNumGen(){\n    return Math.floor(Math.random() * 100) + 1;\n}\nmodule.exports = randNumGen;\n</code></pre> index.js<pre><code>randNumGen = require(\"./utils\");\nconsole.log(randNumGen());\n</code></pre> <p>Note</p> <p>When export using the ES6 module you can use this two option</p> <pre><code>// A - utils.js - attact export to function\nexport function randNumGen(){...}\n\n// B - utils.js - put function object at end\nfunction randNumGen(){...} \nexport {randNumGen};\n\n// For both of this scenerio, use {} when import\n// index.js\nimport {randNumGen} from 'utils.js'\n</code></pre> <p>Export with <code>default</code> option <pre><code>function randNumGen(){...}\nexport default randNumGen;\n\n// index.js - Here you don't need to add {}\nimport randNumGen from 'utils.js'\n</code></pre></p> <p>To export multiple function export</p> es6cjs utils.js<pre><code>function randNumGen(){\nreturn Math.floor(Math.random() * 100) + 1;}\n\nfunction getBMI(mass, height){\nreturn (mass/ Math.pow(height, 2));}\n\nexport {randNumGen, getBMI};\n</code></pre> index.js<pre><code>import {randNumGen, getBMI} from \"./utils.js\";\n\nconsole.log(`Get random ${randNumGen()}`);\nconsole.log(`Get BMI: ${getBMI(100, 30)}`);\n</code></pre> utils.js<pre><code>function randNumGen(){\nreturn Math.floor(Math.random() * 100) + 1;}\n\nfunction getBMI(mass, height){\n    return (mass/ Math.pow(height, 2));}\n\nmodule.exports = {randNumGen, getBMI};\n</code></pre> index.js<pre><code>const {randNumGen, getBMI}  = require(\"./utils\");\n\nconsole.log(`Get random ${randNumGen()}`);\nconsole.log(`Get BMI: ${getBMI(100, 30)}`);\n</code></pre>"},{"location":"js_docs/node_getting_started/#file-system-module","title":"File System module","text":""},{"location":"js_docs/node_getting_started/#read-from-directory-readdir","title":"Read from directory <code>readdir</code>","text":"<pre><code>import {readdir} from 'node:fs/promises'\n\ntry {\n    const files = await readdir('./node01');\n    console.log(files);\n\n} catch (error) {\n    console.error(`${error}`);\n}\n</code></pre> <p>Returns a list of files in directory </p>"},{"location":"js_docs/node_getting_started/#append-text-to-file-appendfile","title":"Append Text to file <code>appendFile</code>","text":"<p>If file does not exist in the directory, it creates a new one <pre><code>import { appendFile } from 'node:fs';\n\n appendFile(`node01/${file}`, \"\\nsome more text from Index.js paw!\", (err)=&gt;{\n                if (err) throw err;\n                console.log(`Text append to ${file} successfully.`);\n            });\n</code></pre></p>"},{"location":"js_docs/node_getting_started/#work-with-events","title":"Work with Events","text":""},{"location":"js_docs/node_getting_started/#basics-of-eventlister-eventemitter-and-emit","title":"Basics of EventLister <code>EventEmitter</code> and <code>emit</code>","text":"<pre><code>import {EventEmitter} from 'node:events';\n\nconst emitter = new EventEmitter();\n\n// Register a listener\nemitter.on(\"myLogMessage\", ()=&gt;{\n    console.log('Listening to you Mehn!!\\n');\n});\n\n// Raise an event, {iterate over all the event an calls)\nemitter.emit('myLogMessage');\n</code></pre>"},{"location":"js_docs/node_getting_started/#passing-argument-to-emitter","title":"Passing Argument to Emitter","text":"<pre><code>import {EventEmitter} from 'node:events';\n\nconst emitter = new EventEmitter();\n\n// Register a listener\nemitter.on(\"myLogMessage\", (e)=&gt;{\n    console.log('Listening to you Mehn!!');\n    console.log(`Here is your info `, e);\n});\n\n// Passing an Argument to logger msg\nemitter.emit('myLogMessage', {user_id : 12312, url: \"https://url.by\"});\n</code></pre>"},{"location":"js_docs/node_getting_started/#extending-event-emitter","title":"Extending Event Emitter","text":"logger.js<pre><code>import {EventEmitter} from 'node:events';\n\n\nclass LogEmitter extends EventEmitter{\n\n    user_name = \"Oluwafunmilola Iretioluwa\";\n    url = \"https://url.by\";\n\n    logMsg(msg) {\n\n        console.log(`SomeMsg from Logger: ${msg}`);\n\n        // Passing an Argument to logger msg\n        this.emit('myLogMessage', {user_id : 12312, url: this.url});\n    }\n}// end class\n\nexport {LogEmitter}\n</code></pre> index.js<pre><code>import { LogEmitter} from \"./logger.js\";\n\nconst logEmit = new LogEmitter();\n\n// Register a listener\nlogEmit.on(\"myLogMessage\", (e)=&gt;{\n    console.log('Listening to you Mehn!!');\n    console.log(`Here is your info `, e);\n});\n\nlogEmit.logMsg(\"MY-EMITTER-WELCOMES-YOU!!!!!!\");\nconsole.log(logEmit.user_name);\n</code></pre>"},{"location":"js_docs/node_getting_started/#personal-example-of-extending-emitter","title":"Personal Example of Extending Emitter","text":"speaker.js<pre><code>import {EventEmitter} from 'node:events'\n\nclass SpeakerEvent extends EventEmitter{\n\n    id = 0x53445;\n    emit_name = \"SpeakLog\";\n\n    says(msg){\n\n        console.log(msg);\n\n        // note: ONLY Emitter Name and Argument \n        this.emit(this.emit_name, {id : this.id, details: \"Unknown\"});\n    }\n}\n\nexport default SpeakerEvent;\n</code></pre> index.js<pre><code>import SpeakerEvent from \"./speaker.js\";\n\nconst speaker = new SpeakerEvent();\n\n// This is the listener\nspeaker.on(speaker.emit_name, (e)=&gt;{\n    console.log(`Message from speak! `, e);\n})\n\nspeaker.says(\"Bien Venue et Merci Beaucoup!\");\n</code></pre>"},{"location":"js_vue_docs/","title":"introduction to Vue","text":"<p>Getting started</p> <ul> <li><code>npm create vue@latest</code></li> <li>Set your project name</li> <li>Just press enter for the remaining options Once all the necessary installations is done</li> </ul> <p>Do the following:</p> <pre><code>cd &lt;new_project_name&gt;\nnpm install\nnpm run dev\n</code></pre>  Then you will get a localhost Address   Click on the localhost, you will have a default view of vue"},{"location":"js_vue_docs/#computed-properties-example-1","title":"Computed Properties example 1","text":"<pre><code>import { ref, computed } from 'vue'\n\nconst product = ref('Socks')\nconst brand = ref('Vue Mastery')\nconst newTitle = ref('')\n\n\n// Methods \nconst title = computed(()=&gt;{\n  return brand.value + \" \" + product.value\n})\n\nconst updateTitle = computed(()=&gt;{\n  // return default\n  if (newTitle.value.length === 0) return title.value\n  // trucate if too long\n  else if(newTitle.value.length &gt; 15) return newTitle.value.slice(0, 15) + \" ... \"\n  // return length of string\n  else return newTitle.value\n})\n</code></pre> <pre><code>  ...\n  &lt;h1&gt;{{ updateTitle}}&lt;/h1&gt;\n  ...\n  ...\n  ...\n\n  &lt;form @submit.prevent=\"updateTitle\"&gt;\n          &lt;input type=\"text\" placeholder=\"Write New Title...\" v-model=\"newTitle\"/&gt;\n          &lt;!-- &lt;button type=\"submit\" &gt;set name&lt;/button&gt; --&gt;\n        &lt;/form&gt;\n</code></pre>"},{"location":"js_vue_docs/#computed-properties-example-2","title":"Computed Properties Example 2","text":"<pre><code>import { ref, computed } from 'vue'\nimport socksGreenImage from './assets/images/socks_green.jpeg'\nimport socksBlueImage from './assets/images/socks_blue.jpeg'\n\n\n// Selected \nconst selVariant = ref(0)\n\nconst details = ref(['50% cotton', '30% wool', '20% polyester'])\n\nconst variants = ref([\n  { id: 2234, color: 'green', image: socksGreenImage, quantity: 50 },\n  { id: 2235, color: 'blue', image: socksBlueImage, quantity: 0 },\n])\n\n...\n\nconst image = computed(()=&gt; variants.value[selVariant.value].image)\nconst inStock = computed(()=&gt; variants.value[selVariant.value].quantity &gt; 0)\n\n\n// Updates index value when Hover\nconst updateVariant = (index) =&gt; {\n  selVariant.value = index\n }\n</code></pre> <pre><code>&lt;div class=\"product-container\"&gt;\n      &lt;div class=\"product-image\"&gt;    \n        &lt;img :src=\"image\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"product-info\"&gt;\n        &lt;!-- &lt;h1&gt;{{ title}}&lt;/h1&gt; --&gt;\n        &lt;h1&gt;{{ updateTitle}}&lt;/h1&gt;\n        &lt;p v-if=\"inStock\"&gt;In Stock&lt;/p&gt;\n        &lt;p v-else&gt;Out of Stock&lt;/p&gt;\n        &lt;ul&gt;\n          &lt;li v-for=\"detail in details\"&gt;{{ detail }}&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;div v-for=\"(variant, idx) in variants\" \n          key=\"variant.key\"\n          @mouseover=\"updateVariant(idx)\"\n          class=\"color-circle\"\n          :style=\"{ backgroundColor: variant.color }\"\n        &gt;\n        &lt;/div&gt;\n        &lt;button\n          class=\"button\" \n          :class=\"{ disabledButton: !inStock }\"\n          :disabled=\"!inStock\"\n          v-on:click=\"addToCart\"\n        &gt;\n          Add to cart\n        &lt;/button&gt;\n</code></pre>"},{"location":"js_vue_docs/#components-and-props","title":"components and Props","text":"App.vue<pre><code>&lt;script setup&gt;\nimport { ref} from 'vue'\nimport ProductDisplay from '@/components/ProductDisplay.vue'\nconst cart = ref(0)\nconst premiumData = ref(0)\nconst productDetails = ref([\n  {name: \"LongSocks\", desc: \"The best in town \", date: \"23-05\"},\n  {name: \"NothingSocks\", desc: \"Theirs nothing like it \", date: \"11-07\"},\n  {name: \"SnowSocks\", desc: \"Going for a snowy day\", date: \"02-08\"},\n])\n\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div class=\"nav-bar\"&gt;\n    &lt;div class=\"cart\"&gt;Cart({{ cart }})&lt;/div&gt;\n  &lt;/div&gt;\n&lt;ProductDisplay \n  :premiumUser =\"premiumData\" \n  :details=\"productDetails[0]\" &gt;&lt;/ProductDisplay&gt;\n\n&lt;ProductDisplay \n  :premiumUser = \"true\"\n  :details=\"productDetails[1]\" &gt;&lt;/ProductDisplay&gt;\n\n  &lt;ProductDisplay premiumUser = \"Omololu\"\n  :details=\"productDetails[2]\" &gt;&lt;/ProductDisplay&gt;\n\n&lt;/template&gt;\n</code></pre> <p>Everything from the previous code applys here, Think of it like a function but for frontEnd user.</p> <p>We <code>props</code> are like the parameters and when we call the <code>&lt;ProductDetail&gt;</code>, we pass the arguments prop to it.</p> ProductDisplay.vue<pre><code>&lt;script setup&gt;\nimport { ref, computed } from 'vue'\nimport socksGreenImage from '@/assets/images/socks_green.jpeg'\nimport socksBlueImage from '@/assets/images/socks_blue.jpeg'\n\nconst props = defineProps({\n  \"premiumUser\": {type: Boolean, required: true},\n  \"details\": {type: Object, required: true}\n})\n\n\nconst product = ref('Socks')\nconst brand = ref('Vue Mastery')\nconst selectedVariant = ref(0)\nconst details = ref(['50% cotton', '30% wool', '20% polyester'])\n\nconst variants = ref([\n  { id: 2234, color: 'green', image: socksGreenImage, quantity: 50 },\n  { id: 2235, color: 'blue', image: socksBlueImage, quantity: 0 },\n])\n\nconst title = computed(() =&gt; brand.value + ' ' + product.value)\nconst image = computed(() =&gt;  variants.value[selectedVariant.value].image)\nconst inStock = computed(() =&gt;  variants.value[selectedVariant.value].quantity &gt; 0)\nconst shippingValue = computed(() =&gt; {\n  if(props.premiumUser) return 'Free'\n  else                  return '$2.99'\n})\nconst productDetailInfo = computed(()=&gt;return `${props.details.name}, ${props.details.desc},\n  ${props.details.date}`)\n\nconst addToCart = () =&gt; cart.value += 1\nconst updateVariant = (index) =&gt; selectedVariant.value = index\n\n\n&lt;/script&gt;\n\n&lt;template&gt;\n      &lt;div class=\"product-display\"&gt;\n    &lt;div class=\"product-container\"&gt;\n      &lt;div class=\"product-image\"&gt;    \n        &lt;img v-bind:src=\"image\"&gt;\n      &lt;/div&gt;\n      &lt;div class=\"product-info\"&gt;\n        &lt;h1&gt;{{ title }}&lt;/h1&gt;\n        &lt;p v-if=\"inStock\"&gt;In Stock&lt;/p&gt;\n        &lt;p v-else&gt;Out of Stock&lt;/p&gt;\n        &lt;p&gt;shipping : {{ shippingValue }}&lt;/p&gt;\n        &lt;p&gt;{{productDetailInfo}}&lt;/p&gt;\n        &lt;ul&gt;\n          &lt;li v-for=\"detail in details\"&gt;{{ detail }}&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;div \n          v-for=\"(variant, index) in variants\" \n          :key=\"variant.id\"\n          @mouseover=\"updateVariant(index)\"\n          class=\"color-circle\"\n          :style=\"{ backgroundColor: variant.color }\"\n        &gt;\n        &lt;/div&gt;\n        &lt;button\n          class=\"button\" \n          :class=\"{ disabledButton: !inStock }\"\n          :disabled=\"!inStock\"\n          v-on:click=\"addToCart\"\n        &gt;\n          Add to cart\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#using-onmounted-in-vue","title":"Using onMounted in Vue","text":""},{"location":"js_vue_docs/#use-case-example-fetching-data-from-an-api","title":"Use case example, fetching data from an API","text":"<pre><code>&lt;script setup&gt;\nimport {ref, onMounted} from 'vue';\n\n...\n\n// Base content\nconst tasks = ref([\"buy Book\", \"Read a lesson\", \"Sweep floor\", \"Watch movies\"]);\n\nconst buttonStyle = ref({float:\"right\", borderRadius: \"20px\", backgroundColor:\"#777\"})\n\n\n\n// some form of counter with `setInterval`\nonMounted(()=&gt;{\n  setInterval(()=&gt;{ secs.value++ },1000)\n})\n\n// Requesting from API\nonMounted(async ()=&gt;{\n  try {\n    const res = await fetch('https://jsonplaceholder.typicode.com/todos')\n    const data = await res.json()\n    tasks.value = data.map((task) =&gt; task.title)\n\n  } catch (error) {\n    console.error(\"ASYNC_ERROR::FAILED TO FETCH TASK\")\n  }\n})\n\n&lt;/script&gt;\n\n\n&lt;template&gt;\n  &lt;header&gt;\n\n  &lt;h1&gt;Hello Vue&lt;span&gt;{{ secs % 30 }}&lt;/span&gt;&lt;/h1&gt;\n&lt;/header&gt;\n\n...\n\n&lt;ul&gt;\n  &lt;li v-for=\"(task, index) in tasks\" :key=\"task\" style=\"width: 50%\"&gt;\n   &lt;span&gt;{{ task }}&lt;/span&gt; \n   &lt;button \n   :style=\"buttonStyle\" \n   @click=\"deleteTask(index)\"&gt;x&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#setting-up-tailwind-css","title":"Setting Up tailwind CSS","text":"<ol> <li> <p>Install tailwind and its peer dependency</p> <pre><code>npm install tailwindcss @tailwindcss/vite\n</code></pre> </li> <li> <p>In your <code>vite.config.js</code></p> vite.config.js<pre><code>import { defineConfig } from 'vite'\nimport tailwindcss from '@tailwindcss/vite'\n\nexport default defineConfig({\n  plugins: [\n    tailwindcss(),\n  ],\n})\n</code></pre> </li> <li> <p>import tailwind in your css file</p> <pre><code>@import 'tailwindcss';\n</code></pre> </li> </ol>"},{"location":"js_vue_docs/#setting-up-herovue-components-adding-props","title":"Setting up <code>Hero.vue</code> components adding props","text":"<ol> <li> <p>In the <code>Hero.vue</code> component</p> Hero.vue<pre><code>&lt;script setup&gt;\n\nconst props = defineProps({\n    heroData:{\n        type: Object,\n        default: \n        {\n          title: \"Become a Vue Dev\", \n          desc: \"Vue jobs that fits your skills and needs\" \n        }\n    }\n})\n\n&lt;/script&gt;\n\n&lt;template&gt;\n      &lt;!-- Hero --&gt;\n      &lt;section class=\"bg-green-700 py-20 mb-4\"&gt;\n      ...\n            {{heroData.title}}\n          &lt;/h1&gt;\n          &lt;p class=\"my-4 text-xl text-white\"&gt;\n            {{heroData.desc}}\n          &lt;/p&gt;\n    ...\n    &lt;/section&gt;\n&lt;/template&gt;\n</code></pre> </li> <li> <p>In the <code>App.vue</code></p> App.vue<pre><code>&lt;script setup&gt;\nimport {ref} from 'vue'\nimport Navbar from '@/components/Navbar.vue';\nimport Hero from './components/Hero.vue';\n\n\nconst heroData = ref({ title : \"World best Jobs\",\n  desc: \"Become the world best Dev. in Tech world\"\n  })\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;Navbar /&gt;\n  &lt;Hero :hero-data = \"heroData\"/&gt;  &lt;!-- Show passed data --&gt;\n  &lt;Hero /&gt;                         &lt;!-- show the default title --&gt;\n\n&lt;/template&gt;\n</code></pre> </li> </ol> <p>We see that we have two hero files right now</p>"},{"location":"js_vue_docs/#working-with-homecardvue-and-card-setup","title":"Working with <code>HomeCard.vue</code> and 'Card' setup","text":"<p>Here is the <code>Card.vue</code> template Card.vue<pre><code>&lt;script setup&gt;\nconst props = defineProps({\n    bgColor : {\n        type: String,\n        default: \"bg-gray-100\"\n    }\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;div :class=\"`${bgColor} p-6 rounded-lg shadow-md`\"&gt;\n        &lt;slot&gt;&lt;/slot&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n</code></pre></p> HomeCard.vue<pre><code>&lt;script setup&gt;\nimport Card from \"@/components/Card.vue\"\n&lt;/script&gt;\n\n&lt;template&gt;\n\n&lt;Card bg-color=\"bg-purple-200\"&gt;\n    &lt;!-- Here is the &lt;Slot&gt; Content--&gt;\n    &lt;h2 class=\"text-2xl font-bold\"&gt;For Developers&lt;/h2&gt;\n            &lt;p class=\"mt-2 mb-4\"&gt;\n              Browse our Vue jobs and start your career today\n            &lt;/p&gt;\n            &lt;a href=\"jobs.html\" class=\"inline-block bg-black text-white rounded-lg px-4 py-2 hover:bg-gray-700\"&gt;\n              Browse Jobs\n            &lt;/a&gt;    \n        &lt;!-- End &lt;Slot&gt;--&gt;\n&lt;/Card&gt;\n\n&lt;Card bg-color=\"bg-cyan-100\"&gt;\n    &lt;!-- Here is the &lt;Slot&gt; Content--&gt;\n    &lt;h2 class=\"text-2xl font-bold\"&gt;For Employers&lt;/h2&gt;\n            &lt;p class=\"mt-2 mb-4\"&gt;\n              List your job to find the perfect developer for the role\n            &lt;/p&gt;\n            &lt;a\n              href=\"add-job.html\"\n              class=\"inline-block bg-green-500 text-white rounded-lg px-4 py-2 hover:bg-green-600\"\n            &gt;\n              Add Job\n            &lt;/a&gt;\n    &lt;!-- End &lt;Slot&gt;--&gt;\n&lt;/Card&gt;\n\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#fetch-basic-json-data-from-src","title":"Fetch basic Json Data from src","text":"JobListings.vue<pre><code>&lt;script setup&gt;\nimport {ref} from 'vue'\nimport jobData from '@/jobs2.json'\n\nconst jobs = ref(jobData)\n\n&lt;/script&gt;\n\n&lt;template&gt;\n    Job Listings\n    &lt;p v-for = \"job in jobs\" :key=\"job.id\"&gt;\n        {{job.id +\" - \"+ job.title }}\n    &lt;/p&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#styling-the-data-with-basic-tailwind","title":"Styling the Data with Basic tailwind","text":"<pre><code>&lt;template&gt;\n    &lt;section class=\"bg-blue-50 px-4 py-10\"&gt;\n        &lt;div class=\"container-xl lg:container m-auto\"&gt;\n            &lt;h2 class=\"text-3xl font-bold text-green-500 mb-6 text-center\"&gt;\n                Browse Jobs\n            &lt;/h2&gt;\n            &lt;div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\"&gt;\n\n                &lt;div v-for = \"job in jobs\" :key=\"job.id\"&gt;\n                    {{job.id +\" - \"+ job.title }}\n                &lt;/div&gt;\n\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/section&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#finalising-the-joblisting-styling","title":"Finalising the Joblisting Styling","text":"<p>Individual Job Listings</p> JobListing.vue<pre><code>&lt;script setup&gt;\nimport { defineProps } from 'vue';\n\ndefineProps({\n    jobData : Object\n})\n&lt;/script&gt;\n\n&lt;template&gt;\n      &lt;div class=\"bg-white rounded-xl shadow-md relative\"&gt;\n           ...\n              &lt;div class=\"mb-5\"&gt;\n                {{jobData.description.slice(0, 105) + \" ...\"}}\n              &lt;/div&gt;\n\n              ...\n              &lt;i class=\"fa-solid fa-location-dot text-lg\"&gt;&lt;/i&gt;\n                  {{jobData.location}}\n                &lt;/div&gt;\n                &lt;a\n                  :href=\"`/jobs/${jobData.id}`\"\n                  class=\"h-[36px] bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-center text-sm\"\n                &gt;\n                  Read More\n                &lt;/a&gt;\n            ...\n          &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> <p>All the JobListing display</p> JobListings.vue<pre><code>&lt;script setup&gt;\nimport {ref, defineProps} from 'vue'\nimport jobData from '@/jobs2.json'\nimport JobListing from '@/components/JobListing.vue'\n\nconst jobs = ref(jobData)\n\ndefineProps({\n    limit: Number,\n    showAllJobs: {type: Boolean, default: false}\n})\n\n\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;section class=\"bg-blue-50 px-4 py-10\"&gt;\n        &lt;div class=\"container-xl lg:container m-auto\"&gt;\n            &lt;h2 class=\"text-3xl font-bold text-green-500 mb-6 text-center\"&gt;\n                Browse Jobs\n            &lt;/h2&gt;\n            &lt;div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\"&gt;\n                &lt;!-- Display on limit amount --&gt;\n                &lt;JobListing v-for=\"job in jobs.slice(0, limit || jobs.length)\" :job-data=\"job\" /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/section&gt;\n\n    &lt;section v-if=\"showAllJobs\" class=\"m-auto max-w-lg my-10 px-6\"&gt;\n      &lt;a\n        href=\"jobs.html\"\n        class=\"block bg-black text-white text-center py-4 px-6 rounded-xl hover:bg-gray-700\"\n        &gt;View All Jobs&lt;/a\n      &gt;\n    &lt;/section&gt;\n&lt;/template&gt;\n</code></pre> <p>Displaying JobListing in Main vue</p> App.vue<pre><code>&lt;script setup&gt;\nimport {ref} from 'vue'\n...\nimport JobListings from './components/JobListings.vue';\n\n&lt;/script&gt;\n\n&lt;template&gt;\n...\n\n  &lt;JobListings :limit=\"3\" :show-all-jobs=\"true\"/&gt;\n\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#implementing-toggle-full-description","title":"Implementing Toggle full description","text":"<pre><code>&lt;script setup&gt;\nimport {ref, defineProps, computed } from 'vue';\n\nconst props = defineProps({\n    jobData : Object\n})\n\nconst showFullDescription = ref(false)\n\nconst toggleFullDescription = () =&gt;{\n    showFullDescription.value = !showFullDescription.value\n}\n\nconst truncatedDescription = computed(()=&gt;{\n    let description = props.jobData.description\n    if(!showFullDescription.value)\n        description = description.substring(0, 90) + \" ...\"\n    return description\n})\n&lt;/script&gt;\n\n&lt;template&gt;\n      &lt;div class=\"bg-white rounded-xl shadow-md relative\"&gt;\n          ...\n\n              &lt;div class=\"mb-5\"&gt;\n                &lt;div&gt;\n                    {{truncatedDescription}}\n                &lt;/div&gt;\n                &lt;button \n                class=\"text-green-500 hover:text-green-600 mb-5\"\n                @click=\"toggleFullDescription\"\n                &gt;\n                    {{ showFullDescription ? 'Less' : 'More' }}\n                &lt;/button&gt;\n              &lt;/div&gt;\n\n              ...\n\n          &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"js_vue_docs/#router-setup-in-vue-app","title":"Router Setup in Vue App","text":"<p>Note</p> <p>This setup will have been done if you select the router option during your first installations</p> <ol> <li> <p>First install the router in the <code>npm</code></p> <pre><code>npm install vue-router\n</code></pre> </li> <li> <p>Create a views directory in the src folder    and create a<code>HomeView.vue</code> copy the code from <code>App.vue</code> except the <code>Navbar</code> </p> homeView.vue<pre><code>  &lt;script setup&gt;\n\n  import Hero from '@/components/Hero.vue';\n  import HomeCard from '@/components/HomeCard.vue';\n  import JobListings from '@/components/JobListings.vue';\n\n  &lt;/script&gt;\n\n  &lt;template&gt;\n    &lt;Hero \n    hero-title = \"World best Jobs\" \n    hero-desc=\"Become the world best Dev. in Tech world\"/&gt;  &lt;!-- Show passed data --&gt;\n    &lt;HomeCard /&gt;\n    &lt;JobListings :limit=\"3\" :show-all-jobs=\"true\"/&gt;\n\n  &lt;/template&gt;\n</code></pre> </li> <li> <p>Next make sure you import <code>createRouter, createWebHistory</code> in index.js</p> index.js<pre><code>import {createRouter, createWebHistory} from 'vue-router'\nimport HomeView from '@/views/HomeView.vue'\n\nconst router = createRouter({\n    history: createWebHistory(import.meta.BASE_URL),\n    routes: [\n        {\n            path: '/',\n            name: 'home',\n            component: HomeView\n        }\n    ]\n})\n\nexport default router\n</code></pre> </li> <li> <p>In your <code>main.js</code> restructure it to use router</p> </li> </ol> main.js<pre><code>   import './assets/main.css'\n   import 'primeicons/primeicons.css'\n\n   import { createApp } from 'vue'\n\n   import router from './router'\n   import App from './App.vue'\n\n   const app = createApp(App)\n\n   app.use(router)\n   app.mount('#app')\n</code></pre> <ol> <li>Finally in your <code>App.vue</code>, import <code>RouterView</code> and call it in the template</li> </ol> App.vue<pre><code>  &lt;script setup&gt;\n  import { RouterView } from 'vue-router';\n  import Navbar from '@/components/Navbar.vue';\n\n  &lt;/script&gt;\n\n  &lt;template&gt;\n      &lt;Navbar /&gt; \n      &lt;RouterView /&gt;\n  &lt;/template&gt;\n</code></pre> <p>Everything remains as it was </p>"},{"location":"js_vue_docs/#replacing-the-html-link-tag","title":"Replacing the html link tag","text":"<p>Lets use Navbar as example <pre><code>// import router link\nimport { RouterLink } from 'vue-router'\n</code></pre> Replace the html link tags and properties <code>&lt;a&gt;, href</code> with <code>&lt;RouterLink&gt;, to</code> respectively</p> before<pre><code>    &lt;a\n    href=\"/jobs/add\"\n    class=\"text-white hover:bg-green-900 hover:text-white rounded-md px-3 py-2\"\n    &gt;Add Job\n    &lt;/a&gt;\n</code></pre> after<pre><code>   &lt;RouterLink\n    to=\"/jobs/add\"\n    class=\"text-white hover:bg-green-900 hover:text-white rounded-md px-3 py-2\"\n    &gt;Add Job\n    &lt;/RouterLink&gt;\n</code></pre>"},{"location":"js_vue_docs/#adding-navbar-activelink","title":"Adding Navbar ActiveLink","text":"<p>Here is the setup to Add Navbar Activelink <pre><code>&lt;script setup&gt;\nimport { RouterLink, useRoute } from 'vue-router'\n\nconst isActiveLink = (routePath) =&gt;{\n  const route = useRoute()\n  return route.path === routePath\n}\n\nconst navRouteHighlight = (path) =&gt;[\n    isActiveLink(path) ? 'bg-green-900' : 'hover:bg-gray-900 hover:text-white',\n    'text-white',\n    'px-3',\n    'py-2',\n    'rounded-md'\n  ]\n\n&lt;/script&gt;\n\n&lt;template&gt;\n      ...\n              &gt;\n            &lt;/RouterLink&gt;\n            &lt;div class=\"md:ml-auto\"&gt;\n              &lt;div class=\"flex space-x-2\"&gt;\n                &lt;RouterLink\n                  to=\"/\"\n                  :class=\"navRouteHighlight('/')\"\n                  &gt;Home\n                &lt;/RouterLink&gt;\n\n                &lt;RouterLink\n                  to=\"/jobs\"\n                  :class=\"navRouteHighlight('/jobs')\"\n                  &gt;Jobs\n                &lt;/RouterLink&gt;\n\n                &lt;RouterLink\n                  to=\"/jobs/add\"\n                  :class=\"navRouteHighlight('/jobs/add')\"\n                  &gt;Add Job\n                &lt;/RouterLink&gt;\n</code></pre></p>"},{"location":"mkdoc_docs/","title":"Intro to Mkdocs","text":""},{"location":"mkdoc_docs/#getting-started-with-mkdocs","title":"Getting Started with Mkdocs","text":"<ol> <li> <p>Download and Install python 3 and Visual Studio Code (if unavailable on your computer)</p> </li> <li> <p>Create a directory for your mkdoc website</p> <ul> <li>e.g. my_story_doc directory</li> <li>Select your directory and Right click &gt; open in terminal and Open the directory in vscode using command <code>code .</code></li> <li>Or Just Right click on folder, got to Show more option &gt; open with Code</li> </ul> </li> <li> <p>Launch a Mkdocs template in your directory.</p> <ul> <li>Go to terminal (tab) &gt; new terminal  or CTRL + SHIFT + `</li> <li>In your terminal, Install mkdocs using <code>pip install mkdocs-material</code> (<code>pip</code> is python package manager install by default in python 3.4 and above)</li> <li>Create a new site using <code>mkdocs new .</code></li> </ul> </li> </ol> <p>Basically You get the following commands:</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"mkdoc_docs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"mkdoc_docs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdoc_docs/#deploying-to-the-web-on-githubio","title":"Deploying to the web on github.io","text":"<p>In your root directory, create a .github/workflows/ci.yml directory and add the following <code>yml</code> code</p> <pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre> <ul> <li>Go ahead and <code>git add .</code> and then <code>git commit -m \"....\"</code></li> <li>Then <code>git push origin main</code> push it to main branch</li> </ul> <p>In your github go to action tab, under it you see settings side nav, select .. gh-pages</p>"},{"location":"python_docs/","title":"Documentation for my Python learning","text":""},{"location":"python_docs/#basic-operator-operation","title":"Basic Operator operation","text":"<pre><code>&gt;&gt;&gt; 12*2\n24\n\n&gt;&gt;&gt; \"Hi!\"*3 \n'Hi!Hi!Hi!'\n\n&gt;&gt;&gt; 37/7.5 # normal div. float\n4.933333333333334 \n\n&gt;&gt;&gt; 37//7.5 # integer/floored division\n4.0\n\n&gt;&gt;&gt; 37 % 7.5  # Modulo - reminder\n7.0 \n</code></pre>"},{"location":"python_docs/#string-concatenation-and-replication","title":"String concatenation and Replication","text":"<p>Joing string with other strings by using the <code>+</code> operator and to join with other types, you will need to convert the type into string type by using the <code>str</code> in-built function</p> <pre><code>&gt;&gt;&gt; \"Omolara is \" + str(43) \n'Omolara is 43'\n</code></pre> <p>You can also multiply strings by an integer-type like so</p> <pre><code>&gt;&gt;&gt; \"Hi!\"*3 \n'Hi!Hi!Hi!'\n</code></pre>"},{"location":"python_docs/#converting-between-types","title":"Converting between types","text":"<pre><code>&gt;&gt;&gt; str(-3.24)\n'-3.24'\n\n&gt;&gt;&gt; int(55.4)\n55\n\n&gt;&gt;&gt; float('3.14')\n3.14\n</code></pre> <p>This is useful if for instance you are collecting integer data from the <code>input()</code> funtion. It always returns a string so you will need to parse the string into an integer. like so <code>age = int(input(\"what's your age?:\"))</code></p>"},{"location":"python_docs/#text-and-number-equivalence","title":"Text and Number Equivalence","text":"<p>Altough string value of a number is considered completely different, an integer can be equal to a float because python considered them both as number</p> <pre><code>&gt;&gt;&gt; 24 == \"24\" \nFalse\n\n&gt;&gt;&gt; 24 == 24.0\nTrue\n\n&gt;&gt;&gt; 24.0 == 00024.0000\nTrue\n</code></pre>"},{"location":"python_docs/#some-other-basic-built-in-function","title":"Some other basic Built-in function","text":"<p>we will talk a little bit about <code>round(), floor() and ceil()</code></p> <ul> <li><code>round()</code> is the typical math rounding up or down to the nearest integer <code>round(34.4) = 34</code> and <code>round(34.6) = 35</code></li> <li>It also allow to round float to a nearest decimal places if you specify second param <code>round(33.34354, 3 ) = 33.344</code></li> <li><code>floor()</code> on the other just round down irrespective of the closenes so  <code>floor(34.4) = 34</code> and <code>floor(34.6) = 34</code></li> <li> <ul> <li><code>ceil()</code> r just round up irrespective of the closenes so  <code>ceil(34.1) = 35</code> and <code>ceil(34.6) = 35</code></li> </ul> </li> </ul> <pre><code># round\n&gt;&gt;&gt; round(45.2) \n45\n&gt;&gt;&gt; round(45.9) \n46\n&gt;&gt;&gt; round(45.5) \n46\n&gt;&gt;&gt; round(34.0002345321, 5) \n34.00023\n\n&gt;&gt;&gt; from math import floor, ceil\n# floor\n&gt;&gt;&gt; floor(45.4)\n45\n&gt;&gt;&gt; floor(45.9) \n45\n&gt;&gt;&gt; floor(45.999) \n45\n\n# ceil\n&gt;&gt;&gt; ceil(45.1)\n46\n&gt;&gt;&gt; ceil(45.05) \n46\n&gt;&gt;&gt; ceil(45.9)  \n46\n</code></pre>"},{"location":"python_docs/#functions","title":"Functions","text":"<p>Argument - value being passed to a function in a function call</p> <p>Parameter - is a local variable in a function call bracket that arguments values are assigned to them</p>"},{"location":"python_docs/#working-with-variables-in-function","title":"Working with Variables in Function","text":"<ul> <li>Case 1 - Using the global value in function\\ output: the global value</li> </ul> <pre><code>val = \"GLOBAL Value\"\n\ndef fun1():\n    print (val)\n\nfun1() # prints: \"GLOBAL Value\"\n</code></pre> <ul> <li>Case 2 - Assign a value to a local variable with the same name\\ output: the local value</li> </ul> <pre><code>val = \"GLOBAL Value\"\n\ndef fun1():\n    val = \"LOCAL Value\"\n    print (val)\n\nfun1() # prints: \"LOCAL Value\"\nprint(val) # prints: \"GLOBAL Value\"\n</code></pre> <ul> <li>Case 3: Assign value to the global variable from inside a function</li> </ul> <pre><code>val = \"GLOBAL Value\"\n\ndef fun1():\n    global val # val refer to global 'val'\n    val = \"LOCAL Value\"\n    print (val)\n\nfun1() # prints: \"LOCAL Value\"\nprint(val) # prints: \"LOCAL Value\"\n</code></pre> <ul> <li>Case 4: You can make a variable inside a function global and use it in other function</li> </ul> <pre><code>def fun1():\n    global val_in_fun1\n    val_in_fun1 = \"fun1() value\"\n    fun2()\n\ndef fun2():\n    print (\"Fun2() val = \",val_in_fun1)\n\nfun1()\nprint(\"Global val = \", val_in_fun1)\n\n# OUPUT:\n# Fun2() val =  fun1() value\n# Global val =  fun1() value\n</code></pre> <ul> <li>Case 5: You CANNOT call a global function, then create a local variable.</li> </ul> <pre><code>val = \"GLOBAL Value\"\n\ndef fun1():\n    print(val) # Output ERROR\n    val = \"LOCAL Value\"\n\n\nfun1()\nprint(\"Global val = \", val)\n</code></pre> <p>Other examples:</p> <pre><code>val = \"GLOBAL Value\"\n\ndef fun1():\n    global val \n    val = \"LOCAL Value\"\n    print (\"local 1 = \", val)\n    fun2()\n\ndef fun2():\n    global val \n    val = \"LOCAL 2 Value\"\n    print (\"local 2 = \", val)\n\nfun1()\nprint(\"Global val = \", val)\n</code></pre> <p>After all said and done its best practice to let function interact or send/receive value through each other from parameters and return values</p>"},{"location":"python_docs/#exception-handling","title":"Exception Handling","text":"<p>Exception helps you avoid crashing out your program when its being run</p> <pre><code>def divide(a, b):\n    try:\n        return a / b\n\n    except ZeroDivisionError:\n        return \"ZeroDivError:: Cannot have a divisor of Zero\"\n\n    except TypeError:\n        return \"TypeError::value must be integer or float\"\n\nprint(divide(6, b = 2))\nprint(divide(12, 0))\nprint(divide(11, 34))\nprint(divide(\"112\", 3))\nprint(divide(88, 12))\n</code></pre> <p>Result:</p> <pre><code>3.0\nZeroDivError:: Cannot have a divisor of Zero\n0.3235294117647059\nTypeError::value must be integer or float\n7.333333333333333\n</code></pre>"},{"location":"python_docs/#a-short-program-zigzag","title":"A Short Program: Zigzag","text":"<pre><code>import time, sys\n\n# how many space to indent\nindent = 0 \n\n# Whether indent is increasing or not\nindentIncreasing = True \n\ntry:\n    while True: # while main prog is runnig\n        print(' ' * indent, end ='')\n        print(\"***********\")\n        time.sleep(0.1) # pause for 0.1 of a second\n\n        if indentIncreasing:\n            # increase the number of spaces\n            indent += 1\n            if indent == 10:\n                # change direction:\n                indentIncreasing = False\n        else:\n            # Decrease the number of spaces:\n            indent -= 1\n            if indent == 0:\n                # change direction:\n                indentIncreasing = True\n\n\nexcept KeyboardInterrupt: # When user press CTRL + C\n    sys.exit()\n</code></pre>"},{"location":"python_docs/#basics-with-time-and-date","title":"basics with time and date","text":"<pre><code>import datetime as dt\n\nnow = dt.datetime.now()\nprint(now) # 2024-09-29 19:28:48.991303\nprint(now.date()) # 2024-09-29\nprint(now.day) # 29\nprint(now.month) # 9\nprint(now.year) # 2024\n\nprint(now.time()) # 19:28:48.991303\nprint(now.time().hour) # 19\nprint(now.time().minute) # 28 \nprint(now.time().second) # 48\nprint(now.time().microsecond) # 0.991303\n\n# NOTE: Weekdays starts with zero index so monday =&gt; 0, sunday =&gt; 6\nprint(dt.datetime.now().weekday()) # \n\n#  CREATING A NEW DATE\nmy_birth_date = dt.datetime(year=1991, month=4, day=12, hour=20, minute=45, second=31)\nprint(my_birth_date) # 1991-04-12 20:45:31\n\n\nimport datetime as dt\n\nname = input('type your name :' )\nage = input('My age:')\nmonth = input('month number: ')\n\nmonths = ['jan', 'feb', 'march', 'apr', 'may', 'jun',\\\n           'jul', 'Aug','sep', 'oct', 'nov', 'dec']\nbirth_year = dt.datetime.now().year - int(age)\n\nprint(\"my name is {0} and I was born in month of {1} in the year {2}\"\\\n      .format(name, months[int(month) - 1], birth_year))\n</code></pre>"},{"location":"python_docs/#working-with-string-format","title":"Working with string format","text":"<p>simple string format, put <code>f'{content of string}</code>.</p> <pre><code>game_name = 'Alphalt 9'\nuser_name = 'Adeoye'\nstr1 = f\"My name is {user_name}, best game -&gt; {game_name}\"\n\nprint(str1)\n</code></pre> <p>Some more python basic string function examples</p> <pre><code>method_name = \"The method name is the name of company\"\n\nprint(len(method_name))\nprint(method_name.upper())\nprint(method_name.lower())\nprint(method_name.title())\n\nprint(method_name.find('name')) # Return the index\nprint(method_name.replace('name', 'age'))\n\nprint('name' in method_name) # Returns true or false\nprint('school' in method_name)\n</code></pre> <p></p> <p>Using the format string method.</p> <pre><code>weight_in_pds = input('What is your weight in pounds: ')\n\nweight_in_kg = int(weight_in_pds) * 0.45359237\n\nprint('''if your weight in pd is {0:.3f},your weight in kg is {1:.2f}\n      '''.format(int(weight_in_pds),weight_in_kg))\n</code></pre>"},{"location":"python_docs/#simple-for-loop-demo","title":"Simple for loop demo","text":"print F as x<pre><code>numbers = [5, 2, 5, 2, 2]\n\n# Works for just py\nfor x in numbers:\n    print('x' * x)\n\n# in case of other lang\n  for x in numbers:\n    output = \"\"\n    for xi in range(x+1):\n        output += 'x'\n    print(output)\n</code></pre> <p>The Result is\\ </p>"},{"location":"python_docs/#some-list-methods","title":"Some list methods","text":"<pre><code>elist = [300, 540,  99 ,  1110, 10, 125, 44, 99]\n\nelist.append(1104) # add to end\nprint('append: ',elist)\n\nelist.insert(0, 51) # add at the beginning\nprint('insert: ',elist)\n\nelist.remove(99) # remove the first occurrence of item\nprint('remove: ',elist)\n\nelist.pop() # remove item at the last index\nprint('pop : ', elist)\n\nelist.pop(2) # remove item at index specified\nprint('pop index : ', elist)\n\nelist.clear() # removes all elements in the list\nprint('clear: ',elist)\n</code></pre>"},{"location":"python_docs/#more-list-methods","title":"more list methods","text":"<pre><code>elist = [300, 540,  99 ,  1110, 10, 125, 44, 99]\n\n# checking for the index of element\nelist.index(34) # returns ERROR if absent\n\n# instead check if it is in the list first\nitem = 1110\nif item in elist :print ('item index: ',elist.index(item))\nelse : print('item not in list')\n\ncount =  elist.count(99) # count the occurence\nprint('count', count )\n\nelist.sort() # sort order of ascending\nprint(elist)\n\nelist.reverse() # sort order of descending\nprint(elist)\n</code></pre> <p>Result: </p>"},{"location":"python_docs/#simple-function-to-remove-all-occurence-in-a-list","title":"Simple function to remove all occurence in a list","text":"<pre><code># version 1 - remove all occurence\nelist = [300, 540,  99 ,  1110, 10, 125, 44, 99]\n\ndef remove_all_occurence(list_of_items, item):\n    for it in list_of_items:\n        if it == item:\n            list_of_items.remove(it)\n    return list_of_items\n\n\nprint(remove_all_occurence(elist, 99))\n\n# version 2 - remove all occurence\ntest_list = [1, 3, 4, 6, 5, 1]  \nele=1 \nx=[j for i,j in enumerate(test_list) if j!=ele]  \nprint(x)\n</code></pre>"},{"location":"python_docs/#function-to-remove-duplicate","title":"function to remove duplicate","text":"<pre><code>elist = [300, 540,  99 ,  1110, 10, 125, 44, 99, 34, 67, 99, 112 , 1110]\n\ndef remove_duplicate(list_of_items):\n\n    unique_items = []\n\n    for it in list_of_items:\n        # if not already in unique add it\n        if it not in unique_items: \n            unique_items.append(it)\n\n    return unique_items\n\nprint(remove_duplicate(elist))\n</code></pre>"},{"location":"python_docs/#dictionary-in-python","title":"Dictionary in python","text":"<p>Each key should be unique in python dictionary.\\  Just like they way the words in a lang. dictionary are unique</p> <pre><code>customer = {\n    \"name\" : \"Simon Jessie\",\n    \"age\": 34,\n    \"reg_date\": \"20-04-2019\",\n    \"cust_id\" : 1022302,\n    \"is_active\": True,\n}\n\n# creating a new item and assigning a new dict into it\ncustomer['cart_content']  = {0: \"rifle rice\", 1: \"dodo beans\", 12: \"Atta\" }\n\nprint(customer['cart_content'][12])\nprint(customer['reg_date'])\n\n# This throws **ERROR** its not part of list\nprint(customer['total_purchase']) \n\n# This returns 'None' instead \nprint(customer.get(\"total_purchase\"))\n\n# This returns 0.0, cause we are setting default value\nprint(customer.get(\"total_purchase\", 0.0))\n</code></pre>"},{"location":"python_docs/#dictionary-demo-exercise-digit-to-word","title":"Dictionary Demo Exercise - digit to word","text":"<pre><code> input_data = input('phone number: ')\n\nnumber_to_words = {\n    \"0\": \"Zero\", \"1\": \"One\", \"2\" : \"Two\", \"3\" : \"Three\", \"4\": \"Four\"\n}\n\n# method I\nnew_number = []\nfor digit in input_data:\n    new_number.append(number_to_words.get(digit, \"*\"))\n\nprint(\" \".join(new_number))\n\n#method II\nword_number = \"\"\nfor digit in input_data:\n    word_number += number_to_words.get(digit, \"*\") + \" \"\n\nprint(word_number)\n</code></pre> <p>result: </p>"},{"location":"python_docs/#dictionary-demo-exercise-emoji-converter","title":"Dictionary Demo Exercise - Emoji Converter","text":"<pre><code>message = input('&gt;')\n\nwords = message.split(\" \")\n\nEmoji_coverter = {\n    \":}\" :\"\ud83d\ude01\",  \";)\": \"\ud83d\ude09\",  \":(\" :\"\u2639\ufe0f\",  \":o\": \"\ud83d\ude2f\"\n}\n\noutput = \"\"\n\nfor word in words:\n    output += Emoji_coverter.get(word, word) + \" \"\n\nprint(output)\n</code></pre>"},{"location":"python_docs/#basics-of-function-position-and-keyword-args","title":"Basics of function POSITION and KEYWORD ARGS","text":"<pre><code># There are four PARAMETERS in the function\ndef student_details(name, nickname=\"\", age=45, score=0):\n    print(\"============DETAILS=============\")\n    print(f\"My name is {name}\")\n    print(f\"My nickname is {nickname}\")\n    print(f\"I score {score} in my exam at age {age}\\n\") \n\n# using POSITIONAL arguments only\nstudent_details(\"segun\", \"sege\", 31, 50.5)\n\n# using POSITIONAL arguments and KEYWORD arguments\n# Keyword argument is useful for clearity of what is being passed\n# ERROR will occur if A Positional arg. does not preceed keyword arg.\nstudent_details(\"Omotola\", nickname=\"Tommy\", age=13, score=110)\n\n# Order of KEYWORD args does not matter\nstudent_details(score = 0, name=\"kafayat\",  age= 32, nickname=\"Kpbbp\")\n</code></pre>"},{"location":"python_docs/#pathlibpath-and-modules-in-python","title":"Pathlib/Path and Modules in Python","text":"<pre><code>import ecommerce.cart.carter as ec\nimport user_details.user.create_user as cu\n\n\nec.py_carter()\ncu.user(\"Adeoye\")\nprint('===================')\n\nfrom pathlib import Path\n\npath = Path()\nfor file in path.glob(\"**/*.py\"):\n    print(file) \n</code></pre>"},{"location":"python_docs/#object-oriented-programming-oop","title":"Object Oriented Programming (OOP)","text":""},{"location":"python_docs/#open-and-writing-to-file","title":"Open and writing to file","text":"<pre><code># for read files\nwith open(\"dir/to/file.txt\", mode=\"r\") as file:\n    content = file.read() # or file.readlines()\n\n# for writing\nwith open(\"dir/to/file.txt\", mode=\"w\") as file:\n    file.write(\"this to write\") \n    # it creates a new file is file not exist\n\nwith open(\"dir/to/file.txt\", mode=\"a\") as file:\n    file.write(\"Add to content\") \n    # same as write but append the text to end of line\n</code></pre>"},{"location":"python_docs/#working-with-csv","title":"Working With CSV","text":"<p>The basic way to work with csv in python is to use the in-built <code>csv module</code> with python.</p> <pre><code>import csv\n\nwith open('day25-read-csv/weather_data.csv') as data_file:\n    data = csv.reader(data_file)\n    for row in data:\n        print(row)\n</code></pre>"},{"location":"python_docs/#extracting-data","title":"Extracting data","text":"<p>This list out the data in the csv as list</p> <pre><code>data_row =[]\nwith open('day25-read-csv/weather_data.csv') as data_file:\n    data = csv.reader(data_file)\n    for row in data:\n        print(row)\n        data_row.append(row)\n</code></pre> <p></p> <p>Extract all second column (temperature) excluding the first row</p> <pre><code># method 1: extract all second column\nprint ([temp_data[1] for temp_data in data_row[1:]])\n\n# method 2: much longer but easier to understand\ntemperatures = []\nfor temp in data_row[1:]:\n    temperatures.append(temp[1])\n\nprint(temperatures)\n</code></pre> <p></p>"},{"location":"python_docs/#working-with-pandas","title":"Working with Pandas","text":"<p><pre><code>import pandas as pd\n\ndata = pd.read_csv(\"day25-read-csv/weather_data.csv\")\nprint(data)\nprint(data['temp'])\nprint(type(data)) # DataFrame &lt;class 'pandas.core.frame.DataFrame'&gt;\nprint(type(data['temp'])) # Series(colums) &lt;class 'pandas.core.series.Series'&gt;\nprint(type(data[data['day'] == 'Monday'])) # &lt;class 'pandas.core.frame.DataFrame'&gt;\n</code></pre> OUTPUT DATA </p>"},{"location":"python_docs/#convert-csv-to-dictionary","title":"convert csv to dictionary","text":"<pre><code>data = pd.read_csv(\"day25-read-csv/weather_data.csv\")\nprint(data.to_dict())\n\n'''\nOUTPUT:\n{'day': {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}, \n\n'temp': {0: 12, 1: 14, 2: 15, 3: 14, 4: 21, 5: 22, 6: 24}, \n\n'condition': {0: 'Sunny', 1: 'Rain', 2: 'Rain', 3: 'Cloudy', 4: 'Sunny', 5: 'Sunny', 6: 'Sunny'}}\n'''\n</code></pre>"},{"location":"python_docs/#getting-mean-max","title":"Getting mean, max","text":"<pre><code>data = pd.read_csv(\"day25-read-csv/weather_data.csv\")\n\nprint(data['temp'].to_list())\n\n# finding the average\nprint(data['temp'].mean())\nprint(data['temp'].max())\n</code></pre> <p>output data:\\ </p>"},{"location":"python_docs/#treating-data-series-like-an-object","title":"Treating Data series like an object","text":"<pre><code>import pandas as pd\n\ndata = pd.read_csv(\"day25-read-csv/weather_data.csv\")\n\nprint(data.condition)\nprint(data[data.day == \"Wednesday\"])\n</code></pre>"},{"location":"python_docs/#getting-data-of-the-max-temperature","title":"Getting data of the max temperature","text":"<pre><code>data = pd.read_csv(\"day25-read-csv/weather_data.csv\")\nprint(data[data.temp == data.temp.max()])\n</code></pre>"},{"location":"python_docs/#creating-a-dataframe-from-stratch","title":"Creating a DataFrame from stratch","text":"<pre><code># creating DataFrame from scratch\nmovie_dict = {\n    'movie': [\"A to Z\", \"Movers \", \"Born to Live\"],\n    'release_date': [1997, 2012, 2023],\n    'rating' : [9.5, 1.4, 8.8]\n}\n\n# create data from movie dictionary\nmovie_data = pd.DataFrame(movie_dict)\n\n# Display movie data\nprint(movie_data)\n\nprint(movie_data[\"rating\"].loc[2]) # print index 2(8.8) \n# convert it to csv and save in directory\nmovie_data.to_csv('day25-read-csv/movie_data.csv')\n</code></pre>"},{"location":"python_docs/#list-comprehension-in-python","title":"List Comprehension in python","text":"<p>List comperesion applys to :</p> <ul> <li><code>list</code></li> <li><code>range</code></li> <li><code>string</code></li> <li><code>tuple</code></li> </ul> <p>List comprehension with numbers</p> <pre><code>list1 =[2, 3.0, 5, 3, 4.0, 33]\n\n# square each in list\nmult = [x*x for x in list1]\nprint(mult)\n\n# Adding if statement\nint_only = [i for i in list1 if type(i) is int ]\nprint(int_only)\n\n''' RESULT:\n[4, 9.0, 25, 9, 16.0, 1089]\n[2, 5, 3, 33]\n'''\n</code></pre> <p>List comprehension with strings</p> <pre><code>my_name = \"Adegbite\"\nletters = [letter for letter in my_name]\nprint(letters)\n\nprint([x*2 for x in range(1, 6)])\n\n# RESULT: ['A', 'd', 'e', 'g', 'b', 'i', 't', 'e']\n\nnames = [\"Freddie\", \"Alex\", \"Beth\", \"Dave\", \"Carolina\", \"Titilayo\", \"Tolulope\"]\n\nupper_long_names = [long_names.upper() for long_names in names if len(long_names) &gt; 5]\nprint(upper_long_names)\n\n# RESULT: ['FREDDIE', 'CAROLINA', 'TITILAYO', 'TOLULOPE']\n</code></pre>"},{"location":"python_docs/#list-comprehension-example","title":"List comprehension example","text":"<pre><code>with open(\"./day26-list-comp/file1.txt\") as f1:\n    #conten1:  [111, 3, 6, 5, 8, 33, 12, 7, 4, 72, 2, 42, 13]\n    content1 = [c.strip() for c in f1.readlines()]\n\nwith open(\"./day26-list-comp/file2.txt\") as f2:\n    #content2: [3, 6, 13, 8, 7, 89, 12, 3, 33, 34, 1, 344, 42,1090, 111]\n    content2 = [c.strip() for c in f2.readlines()]\n\n# check if \nsame_content = [int(x) for x in content1 if x in content2]\n\nprint(same_content)\n\"\"\"\nRESULT: [111, 3, 6, 8, 33, 12, 7, 42, 13]\n\n\"\"\"\n</code></pre>"},{"location":"python_docs/#using-zip-in-list-comprehension","title":"Using Zip in list comprehension","text":"<pre><code>with open(\"./day26-list-comp/file1.txt\") as f1:\n    content1 = [int(c.strip()) for c in f1.readlines()]\n\nwith open(\"./day26-list-comp/file2.txt\") as f2:\n    content2 = [int(c.strip()) for c in f2.readlines()]\n\nprint(content1)\nprint(content2)\n\nprint([ (x,y) for x, y in zip(content1, content2)])\n\n\"\"\"=============RESULT====================\n\n[(111, 3), (3, 6), (6, 13), (5, 8), (8, 7), (33, 89), (12, 12), (7, 3), (4, 33), (72, 34), (2, 1), (42, 344), (13, 42)]\n\"\"\"\n</code></pre>"},{"location":"python_docs/#dictionary-comprehensions","title":"Dictionary comprehensions","text":"<p>Here is the formats for dictionary comprehension in python</p> <p>Format using a list,string,range or tuple type as iterable: <code>{new_key:new_value for item in list_n}</code></p> <p>Format using a dict type as iterable: <code>{new_key:new_value for (key, value) in dict_n.items()}</code></p> <pre><code>import random as r\n\n#{new_key:new_value for item in list_n}\nscores = [30, 56, 44, 34, 70, 99]\nprint({chr(r.randint(1, 1000)):score for score in scores})\n\n# {new_key:new_value for (key, value) in dict_n.items()}\nstudents ={60: \"alix\", 200:\"alesxa\", 123:\"Gemini\"}\nprint({v.title():k**2 for (k, v) in students.items()})\n\n'''\nRESULT:\n\n{'\u0101': 30, '\u01d7': 56, '\u02eb': 44, '\\x85': 34, '\u00cc': 70, '\u00cd': 99}\n{'Alix': 3600, 'Alesxa': 40000, 'Gemini': 15129}\n'''\n</code></pre> <p>Another example of dictionary comprehension</p> <pre><code>sentence = \"What is the Air-mac speed of a unicorn glider\"\nprint({word:len(word) for word in sentence.split(\" \")})\n\n'''\nRESULT:\n{'What': 4,  'is': 2, 'the': 3,\n 'Air-mac': 7, 'speed': 5, 'of': 2, \n 'a': 1, 'unicorn': 7, 'glider': 6}\n\n'''\n</code></pre>"},{"location":"python_docs/#using-dictionary-comprehension-with-pandas","title":"Using Dictionary comprehension with Pandas","text":"<p>Example code look like so <code>for (index , row) in my_data_frame.iterrows():</code> From this, you can access the index and individual row cells. for example <code>row.name or row[\"name\"]</code> as you would previously.</p> <pre><code>nato_data = pd.read_csv(\"./day26-list-comp/nato_alphabet.csv\")\n\nprint({row.letter: row.code for(index, row) in nato_data.iterrows() })\n</code></pre>"},{"location":"python_docs/#working-with-many-positional-argumentsargs","title":"Working with Many Positional Arguments(*args)","text":"<p>Here you can add as many values as you want. By defaults it is all packed together in a <code>tuple</code></p> <pre><code>def add(*args):\n    sum = 0\n    for n in args:\n        sum += n\n    return sum\n\nprint(add(23, 43, 3, 2, 43))\n\n# RESULT : 114\n</code></pre>"},{"location":"python_docs/#working-with-many-keyword-arguments-kwargs","title":"Working with Many Keyword Arguments (**kwargs)","text":"<p>Here you input as many key, value pairs in a function call as <code>func(key1=val1, key2=val2, key3=val3, ... )</code>.</p> <p>This is automatically packed into a  <code>dictionary</code>.</p> <pre><code>def calc(init_val = 0,**kwargs):\n    # loop through the content\n    for key, val in kwargs.items():\n        print(key, val)\n\n    # display type and content\n    print(type (kwargs), kwargs)\n    init_val+= kwargs.get(\"add\")\n    init_val*= kwargs.get(\"mul\")\n    init_val/= kwargs.get(\"div\")\n\n    return init_val\n\n\nprint(calc(add = 15, div=30, mul=60)\n)\n\n'''\nOUTPUT:\n&lt;class 'dict'&gt; {'add': 15, 'div': 3, 'mul': 60}\n300.0\n'''\n</code></pre> <p>More example of kwarg usage</p> <pre><code>class Car():\n    def __init__(self, **kw) -&gt; None:\n        self.name = kw.get(\"name\")\n        self.model= kw.get(\"model\")\n        self.engine_type = kw.get(\"engineType\")\n\n    def car_detail(self):\n        return f\"name- {self.name}, model - {self.model}, engine - {self.engine_type}\"\n\n\nmy_carlot = Car(name=\"MX_702\", engineType=\"VR-34-UK\")\nprint(my_carlot.car_detail())\n</code></pre>"},{"location":"python_docs/#normalizing-any-number","title":"Normalizing Any Number","text":"<p>If for instance you have a range of number from 0 - 777:</p> <ul> <li><code>0</code> will be the minimum range</li> <li><code>1</code> will be the interval i.e <code>(1-0)/(777-0) = 1/777 =  0.00128</code></li> <li><code>211</code> will then be <code>(221-0)/(777-0) = (221) x 1/777(interval) =0.28442</code></li> <li><code>700</code> will be closer to 1.0 <code>(700-0)/(777-0) = (221) x 1/777(interval) =0.90009</code></li> </ul> <pre><code>def normalize(self, number, min_num, max_number):\n        return (number - min_num)/ (max_number - min_num)\n</code></pre>"},{"location":"python_docs/#os-path-loading-files-in-path","title":"OS PATH Loading Files in path","text":""},{"location":"python_docs/#loading-relative-absolute-path-basename","title":"Loading Relative, Absolute Path &amp; basename:","text":"<pre><code># Relative path\n&gt;&gt;&gt; os.path.relpath('./') \n'.'\n&gt;&gt;&gt; os.path.relpath('image_timer\\imgs') \n'image_timer\\\\imgs'\n\n# Absolute Path\n&gt;&gt;&gt; os.path.abspath('./') \n'C:\\\\Projects\\\\python_projects\\\\basics_to_advance'\n\n&gt;&gt;&gt; os.path.abspath('image_timer\\imgs')  \n'C:\\\\Projects\\\\python_projects\\\\basics_to_advance\\\\image_timer\\\\imgs'  \n\n# File name (base name)\n&gt;&gt;&gt; os.path.basename(\"./image_timer/imgs/amogo.png\") \n'amogo.png'\n\n&gt;&gt;&gt; a = os.path.basename(\"./image_timer/imgs/amogo.png\") \n&gt;&gt;&gt; os.path.splitext(a) \n('amogo', '.png')\n</code></pre> <p>List all the files or folders in the directory</p> <pre><code>&gt;&gt;&gt; os.listdir('./docs') \n['ai-dev-docs', 'blender-docs', 'cmd-docs', ...]\n\n&gt;&gt;&gt; os.listdir('./docs/cpp_docs') \n['img', 'index.md', 'linkedlist_index.md']\n\n&gt;&gt;&gt; os.listdir('./image_timer/imgs')  \n['amogo.png', 'dlogo.png', 'img001.png', 'miem.png', 'sdgd.png']\n</code></pre>"},{"location":"python_docs/#load-file-list-using-oslistdir-and-ospathjoin","title":"Load File list using os.listdir and os.path.join","text":"<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; dir = \".\\image_timer\\imgs\" \n&gt;&gt;&gt; [os.path.join(dir, img) for img in os.listdir(dir)] \n\n['.\\\\image_timer\\\\imgs\\\\amogo.png', '.\\\\image_timer\\\\imgs\\\\dlogo.png', '.\\\\image_timer\\\\imgs\\\\img001.png', '.\\\\image_timer\\\\imgs\\\\miem.png', '.\\\\image_timer\\\\imgs\\\\sdgd.png']\n</code></pre>"},{"location":"python_docs/#load-file-list-using-globglob","title":"Load File list using glob.glob","text":"<pre><code>&gt;&gt;&gt; [img for img in glob.glob(\".\\image_timer\\imgs\\*.png\")] \n['.\\\\image_timer\\\\imgs\\\\amogo.png', '.\\\\image_timer\\\\imgs\\\\dlogo.png', '.\\\\image_timer\\\\imgs\\\\img001.png', '.\\\\image_timer\\\\imgs\\\\miem.png', '.\\\\image_timer\\\\imgs\\\\sdgd.png']\n</code></pre>"},{"location":"python_docs/#creating-setters-and-getters-in-python-class","title":"Creating Setters and Getters in Python class","text":"<pre><code>class ImageViewer():\n\n    def __init__(self, image_name=\"\", thumbnail_image=None, full_image=None, \n                 image_button=None):\n\n        self._name = image_name\n        self._thumb_img = thumbnail_image\n        self._full_img = full_image\n        self._img_btn = image_button\n\n    @property # Attribute / Getter \n    def name(self):return self._name\n    @name.setter\n    def name(self, val): self._name = val\n\n    @property\n    def full_img(self): return self._full_img\n    @full_img.setter\n    def full_img(self, val): self._full_img = val\n\n\n    @property\n    def thumb_img(self): return self._thumb_img\n    @thumb_img.setter\n    def thumb_img(self, val): self._thumb_img = val\n\n    @property\n    def img_btn(self): return self._img_btn\n    @img_btn.setter\n    def img_btn(self, val): self._img_btn = val\n</code></pre>"},{"location":"python_docs/#dumping-loading-updating-to-json-file","title":"Dumping / Loading / Updating to Json file","text":"<pre><code>with open(f\"{app_dir}/data.json\", \"r\") as data_file:\n            json.dump(new_data, data_file, indent=4) # 'w' mode\n            data = json.load(data_file) # 'r' mode\n            print(data, type(data)) # &lt;class 'dict'&gt;\n</code></pre>"},{"location":"python_docs/#try-except-else-and-finally","title":"Try, Except, Else and Finally","text":"<p>try : <code>Something that might cause an exception</code> except: <code>Do this if THERE WAS an exception</code> else: <code>Do this if THERE WERE NO exception</code> finally: <code>Do this NO MATTER WHAT</code></p> <pre><code>app_dir = \"day30-pwd-manager-json\"\ndict1 = {}\nlist1 = []\n\n\ntry:\n    with open(f\"{app_dir}/some_file.text\", \"r\") as fd:\n        fd.read()\n\n    # get key \n    print(dict1[\"a\"])\n\n    # out of range index\n    print(list1[3])\n\n    # type error\n    val = \"string \" + 45\n\nexcept FileNotFoundError as fnferror:\n    print(f\"{fnferror} file not found\")\n\n\nexcept KeyError as error: # for Dictionary key that does not exist\n    print(f\"Key {error} does not exist\")\n\nexcept IndexError as error: # for index that does not exist in list\n    print(f\"{error}\")\n\nexcept TypeError as error:\n    print(f\"{error}\")\n</code></pre> <p>Note: Error will only be caught one at a time. Just like when you program throws a normal except other code line does not get executed.</p> <p>Another Example:</p> <pre><code>facebook_posts = [\n    {'Likes': 21, 'Comments': 2},\n    {'Likes': 13, 'Comments': 2, 'Shares': 1},\n    {'Likes': 33, 'Comments': 8, 'Shares': 3},\n    {'Comments': 4, 'Shares': 2},\n    {'Comments': 1, 'Shares': 1},\n    {'Likes': 19, 'Comments': 3}\n]\n\n\ndef count_likes(posts):\n\n    total_likes = 0\n    for post in posts:\n        try:\n            total_likes = total_likes + post['Likes']\n        except KeyError:\n            total_likes = total_likes + post.get('Likes', 0) # set default of zero\n\n    return total_likes\n\ncount_likes(facebook_posts)\n</code></pre>"},{"location":"python_docs/#raising-your-own-exception","title":"Raising your own exception","text":"<p>Example:</p> <pre><code>h = float(input(\"height(m): \"))\nw = float(input(\"weight(kg): \"))\n\n\nif h &gt; 4.0:\n    raise ValueError(\"Human height should not exceed 4 meters\")\nelif w &gt; 1000:\n    raise ValueError(\"Human weight should not excceed 1000 kg\")\nelse:\n    bmi = w / h **2\n    print(f\"Your bmi is {bmi}\")\n</code></pre>"},{"location":"python_docs/#sending-email-with-smtplib","title":"Sending Email with smtplib","text":"<p>smtp - Simple Mail Transfer Protocol</p> <pre><code>import smtplib\n\n\"\"\"\nGmail: smtp.gmail.com\nHotmail: smtp.live.com\nOutlook: outlook.office365.com\nYahoo: smtp.mail.yahoo.com\n\"\"\"\n\nmy_email = \"adegbitefeyisetan@gmail.com\"\nmy_password = \"xxxxxxxxxxxxx\"  # App password generated from google account\nwith smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as connection:\n    # connection.starttls() # make connect secure\n    connection.login(user=my_email, password=my_password)\n    connection.sendmail(from_addr=my_email, \n                        to_addrs=\"adeoye-hm-test001@hotmail.com\",\n                        msg=\"Subject:Meet for Tomorrow\\n\\nDear Adeoye,\\n\\\n                            This is to remind you of our meeting tomorrow\\\n                                Best Regards.\")\n</code></pre>"},{"location":"python_docs/#monday-motivation-email","title":"Monday motivation Email","text":"<pre><code>import smtplib, random\nimport datetime as dt\n\n\nmy_email = \"adegbitefeyisetan@gmail.com\"\nmy_password = \"xxxxxxxxxxxxx\"  # App password generated from google account\n\nnow = dt.datetime.now()\nweekday = now.weekday()\n\nif weekday == 0:\n    with open(\"./day32-email-datetime/quotes.txt\") as quote_file:\n        quotes = quote_file.readlines()\n        quote = random.choice(quotes)\n\n    with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as connection:\n        # connection.starttls() # make connect secure\n        connection.login(user=my_email, password=my_password)\n        connection.sendmail(from_addr=my_email, \n                            to_addrs=my_email,\n                            msg=f\"Subject:Morning Motivation\\n\\n{quote}\")\n</code></pre>"},{"location":"python_docs/#birthday-wisher-automation","title":"Birthday Wisher Automation","text":"<pre><code>import smtplib, pandas,random\nfrom datetime import datetime\n\nsrc_dir = \"zbirthday-wisher\"\nmy_email = \"adegbitefeyisetan@gmail.com\"\nmy_password = \"xxxxxxxxxxxxx\" # App password generated from google account\n\n\ntoday_tuple = (datetime.now().month, datetime.now().day)\n\ndata = pandas.read_csv(f\"{src_dir}/birthdays.csv\", )\n\nbirthdays_dict ={(data_row[\"month\"], data_row[\"day\"]):data_row for (index, data_row) in data.iterrows()}\n\nif today_tuple in birthdays_dict:\n    birthday_person = birthdays_dict[today_tuple]\n    file_path = f\"{src_dir}/letter_templates/letter_{random.randint(1, 3)}.txt\"\n    with open(file_path) as letter_file:\n        content = letter_file.read()\n        content = content.replace(\"[NAME]\", birthday_person[\"name\"] )\n\n    with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as connection:\n        connection.login(user=my_email, password=my_password)\n        connection.sendmail(from_addr=my_email, \n                            to_addrs=birthday_person[\"email\"],\n                            msg=f\"Subject:Happy Birthday\\n\\n{content}\")\n        print(\"Mail Sent successfully.\")\nelse:\n    print(\"no birthday match found\")\n</code></pre>"},{"location":"python_docs/#api-end-points-and-parameters","title":"API, End points and Parameters","text":"<p>Response codes: </p> <pre><code>from datetime import datetime\nimport smtplib, requests, time\n\nMY_LAT = 1.2243\nMY_LNG = 52.432\nmy_email = \"adegbitefeyisetan@gmail.com\"\nmy_password = \"fovk opsk spir tdil\"\n\ndef is_iss_overhead():\n\n    response = requests.get(url=\"http://api.open-notify.org/iss-now.json\")\n    response.raise_for_status()\n\n    data = response.json()\n    # print(data)\n    print(data[\"timestamp\"])\n\n    iss_lat = float(data[\"iss_position\"][\"latitude\"])\n    iss_lng = float(data[\"iss_position\"][\"longitude\"])\n\n    if MY_LAT-5 &lt;= iss_lat &lt;= MY_LAT+5 and MY_LNG-5 &lt;= iss_lng &lt;= MY_LNG+5:\n        return True\n\n\ndef is_night():\n    params = {\"lat\": MY_LAT,\"lng\": MY_LNG, \"formatted\": 0}\n\n    res = requests.get(\"https://api.sunrise-sunset.org/json\", params=params)\n    res.raise_for_status()\n    data = res.json()\n    print(data)\n    sunrise = int(data['results']['sunrise'].split[\"T\"][1].split(\":\")[0])\n    sunset = int(data['results']['sunset'].split[\"T\"][1].split(\":\")[0])\n\n    time_now = datetime.now().hour\n\n    if time_now &gt;= sunset or time_now &lt;= sunrise:\n        return True\n\n\nwhile True:\n    # Send email \n    if is_iss_overhead() and is_night():\n        with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as connection:\n            connection.login(user=my_email, password=my_password)\n            connection.sendmail(from_addr=my_email, \n                                to_addrs=my_email,\n                                msg=f\"Subject:Look up for ISS\\n\\nQuickly check the sky the ISS is above you now, Hurry!!!\")\n            print(\"Mail Sent successfully.\")\n\n    time.sleep(60) # check every sixty seconds\n</code></pre>"},{"location":"python_docs/#api-get-post-put-and-delete","title":"API , GET(), POST(), PUT() and DELETE()","text":"<p>The <code>request.get()</code> is to recieve info from the api The <code>request.post()</code> is to send info to the api</p> <pre><code>import requests\nfrom datetime import datetime\n\nTOKEN = \"234sfosdwao3402\"\nUSERNAME = \"adeoye\"\nGRAPH_ID = \"code1\"\n\nheader_info ={\n    \"X-USER-TOKEN\": TOKEN} \n\n\n# Making a POST request to create user\nPIXELA_ENDPOINT=\"https://pixe.la/v1/users\"\nuser_params= {\n    \"token\": TOKEN,\n    \"username\": USERNAME,\n    \"agreeTermsOfService\":\"yes\",\n    \"notMinor\":\"yes\"}\n# response = requests.post(url=f\"{PIXELA_ENDPOINT}\", json=user_params)\n# print(response.text)\n\n\n\n# Making a POST to create a new graph\nGRAPH_ENDPOINT = f\"{PIXELA_ENDPOINT}/{USERNAME}/graphs\"\ngraph_params = {\n    \"id\":GRAPH_ID,\n    \"name\":\"Coding Hours\",\n    \"unit\": \"hrs\",\n    \"type\": \"float\",\n    \"color\":\"sora\"}\n# response = requests.post(url=GRAPH_ENDPOINT, json=graph_params, headers=header_info)\n# print(response.text)\n\n\n\n# Making another post request to create the pixel points\npixel_creation_endpoint = f\"{PIXELA_ENDPOINT}/{USERNAME}/graphs/{GRAPH_ID}\"\ntoday = datetime.now()\npixel_data={\n    \"date\": today.strftime(\"%Y%m%d\"),\n    \"quantity\": \"4.0\",\n}\n# response = requests.post(url=pixel_creation_endpoint, json=pixel_data, headers=header_info)\n# print(response.text)\n\n\n# Making a PUT Requests\nthat_day = datetime(year=2024, month=7, day=27)\nupdate_endpont = f\"{PIXELA_ENDPOINT}/{USERNAME}/graphs/{GRAPH_ID}/{that_day.strftime('%Y%m%d')}\"\nnew_pixel_data ={\"quantity\":\"7.6\"}\n# response = requests.put(url=update_endpont, json=new_pixel_data, headers=header_info)\n# print(response.text)\n\n# Making a DELETE Request\ndelete_endpoint = f\"{PIXELA_ENDPOINT}/{USERNAME}/graphs/{GRAPH_ID}/{that_day.strftime('%Y%m%d')}\"\nresponse = requests.delete(url=delete_endpoint, json=new_pixel_data, headers=header_info)\nprint(response.text)\n</code></pre>"},{"location":"python_docs/#webscraping-and-beautiful-soup","title":"Webscraping and Beautiful soup","text":"<pre><code>import requests, bs4\n\nresponse = requests.get(url=\"https://news.ycombinator.com/\")\nhtml_page = response.text\n\nhtml_soup = bs4.BeautifulSoup(html_page, 'html.parser')\nprint(html_soup.title.getText()) # Hacker News\n\n# Select tag based on class\nathings_class = html_soup.find_all(\"tr\", class_=\"athing\")\nprint(athings_class)\n\n# Select class using selector\ntitleline_links_tag = html_soup.select(selector=\".titleline a\")\nprint(len(titleline_links_tag))\n</code></pre>"},{"location":"python_docs/#selenium-webscrapping","title":"Selenium Webscrapping","text":"<p>Basic launching a website</p> <pre><code>from selenium import webdriver\n\ncrome_options = webdriver.ChromeOptions()\ncrome_options.add_experimental_option(\"detach\", True)\n\ndriver = webdriver.Chrome(options=crome_options)\ndriver.get(\"https://kdp.amazon.com\")\n</code></pre>"},{"location":"python_docs/#finding-elements-in-the-webpage","title":"finding elements in the webpage","text":"<pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nimport time\n\ncrome_options = webdriver.ChromeOptions()\ncrome_options.add_experimental_option(\"detach\", True)\n\ndriver = webdriver.Chrome(options=crome_options)\ndriver.get(\"https://www.python.org\")\n\n# === find by \"NAME\" === #\nsearchbar = driver.find_element(By.NAME, value=\"q\")\nprint(searchbar.get_attribute(\"placeholder\")) # print: search\n\n# === find by \"ID\" === #\ndoc_li = driver.find_element(By.ID, value=\"documentation\")\nprint(doc_li.text) # print: \"Documentation\"\n\ntime.sleep(5) # wait 10 secs.\n\n# === find by \"CSS_SELECTOR\"\nlatest_news = driver.find_elements(By.CSS_SELECTOR, value=\".shrubbery ul li &gt; a\")\nlatest_news = [news.text for news in latest_news]\nprint(\"\\n\".join(latest_news))\n\n# === find by XPATH === #\nxpath = driver.find_element(By.XPATH, value='//*[@id=\"content\"]/div/section/div[2]/div[4]/p[2]/a')\nprint(xpath.text)\n\ntime.sleep(5) # wait 10 secs.\n\ndriver.quit()\n</code></pre>"},{"location":"python_docs/#more-example-on-css_selector","title":"More example on CSS_SELECTOR","text":"<pre><code># === find by \"CSS_SELECTOR\"\ndriver.get(\"https://www.python.org\")\n\nevent_dates = driver.find_elements(By.CSS_SELECTOR, value=\"div.event-widget ul.menu li &gt; time\")\nevent_names = driver.find_elements(By.CSS_SELECTOR, value=\"div.event-widget ul.menu li &gt; a\")\n\nevent_dates = [date.get_attribute(\"datetime\")[:10] for date in event_dates]\nevent_names = [name.text for name in event_names]\n\n# ======== METHOD 1 ======== #\nevent_data = {}\nfor date, name in zip(event_dates, event_names):\n    current_idx = event_names.index(name) # get current index on element\n    new_data = {current_idx : {date : name}} # Create a new dictionary base on index\n    event_data.update(new_data) # extend/update the dict. data\n# ========================== #\n\n\n# ======== METHOD 2 ======== #\nfor i in range(len(event_names)):\n    event_data[i] = {\n            \"time\": event_dates[i],\n            \"event\" : event_names[i]\n            }\n# ========================== #\n\n\nprint(event_data)\n\n'''\nRESULT:\n{0: {'2024-10-16': 'PyCon Panam\u00e1 2024'}, \n1: {'2024-10-16': 'Python Brasil 2024'}, \n2: {'2024-10-16': 'Python New Zealand: From virtual envs to my reality'}, \n3: {'2024-10-17': 'Swiss Python Summit 2024'}, \n4: {'2024-10-22': 'Helsinki Python meetup'}}\n'''\n\n# Another Example\nfor i in range(4):\n\n    time.sleep(random.randint(3, 6))\n    img = driver.find_element(By.CSS_SELECTOR, value=\".photo img\").get_attribute(\"src\")\n    print(f\"Image - {i+1} : {img}\")\n    next = driver.find_element(By.CLASS_NAME, value=\"page-next\")\n    next.click()\n</code></pre>"},{"location":"python_docs/#click-element-in-selenium","title":"click element in selenium","text":"<p>Method 1 - Selecting the CSS element</p> <pre><code>article_count = driver.find_element(By.CSS_SELECTOR, value=\"#articlecount a\")\narticle_count.click()\n</code></pre> <p>Method 2 - Clicking on link text</p> <pre><code>waits_link = driver.find_element(By.LINK_TEXT, value=\"Waits\")\nwaits_link.click()\n</code></pre>"},{"location":"python_docs/#entering-text-into-a-form","title":"Entering Text into a form","text":"<pre><code># Load main page\ndriver.get(\"https://www.python.org/\")\n\ntime.sleep(3)\n\nwaits_link = driver.find_element(By.NAME, value=\"q\")\nwaits_link.send_keys(\"Ipython\")\nwaits_link.send_keys(Keys.ENTER)\n\ntime.sleep(5)\n</code></pre>"},{"location":"python_docs/#example-filling-form","title":"Example Filling form","text":"<pre><code># Load main page\ndriver.get(\"https://secure-retreat-92358.herokuapp.com/\")\n\ntime.sleep(3)\n\nfname = driver.find_element(By.NAME, value=\"fName\")\nlname = driver.find_element(By.NAME, value=\"lName\")\nemail = driver.find_element(By.NAME, value=\"email\")\nsubmit_btn = driver.find_element(\"css selector\", value=\".form-signin .btn\")\n\nfname.send_keys(\"Adeoye\")\nlname.send_keys(\"Adegbite\")\nemail.send_keys(\"teobe@mailman.com\")\nsubmit_btn.send_keys(Keys.ENTER)\n\ntime.sleep(5)\n\ndriver.quit()\n</code></pre>"},{"location":"python_docs/#downloading-chunk-progress-bar-in-console","title":"Downloading Chunk Progress Bar in Console","text":"<pre><code>import time\n\ncontent_size = 1234453\ncontent_size_kb = f\"{round(content_size/1024, 2) }\"\ndone = downloaded = 0\n\nwhile downloaded &lt; content_size:\n    chunk = content_size/100 # divided the file size evenly\n    time.sleep(0.1)\n    downloaded += chunk\n    progress =f\"[{'='*(int(done/2))}|({done+1}%){round(downloaded/1024, 2)}/{content_size_kb}kb]\" \n    print(progress, end=\"\\r\")\n    done += 1\n\n    # Download is complete\n    if downloaded &gt;= content_size:\n        print(progress)\n</code></pre>"},{"location":"python_docs/#downloading-image-chunk-progroess-bar-in-console","title":"Downloading Image Chunk Progroess Bar in Console","text":"<pre><code>def download_image(url, save_as):\n\n    # download image an save in current work dir\n    res = requests.get(url, stream=True)\n\n    # Output total file size\n    total_size = int(res.headers.get('content-length', 0))\n    total_size_kb = round(total_size/1024, 2)\n    print(f\"File size - {total_size_kb}kb\")\n\n\n    done = downloaded = 0\n    with open(save_as, 'wb') as file:\n\n        # iterate over content to download\n        chunk_size = int(total_size/100)\n        for data in res.iter_content(chunk_size=chunk_size):\n            file.write(data)\n            downloaded += chunk_size\n            done += 1\n\n            # print download progress\n            progress =f\"[{'='*(int(done/2))}|({done}%){round(downloaded/1024, 2)}/{total_size_kb}]\" \n            print(progress, end=\"\\r\")\n\n\n            # Download is complete\n            if downloaded &gt;= total_size:\n                done = 100\n                progress =f\"[{'='*(int(done/2))}|({done}%){total_size_kb}/{total_size_kb}kb]\" \n                print(progress)\n</code></pre>"},{"location":"python_docs/#first-order-class-objects","title":"First order class objects","text":"<p>A first order class objects, can be passed around as arguments</p> <pre><code>def mul(x, y): return x * y\n\ndef add(x, y): return x + y\n\ndef div(x, y) : \n    try: return y / x\n    except ZeroDivisionError: print(\"cannot divide by zero\")\n\ndef math_op(func_op,val1, val2): \n    return func_op(val1, val2)\n\n# Passing a function mul, div, add as arguement\nprint(math_op(add, 23, 54))\nprint(math_op(mul, 21, 11))\nprint(math_op(div, 0, 10))\n</code></pre>"},{"location":"python_docs/#nested-function","title":"Nested function","text":"<pre><code># Nested function\n\ndef outer_function():\n    print(\"I'm outer\")\n\n    def inner_function():\n        print(\"I'm inner\")\n\n    inner_function()\n\nouter_function()\n\n# OUTPUT\n# I'm outer\n# I'm inner\n</code></pre>"},{"location":"python_docs/#a-function-can-also-return-another-function","title":"A function can also return another function","text":"<pre><code>def outer_function():\n    print(\"I'm outer\")\n\n    def inner_function():\n        print(\"I'm inner\")\n\n    return inner_function # returns the function rather than calling it\n\ninner_func = outer_function()\ninner_func() \n\n# OUTPUT\n# I'm outer\n# I'm inner\n</code></pre>"},{"location":"python_docs/#python-decorator","title":"Python decorator","text":"<pre><code># Python decorator function\n\n# A decorator function takes in a main function,\n# calls with from its wrapper funciton then\n# returns its wrapped function\nimport time\n\ndef deco_func(main_func):\n    def wrapper_func():\n        # do any operation on main function\n        time.sleep(2)\n        print(main_func() * 3)\n\n    return wrapper_func\n\n\n@deco_func\ndef hello_world():\n    return \"Ghello Deco!\\n\"\n\n@deco_func\ndef ghello_you():\n    return \"ghello Python\\n\"\n\nhello_world()\nghello_you()\n</code></pre>"},{"location":"python_docs/#decorator-example-2","title":"Decorator Example 2","text":"<pre><code>import time\n\ndef speed_calc_decorator(func):\n  def wrapper_func(*args, **kwargs):\n      # Do something\n      before_time = time.time()\n      func(*args, **kwargs)\n      time_elapse = time.time() - before_time\n      print(f\"the {func.__name__} took - {time_elapse}\")\n\n  return wrapper_func\n\n@speed_calc_decorator\ndef fast_function():\n  for i in range(1000000):\n    i * i\n\n@speed_calc_decorator\ndef slow_function():\n  for i in range(10000000):\n    i * i\n\nfast_function()\nslow_function()\n</code></pre>"},{"location":"python_docs/async_multithread/","title":"Asyncronous and Multithreading in Python","text":""},{"location":"python_docs/async_multithread/#asyncronous-programming","title":"Asyncronous Programming","text":"<p>This is a way of run program where functions are run not in the sequential manner but simultaneous, i.e at the same time.</p> <p>This is good for when a program requires or requesting from external resources and there might be downtime, wait time etc.</p> <pre><code>import time\nimport asyncio\n\nasync def order_tea():\n    print(\"ordered... tea, and waiting\")\n    await asyncio.sleep(3)\n    print(\"\\t\\t tea is done\")\n\nasync def order_rice():\n    print(\"ordered the rice... and Waiting\")\n    await asyncio.sleep(2)\n    print(\"\\t\\t Your rice is ready!!!\")\n\nasync def order_plantain():\n    print(\"Plantain ordered...frying it for you\")\n    await asyncio.sleep(4)\n    print(\"\\t\\t your plantain is ready ooo\")\n\nasync def main():\n    await asyncio.gather(order_tea(),order_rice(), order_plantain())\n\n\nif __name__ == \"__main__\":\n    s = time.perf_counter()\n    asyncio.run(main())\n    elapsed = time.perf_counter() - s\n\n    print(f\"sync-operations executed in {elapsed:0.2f} seconds.\")\n</code></pre> <p></p>"},{"location":"python_docs/flask_doc/","title":"Flask Backend Frame work doc","text":"<p>Quick start with flask</p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return \"&lt;p&gt; Hello Flask&lt;/p&gt;\"\n</code></pre> <p>To run your flask you do <code>flask --app [file_path] run</code> an example is this  <code>flask --app ./day54-webback1/main run</code></p>"},{"location":"python_docs/flask_doc/#basic-runing-with-having-to-use-cmd","title":"Basic Runing with having to use cmd","text":"<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return \"&lt;p&gt; Hello Flask&lt;/p&gt;\"\n\n@app.route('/user')\ndef user_page():\n    return \"&lt;h2&gt; This User &lt;/h2&gt;\"\n\n@app.route('/user/&lt;name&gt;/&lt;float:price&gt;')\ndef cost_page(name, price):\n    return f\"\"\"\n&lt;ul&gt;\n    &lt;li&gt; {name} : &lt;span&gt;{price}&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt; {name} : &lt;span&gt;{price*2}&lt;/span&gt;&lt;/li&gt;\n&lt;ul&gt;\n\"\"\"\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"python_docs/flask_doc/#render-html-and-css-with-render_template","title":"Render html and css with <code>render_template</code>","text":"<p>in your project directory, you need to have the follow folders:</p> <ul> <li><code>static</code> folder - this is where your images and css are located.</li> <li><code>templates</code> folder - this is where you html files are located</li> </ul> <p>Once you have that the following code can be executed:</p> server.py<pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return render_template(\"index.html\") # call the html in template\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n...\n    &lt;!-- NOTE that stytle is in \"static\" directory  --&gt;\n    &lt;link rel=\"stylesheet\" href=\"static/style.css\"&gt;\n    &lt;title&gt;Adeoye&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main class=\"main-title\"&gt;\n        &lt;div class=\"details\"&gt;\n            &lt;h2&gt;Adegbite Adeoye&lt;/h2&gt;\n            &lt;p&gt;Story Artist | Software Dev.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/main&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"python_docs/flask_doc/#example-auto-update-year","title":"EXAMPLE : Auto Update year","text":"<p> <pre><code>from flask import Flask, render_template\nimport random, datetime as dt\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index_def():\n    val = random.randint(1, 33)\n    current_year = dt.datetime.now().year\n    return render_template(\"index.html\", val = val, year= current_year)\n\nif __name__ == \"__main__\" :\n    app.run(debug=True)\n</code></pre></p> <pre><code>...\n&lt;body&gt;\n    &lt;main class=\"main-title\"&gt;\n        &lt;div class=\"details\"&gt;\n            &lt;h2&gt;Adegbite Adeoye, {{val}} &lt;/h2&gt;\n            &lt;p&gt;Story Artist | Software Dev.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/main&gt;\n\n    &lt;footer class=\"foot-title\"&gt;\n        &lt;p&gt;Copyright {{year}}. Built by Adeoye&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"python_docs/flask_doc/#example-2-request-from-agify-genderize","title":"EXAMPLE 2: Request from Agify, Genderize","text":"server.py<pre><code>from flask import Flask, render_template\nimport  requests, json\n\n\napp = Flask(__name__)\n\n@app.route('/guess/&lt;name&gt;')\ndef guess_page(name):\n\n    result = \"\"\n    gender = age = prob = None\n    try :\n            # Age data from agify\n        res = requests.get(f\"https://api.agify.io?name={name}\")\n        # result = json.loads(res.text)\n        result = res.json()\n        age = result['age']\n\n        # Gender data from genderize\n        res = requests.get(f\"https://api.genderize.io?name={name}\")\n        # result = json.loads(res.text)\n        result = res.json()\n        gender = result[\"gender\"]\n        prob = round(result[\"probability\"]*100)\n\n    except KeyError as e:\n        print(e)\n        print(result)\n\n\n    return render_template(\"guess.html\", name = name.title(),\n                age=age, gender = gender, prob = prob, result= result)\n\n\nif __name__ == \"__main__\" :\n    app.run(debug=True)\n</code></pre> guess.html<pre><code>...\n    &lt;link rel=\"stylesheet\" href=\"../static/guess-style.css\"&gt;\n    &lt;title&gt;Guess API&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;main class=\"main-content\"&gt;\n        &lt;h1&gt;Hi, &lt;span&gt;{{name}} &lt;/span&gt;    &lt;/h1&gt;\n        &lt;p&gt; So you are &lt;span&gt;{{age}}&lt;/span&gt; years old &lt;/p&gt;\n        &lt;p&gt; There is &lt;span&gt;{{prob}}% &lt;/span&gt;chance \n                    you are a &lt;span&gt;{{gender}}&lt;/span&gt; &lt;/p&gt;\n    &lt;/main&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Warning</p> <p>The best way to convert your api response to json object is to call the <code>.json()</code> function on the response content i.e <code>&lt;response_text&gt;.json()</code> One of the ways to convert json object to dictionary object is in the <code>json</code> module, there are two distinctive functions</p> <ul> <li><code>json.load(json_file)</code> - This is used specifically for loading json files from a directory</li> <li><code>json.loads(json_obj)</code> - This is for loading json object return from either a request or from a function etc. Note this is <code>json.loads</code> ending with a -s</li> </ul>"},{"location":"python_docs/flask_doc/#multiple-blog-post-with-flask","title":"Multiple blog post with flask","text":"<p>We are going to use \"npoint.io\" which gives use the opportunity to create our own simple api for free</p> blog.html<pre><code>&lt;main&gt;\n    &lt;div  data-id &gt;\n    {% for blog in blog_post:  %}\n        &lt;div class=\"blog-content\" &gt;\n            &lt;h1 class=\"blog-title\"&gt; {{blog['title']}} &lt;/h1&gt;\n\n            &lt;h3 class=\"blog-subtitle\"&gt; {{blog['subtitle']}} &lt;/h3&gt;\n            &lt;p class=\"blog-body\" data-content&gt;\n                {{blog['body']}}\n            &lt;/p&gt;\n            &lt;hr&gt;\n        &lt;/div&gt;\n    {% endfor %}\n    &lt;/div &gt;\n&lt;/main&gt;\n</code></pre> server.py<pre><code>@app.route('/blog')\ndef blog_page():\n    res = requests.get('https://api.npoint.io/f83d799baae8f8930123')\n    post_data = res.json()\n    print(post_data)\n\n    return render_template('blog.html', blog_post = post_data)\n</code></pre>"},{"location":"python_docs/flask_doc/#multiple-blog-post-if-and-for","title":"Multiple blog post <code>if</code> and <code>for</code>","text":"<pre><code>&lt;section&gt;\n\n    {% if not players %}\n\n        &lt;div&gt;\n            &lt;h1&gt;No player availabe&lt;/h1&gt;\n        &lt;/div&gt;\n\n    {% else %}\n\n        &lt;header&gt;\n            &lt;div&gt;\n                &lt;h1&gt; ----- Name ------ | ----  &lt;span&gt;Role -----&lt;/span&gt;&lt;/h1&gt;\n            &lt;/div&gt;\n        &lt;/header&gt;\n\n        {% for pl in players %}\n                &lt;div&gt;\n                    &lt;h1&gt; {{pl['id']}} - {{pl['name']}}  - &lt;span&gt; Roles {{pl['role']}}  &lt;/span&gt;&lt;/h1&gt;\n                    &lt;hr&gt;\n                &lt;/div&gt;\n        {% endfor %}\n\n    {% endif %}\n\n&lt;/section&gt;\n</code></pre>"},{"location":"python_docs/list_dict_str/","title":"List, Dict and Strings","text":""},{"location":"python_docs/list_dict_str/#list","title":"List","text":"<p>A List collection of values of data types (float, int, string even list itself) that starts with a <code>[</code> and end with <code>]</code>.</p> <p>You getting value from List with indexes</p> <pre><code>animal = ['dog', 'cat', 'chicken']\n\n# access index\nanimal[0] # dog\nanimal[2] # chicken\n</code></pre> <p>if you attempt to get the value beyond the list index say <code>animal[100]</code> in get an IndexError.</p> <p>List can contain other list :</p> <pre><code># Example of a 3-tensor list\nmat =[  \n        [\n            [22, -11, 34],\n            [41, 0, -9],\n            [23, 1, 1]\n        ]\n    ,\n        [\n            [22, -11, 34],\n            [41, 0, -9],\n            [23, 1, 1]\n        ]\n\n    ]\n\n# looping through\nitem = []\nfor i in mat:\n    for j in i:\n        for k in j: \n            item.append(k)\n\n# printing in different levels of indexes\nprint(mat[1]) \nprint(mat[0][2])\nprint(mat[1][0][2])\n\nprint(item) # list all the item in 3 tensor           \nprint(set(item)) # remove duplicate in list\n</code></pre> <p>result:</p> <p></p>"},{"location":"python_docs/list_dict_str/#using-negative-index","title":"Using Negative index","text":"<p>You can use negetive indexes to access the value of the list from behind like so:</p> <pre><code>animal = ['cat', 'chicken', 'cow', 'elephant']\n\nanimal[-1] # elephant\nanimal[-2] # cow\n</code></pre>"},{"location":"python_docs/list_dict_str/#getting-list-from-another-list","title":"Getting List from Another list","text":"<p>With indexes, you get a single value from a list but with list, you get collection of value from a slice of the old list if you may say.</p> <pre><code>animal = ['cat', 'chicken', 'cow', 'elephant']\n\nanimal[0:2] # [cat, chicken]\nanimal[1:4] # ['chicken', 'cow', 'elephant']\n\n# short form leave out one or both of index\nanimal[2:] # ['cow', 'elephant']\nanimal[:2] # ['cat', 'chicken']\n\n# this returns  the whole list\nanimal[:]  # ['cat', 'chicken', 'cow', 'elephant']\n\n# Then we have the negative slice\nanimal[-1: -3] # ['chcken', 'cow']\n</code></pre>"},{"location":"python_docs/list_dict_str/#change-value-in-list","title":"Change value in list","text":"<p>You can change a list value by accessing the index and assigning the value from there:</p> <pre><code>animal = ['cat', 'chicken', 'cow', 'elephant']\n\nanimal[2] = 234\n&gt;&gt;&gt; animal\n['cat', 'chicken', 234, 'elephant']\n\n&gt;&gt;&gt; animal[-1] = 'aadvark' \n&gt;&gt;&gt; animal\n['cat', 'chicken', 234, 'aadvark']\n</code></pre>"},{"location":"python_docs/list_dict_str/#concatenation-and-replication","title":"Concatenation and Replication","text":"<p>Just like strings, list can be concate or repeated.</p> <pre><code>&gt;&gt;&gt; num = [1, 2, 3] \n\n&gt;&gt;&gt; num + [3, 4, 8] \n[1, 2, 3, 3, 4, 8]\n\n&gt;&gt;&gt; num * 3\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre>"},{"location":"python_docs/list_dict_str/#remove-value-from-list","title":"Remove value from list","text":"<p>To remove value based on index, we can use <code>del</code> statement.</p> <pre><code>anim = ['cat', 'chicken', 234, 'aadvark']\ndel anim[2]\n\nanim # ['cat', 'chicken', 'aadvark']\n</code></pre>"},{"location":"python_docs/list_dict_str/#working-with-list","title":"Working with List","text":"<p>Example of working with list:</p> <pre><code>dogs = []\n\nwhile True:\n    dogName = input(\"Your dog name :\")\n\n    if dogName == '': break\n\n    # concatenate dog name\n    dogs = dogs + [dogName]\n\nprint(\"Your Dog names are:\")\nfor index, dog in enumerate(dogs):\n    print(f\"dog {index + 1} is {dog}\")\n</code></pre> <p>The result:</p> <p></p> <p>A common python technique is to use <code>range(len(somelist))</code> to access the index and the value contained in a list</p> <pre><code>officeItems = ['pen', 'stapler', 'stringBall', 'laptop']\n\nfor i in range(len(officeItems)):\n    print(f'index {i} in offices is : {officeItems[i]}')\n\n'''\nOUTPUT:\nindex 0 in offices is : pen\nindex 1 in offices is : stapler\nindex 2 in offices is : stringBall\nindex 3 in offices is : laptop\n''' \n</code></pre>"},{"location":"python_docs/list_dict_str/#unpacking-a-list-or-tuple","title":"Unpacking a list or tuple","text":"<pre><code>names = ['45',' 45, ', 'Adeoye', 55]\n\n# Unpacking a list or tuple\nn1, n2, n3, n4 = names\n\nprint(n1, n2, n3)\n</code></pre> <p> Unpack Errors</p> <p>if you try assign less or more variables than the values in list you will get a ValueError say it either not enough to unpack or too many values to unpack.</p>"},{"location":"python_docs/list_dict_str/#randomchoice-and-randomshuffle","title":"random.choice and random.shuffle","text":"<p><code>random.choice</code> takes in a list returns a random value in  the list.</p> <p><code>random.shuffle</code> takes in a list a re-arrange the values in the list randomly. It modifies the list</p> <pre><code>import random\n\nlist1 = [\"Cat\", \"Dog\", \"Mouse\", \"house\"]\n\nprint(random.choice(list1))\nprint(random.choice(list1))\nprint(random.choice(list1))\nprint(random.choice(list1))\n\nlist2 = [1, 2, 3, 4, 5, 6]\n\nrandom.shuffle(list2)\nprint(list2)\n\nrandom.shuffle(list2)\nprint(list2)\n\nrandom.shuffle(list2)\nprint(list2)\n\n'''\nOUTPUT:\nCat\nDog\nMouse\nDog\n[4, 2, 6, 3, 5, 1]\n[2, 3, 1, 6, 4, 5]\n[5, 2, 4, 1, 6, 3]\n'''\n</code></pre>"},{"location":"python_docs/list_dict_str/#index-append-and-insert-to-list","title":"index, Append and Insert to list","text":"<pre><code>pets = [\"Cat\", \"Dog\", \"Mouse\", \"Babbit\"]\n\n# find index of mouse\nprint(pets.index(\"Mouse\"))\n\n# place at the back\npets.append(\"Hamster\")\nprint(pets)\n\n# place at the index specified, shift other value\npets.insert(0, \"Parrot\") # insert in first\nprint(pets)\n\npets.insert(3, \"Monkey\")\nprint(pets)\n\na = [34, 3 , 4]\na.append([1, 2]) # [34, 3 , 4, [1, 2]]\na.extend([1, 2]) # [34, 3 , 4, 1, 2]\n\n'''\nOUTPUT:\n['Cat', 'Dog', 'Mouse', 'Babbit', 'Hamster']\n['Parrot', 'Cat', 'Dog', 'Mouse', 'Babbit', 'Hamster']\n['Parrot', 'Cat', 'Dog', 'Monkey', 'Mouse', 'Babbit', 'Hamster']\n'''\n</code></pre> <p>When there is duplicate, the <code>.index()</code>returns the first elements index</p>"},{"location":"python_docs/list_dict_str/#remove-values-with-remove-pop-and-del","title":"remove values with Remove(), pop() and del","text":"<p>Previously we've talke about how to remove list value with <code>del</code> statements. Now we will look into other methods.</p> <pre><code>pets = [\"Parrot\",\"Cat\", \"Dog\", \"Mouse\", \"Babbit\", \"Hamster\"]\nprint(pets)\n# using remove() - specify name\npets.remove(\"Hamster\")\nprint(\"remove('Hamster') - \", pets)\n\n# using pop() - Specify index just like del\npets.pop(2)\nprint(\"pop(2) -            \" , pets)\n\ndel pets[2]\nprint(\"del[2] -            \", pets)\n\n'''\nOUTPUT:\n['Parrot', 'Cat', 'Dog', 'Mouse', 'Babbit', 'Hamster']\nremove('Hamster') -  ['Parrot', 'Cat', 'Dog', 'Mouse', 'Babbit']\npop(2) -             ['Parrot', 'Cat', 'Mouse', 'Babbit']\ndel[2] -             ['Parrot', 'Cat', 'Babbit']\n\n'''\n</code></pre>"},{"location":"python_docs/list_dict_str/#sort-method","title":"Sort() method","text":"<p>usage</p> <pre><code>some_num = [23, -33, 5, 3,0, 1100, 29]\nsome_name = [\"aark\", \"Adeob\", \"Yeshy\", \"yeye\", \"Bibola\"]\n\nprint(\"Normal sorting: === \")\nsome_num.sort()\nsome_name.sort()\n\nprint(some_num)\nprint(some_name)\n\nprint(\"\\nSpecial sorting: === \")\nsome_num.sort(reverse=True) # reverse sort\nsome_name.sort(key=str.lower) # sort regular alphabet\n\nprint(some_num)\nprint(some_name)\n\n'''\nNormal sorting: === \n[-33, 0, 3, 5, 23, 29, 1100]\n['Adeob', 'Bibola', 'Yeshy', 'aark', 'yeye']\n\nSpecial sorting: ===\n[1100, 29, 23, 5, 3, 0, -33]\n['aark', 'Adeob', 'Bibola', 'Yeshy', 'yeye']\n'''\n</code></pre> <p>Example code for reversing a list</p> <pre><code># reverse list example\nother_list = [3, 23, 4, \"Ade\", \"Laboo\", True, 34.0]\nother_list.reverse()\nprint(other_list)\n\n'''OUTPUT\n[34.0, True, 'Laboo', 'Ade', 4, 23, 3]\n'''\n</code></pre>"},{"location":"python_docs/list_dict_str/#list-code-example-magic-8-balls-list-version","title":"List Code Example - Magic 8 balls list version","text":"<pre><code>import random\n\nmessages =[\n    'It is certain',\n    'Its is decided so',\n    'Yes definitely',\n    'Rely quickly and try',\n    'I said no',\n    'Are you ok? I said yes',\n    'This is not lookin good',\n    \"Good speed sergeant\"\n]\n\nprint(messages[random.randint(0,len(messages)-1)])\n</code></pre>"},{"location":"python_docs/list_dict_str/#tuple-and-list-conversion","title":"Tuple and  list conversion","text":"<p>Example of a tuple</p> <pre><code>people = (\"Wale\", \"Ade\", \"kenny\") # tuple example\n\nsinge_val = (45,) # single val tuple\n</code></pre> <p>converting from list to tuple and vice-versa</p> <pre><code>t_animal = tuple([\"dog\", \"cat\", \"mouse\"])\nprint(t_animal)\n\npeople = (\"Wale\", \"Ade\", \"kenny\")\nl_people = list(people)\nprint(l_people) \n</code></pre>"},{"location":"python_docs/list_dict_str/#demonstration-pass-by-value-and-ref","title":"Demonstration Pass by value and Ref","text":"<p>For the list it works just like pass by reference it still maintain the same reference.</p> <p>you can use <code>id(variable_name)</code> to reference the memory address of the variable.</p> <pre><code>&gt;&gt;&gt; val1 = 34\n\n&gt;&gt;&gt; id(val1)\n140734562428744\n</code></pre> <p>Lets demonstrate references in List</p> <pre><code>&gt;&gt;&gt; list1 = [1, 3, 4]\n&gt;&gt;&gt; list2 = list1\n\n&gt;&gt;&gt; list2.append(\"Ad\")\n&gt;&gt;&gt; print(list1) # [1, 3, 4, 'Ad']\n&gt;&gt;&gt; print(list2)  # [1, 3, 4, 'Ad'] # same value\n\n&gt;&gt;&gt; id(list1) # id: 2584243212672\n&gt;&gt;&gt; id(list2) # id: 2584243212672\n</code></pre> <p>however if your intention to make a copy of the list, you can use <code>copy</code> and <code>deepcopy</code> in-built module in python</p> <pre><code>&gt;&gt;&gt; import copy\n&gt;&gt;&gt; list1 = [1, 3, 4]       \n&gt;&gt;&gt; list2 = copy.copy(list1) \n&gt;&gt;&gt; list2.append(\"Ad\")\n&gt;&gt;&gt; list1 # [1, 3, 4]\n&gt;&gt;&gt; list2 # [1, 3, 4, 'Ad']\n&gt;&gt;&gt; id(list1) # 2584243192128\n&gt;&gt;&gt; id(list2) # 2584243195264\n</code></pre> <p>You use <code>deepcopy</code> if you have list in a list</p> <pre><code>&gt;&gt;&gt; list1 = [23, 43, [1, 4]]\n&gt;&gt;&gt; list2 = copy.deepcopy(list1) \n&gt;&gt;&gt; list1.append([\"A\", \"B\"])\n&gt;&gt;&gt; list1 # [23, 43, [1, 4], ['A', 'B']]\n&gt;&gt;&gt; list2 # [23, 43, [1, 4]]\n</code></pre>"},{"location":"python_docs/list_dict_str/#dictionary","title":"Dictionary","text":"<p>A data structure that store a key-value pair of any type.</p> <pre><code>ziph = {'name': 'Ziphley', 'species': 'cat-kun', 'age': 22, 'hobby': 'sleep', 'weight(lb)': 54.0}\n\nprint(list(ziph)) \n# OUTPUT: ['name', 'species', 'age', 'hobby', 'weight(lb)']\n</code></pre>"},{"location":"python_docs/list_dict_str/#keys-values-and-items-method","title":"Keys(), values() and items() Method","text":"<p>There are three dictionary method that will return list-like value. They are not like your regular list, but (<code>dict_keys</code>,<code>dict_values</code> and <code>dict_items</code>) can be use mostly in for loop.</p> <pre><code>ziph = {'name': 'Ziphley', 'species': 'cat-kun', 'age': 22, 'hobby': 'sleep', 'weight(lb)': 54.0}\n\n\nfor k in ziph.keys():\n    print(f\"key: {k}\") # print keys\n\n\nfor v in ziph.values(): \n    print(f'value: {v}') # print values\n\n\nfor i in ziph.items():\n    print(f\"item {i}\") # print key - value\n\n\nfor k,v in ziph.items():\n    print(f\"item :=&gt; {k}, =&gt; {v}\") # print key - value\n</code></pre> <p>Should you want an actual list form the <code>keys(), values() or items()</code> pass them to a <code>list()</code></p> <pre><code>ziph = {'name': 'Ziphley', 'species': 'cat', 'age': 22}\n\nprint([list(z) for z in list(ziph.items())])\n\n'''\nOUTPUT:\n[['name', 'Ziphley'], ['species', 'cat-kun'], ['age', 22]]]\n'''\n</code></pre>"},{"location":"python_docs/list_dict_str/#check-if-a-key-or-value-exist","title":"Check if a key or value exist","text":"<pre><code>&gt;&gt;&gt; ziph = {'name': 'Ziphley', 'species': 'cat', 'age': 22}\n&gt;&gt;&gt; 'cat' in ziph.values() # True\n&gt;&gt;&gt; 'dog' in ziph.values() # False\n&gt;&gt;&gt; 'weight' in ziph.keys() # False\n&gt;&gt;&gt; 'age' in ziph.keys() # True\n</code></pre>"},{"location":"python_docs/list_dict_str/#the-get-method","title":"The get() method","text":"<pre><code>customer = {\n    \"name\" : \"Simon Jessie\",\n    \"age\": 34,\n    \"reg_date\": \"20-04-2019\",\n    \"cust_id\" : 1022302,\n    \"is_active\": True,\n}\n\n# creating a new item and assigning a new dict into it\ncustomer['cart_content']  = {0: \"rifle rice\", 1: \"dodo beans\", 12: \"Atta\" }\n\nprint(customer['cart_content'][12])\nprint(customer['reg_date'])\n\n# This throws **ERROR** its not part of list\nprint(customer['total_purchase']) \n\n# This returns 'None' instead \nprint(customer.get(\"total_purchase\"))\n\n# This returns 0.0, cause we are setting default value\nprint(customer.setdefault(\"total_purchase\", 0.0))\n\nprint(customer)\n\n'''\n{'name': 'Simon Jessie', 'age': 34, 'reg_date': '20-04-2019', 'cust_id': 1022302, 'is_active': True, 'total_purchase': 0.0}\n'''\n</code></pre>"},{"location":"python_docs/list_dict_str/#use-setdefault-method","title":"use setdefault() method","text":"<pre><code>import pprint as pp\n\nmsg = '''\n\"thhis is a very long \ncharacter that we whant to do the, only charalong\n character count oo \"\n '''\ncount = {}\n\nfor ch in msg:\n    count.setdefault(ch, 0)\n    count[ch] += 1\n\nprint(count)\nval = pp.pformat(count) # to get value as string\npp.pprint(count) # to get value as output\n\n\n\n'''\n{'\\n': 4, '\"': 2, 't': 9, 'h': 8, 'i': 2, 's': 2, ' ': 18, 'a': 9, 'v': 1, 'e': 5, 'r': 6, 'y': 2, 'l': 3, 'o': 8, 'n': 5, 'g': 2, 'c': 6, 'w': 2, 'd': 1, ',': 1, 'u': 1}\n'''\n</code></pre>"},{"location":"python_docs/list_dict_str/#strings","title":"Strings","text":""},{"location":"python_docs/list_dict_str/#display-number-with-leading-zero","title":"Display number with Leading zero","text":"<pre><code># Method 1\nnum = 1\nprint(f\"{num:02d}\") # 01\nprint(f\"{num:03d}\") # 001\n\n# Method 2\nnum = 1\nprint(str(num).zfill(2)) # 01\nprint(str(num).zfill(3)) # 001\n</code></pre>"},{"location":"python_docs/list_dict_str/#get-the-unicode-code-point-for-strings","title":"Get the Unicode Code Point for Strings","text":"<p>You can use the <code>ord()</code> in-built function to get the code point for any character.</p> <pre><code>&gt;&gt;&gt; ord(\"'\") \n39\n&gt;&gt;&gt; ord(\"W\")\n87\n</code></pre> <p>And you can pass the code point to <code>chr()</code> to check it corresponding char <pre><code>&gt;&gt;&gt; chr(98) \n'b'\n&gt;&gt;&gt; chr(300)\n'\u012c'\n&gt;&gt;&gt; chr(5000) \n'\u1388'\n&gt;&gt;&gt; chr(10000) \n'\u2710'\n&gt;&gt;&gt; chr(ord('X') + 2) \n'Z'\n</code></pre></p>"},{"location":"python_docs/list_dict_str/#string-code-example-i","title":"String Code Example I","text":"<pre><code>import random\n\npassString = \"rthglafsghglsf\" # Test Password string\npass_sym_num = 3 # Test numbers of symbols need\nrand_symbol = \"%$@\" # random symbols generated\n\n# this Check if the positioning of the symbol string will\n# Exceed the index of the total password length\n# In such case, try another random positon\nfound = False\nwhile not found:\n    # this is a string \n    i = random.randint(0, (len(passString) - 1))\n    if((i + pass_sym_num) &gt; len(passString)):\n        print(f\"X BAD pos: i + pass_sym num = {i + pass_sym_num}, len(passString) ={len(passString)}\") \n        found = False\n    else:\n        print(f\"! GOOD pos: i + pass_symbol = {i + pass_sym_num}, len(passString) ={len(passString)}\")\n        found = True \n\npassString = passString.replace(passString[i:i+pass_sym_num], rand_symbol)\n\nprint(f\"Your new password is : {passString}\")\n</code></pre>"},{"location":"python_docs/list_dict_str/#string-code-example-ii","title":"String Code Example II","text":"<pre><code>import random\n\n# Get the length of password:\npass_len = int(input(\"What is your password Length? \"))\n\n# Get the numbers of symbols\npass_symbol = int(input(\"How many symbols: \"))\n\n# Get the numbers of 'numbers'\npass_num = int(input(\"How many numbers: \"))\n\npassString = \"\"\n# Gen. random password\nfor p in range(0, pass_len):\n    passString += chr(random.randint(65, 122))\n\nrand_symbol = \"\"\nfor s in range(0, pass_symbol):\n    new_symbol_char = chr(random.randint(33 , 47))\n    rand_pass_char = passString[random.randint(0, len(passString)-1)] \n    passString.replace(rand_pass_char, new_symbol_char)\n\nrand_nums = \"\"\nfor n in range(0, pass_num):\n    rand_nums += chr(random.randint(48, 57))\n\n\ni = random.randint(0, (len(passString) - 1))\n# if(i+pass_symbol &gt; len(passString))\npassString = passString.replace(passString[i:i+pass_symbol], rand_symbol)\n\n\nprint(f\"Your new password is : {passString}\")\n</code></pre>"},{"location":"python_docs/list_dict_str/#string-passcode-example-iii-main","title":"String PassCode Example III (MAIN)","text":"<pre><code>'''\nPyPassword Generator:\n- It takes in the 'LENGTH' of password you want\n- It will request for how many 'SYMBOLS' do you want inside\n- And also how many 'NUMBERS' do you want inside.\n'''\nimport random\n\ndef get_numbers_chars():\n    # Get list of 0 - 9\n    return [chr(x) for x in range(48, 57+1)]\n\ndef get_symbols_chars():\n    # list of all accepted symbols\n    sym_chars = []\n    sym_chars.extend([chr(x) for x in range(35, 38+1)])\n    sym_chars.extend(['!','&gt;','&lt;', '?','@'])\n    return sym_chars\n\ndef get_letters_chars():\n    # list of letters A-Z and a-z\n    let_chars = []\n    let_chars.extend([chr(x) for x in range(65, 91+1)]) # A - Z\n    let_chars.extend([chr(x) for x in range(97, 122+1)])# a - z\n    return let_chars\n\n\n# Get the length of password:\npass_len = int(input(\"How many letters? \"))\n\n# Get the numbers of symbols\npass_sym_len = int(input(\"How many symbols: \"))\n\n# Get the numbers of 'numbers'\npass_num = int(input(\"How many numbers: \"))\n\npass_chars = []\n# Gen. random password\nfor p in range(0, pass_len):\n    pass_chars += random.choice(get_letters_chars())\n\nfor s in range(0, pass_sym_len):\n    pass_chars += random.choice(get_symbols_chars())\n\nfor n in range(0, pass_num):\n    pass_chars += random.choice(get_numbers_chars())\n\nrandom.shuffle(pass_chars)\npass_string = ''.join(pass_chars)\nprint(f\"Your new password is : {pass_string}\")\n</code></pre>"},{"location":"python_docs/list_dict_str/#example-code-hangman-version-1","title":"Example code : Hangman - Version 1","text":"<pre><code># Word list\n\nimport random\n\nword_list = [\"monkey\", \"kangaroo\", \"mouse\", \"sheep\"]\n\n# Randomly choose word from word_list\nchosen_word = random.choice(word_list)\nchosen_word = list(chosen_word)\nprint(\" Chosen word is \", chosen_word)\n\n# Ask the user to guess a letter and assign \n# their answer to a variable called guess. Make guess lowercase.\nguess = input(\"Guess a letter: \")[0].lower()\n\n# Check if he letter user guessed is in the chosen word\nword_len = len(chosen_word)\n\n# Create blanks as many as chosen words\ndisplay =[]\nfor _ in range(word_len):\n    display += \"_\"\n\ngame_over = False\nuser_lives = 3\n\nwhile not game_over:\n\n    # Word completed, End Game display game won\n    if(display == chosen_word ):\n        game_over = True\n        print(\"Game! Over, YOU WIN!!!\ud83c\udf89\ud83c\udf89\ud83c\udf89\")\n\n    # fill in the blanks for correct word\n    for positon in range(word_len):\n        if chosen_word[positon] == guess:\n            display[positon] = guess\n\n    # for incorrect word reduce lives and display lives left\n    if not guess in chosen_word:\n        user_lives -= 1\n        print(f\"Incorrect word, You have {user_lives} lives left\")\n\n        # No more life? End game, display game lost\n        if user_lives == 0:\n            game_over = True\n            print(\"Game! Over, YOU LOSE!!!\ud83d\udc80\ud83d\udc80\ud83d\udc80\")\n            break\n\n    else:\n         print(display)\n\n    guess = input(\"Guess a letter: \").lower()\n</code></pre>"},{"location":"python_docs/ml_data/","title":"Basics of Machine Learning / Data Science","text":""},{"location":"python_docs/ml_data/#data-from-list","title":"Data from List","text":"<p><pre><code>import pandas as pd\n\n# Loading data in dataFrame/Table\npy_data = [\n            [\"name\", \"score\", \"hasPassed\"],\n            [\"kk\", 50, True],\n            [\"wt\", 34, False],\n            [\"rq\", 66, True]\n        ]\n\ndf = pd.DataFrame(py_data)\n\nprint(df)\n</code></pre> </p>"},{"location":"python_docs/ml_data/#more-operations-on-dataframe-iloc","title":"More operations on dataFrame <code>iloc[]</code>","text":"<pre><code>import pandas as pd\n\n# Loading data in dataFrame/Table\npy_data = [\n            [\"name\", \"score\", \"hasPassed\"],\n            [\"kk\", 50, True],\n            [\"wt\", 34, False],\n            [\"rq\", 66, True],\n            [\"mm\",-2, True],\n            [\"rq\", 91, False]\n        ]\n\ndf = pd.DataFrame(py_data)\n\nprint(df)\n\n# You can just get some part\nprint(df[:3])\n\n# iloc is like accessing the elements of a matrix\nprint(df.iloc[4, 0])\n\n# it also use to get the 2d part df \nprint(df.iloc[1:,1:])\n</code></pre>"},{"location":"python_docs/ml_data/#import-files-using-pandas-and-jupyter-notebook","title":"Import files using Pandas and Jupyter notebook","text":"<pre><code>import pandas as pd\ndf = pd.read_csv('vgsales.csv')\ndf2 = pd.read_excel('bookkeeping2.xlsx') # read excel file\ndf\n\ndf.shape # Result: (16539, 10) - (row , column)\n</code></pre> <p>Result : </p> <p><code>df.describe()</code> This returns a summary values of the record, basic statistics</p> <p><code>df.values</code> this returns all the records as two dimension arrays</p>"},{"location":"python_docs/ml_data/#loading-the-data","title":"Loading the data","text":"<pre><code># Loading our data\nimport pandas as pd\nmusic_data = pd.read_csv('music.csv')\n</code></pre> <p>Here is the data music.csv (NOTE : Data from Mosh Tutorial on youtube)</p>"},{"location":"python_docs/ml_data/#split-the-data-into-xinput-and-youtput","title":"Split the data into X(input) and y(output)","text":"<pre><code># INPUT : Remove a column from record\nX = music_data.drop(columns=['genre'])\n\n# OUTPUT : genre\ny =music_data['genre']\n</code></pre>"},{"location":"python_docs/ml_data/#learning-and-training-with-decisiontree","title":"Learning and training with DecisionTree","text":"<pre><code>from sklearn.tree import DecisionTreeClassifier\n\n# Training our model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predicting\npredictions = model.predict([[27, 1], [32,0]])\npredictions\n</code></pre>"},{"location":"python_docs/ml_data/#testing-the-accuracy-of-our-predictions","title":"Testing the accuracy of our Predictions","text":"<p>Here we introduce a new module from sklearn. That is the <code>train_test_split</code>  and <code>accurracy_score</code> function to help with this.</p> <pre><code>import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nmusic_data = pd.read_csv('music.csv')\nX = music_data.drop(columns=['genre'])\ny =music_data['genre']\n\n# Split our data into train data and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Training our model\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Predicting\npredictions = model.predict(X_test)\n\n# Check for accuracy\nscore = accuracy_score(y_test, predictions)\nscore\n</code></pre> <p>Here are some of the outputs:  </p>"},{"location":"python_docs/regex_doc/","title":"Regular Expression in python","text":""},{"location":"python_docs/regex_doc/#regex-basics","title":"Regex Basics","text":"<pre><code>import re\n\nstr1 = 'this is the first no 454-333-2344 the second is 545-000-1234'\nstr2 = 'There is no phone number here 0982433-343'\n\nphone_re = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\n\n# for the first string\nn = phone_re.search(str1)\nif n : print(\"Phone(s) found in str1 : \", n.group()) \n\nn = phone_re.search(str2) # returns None if empty\nif n : print(\"Phone(s) found in str2: \", n.group() )\n\n# OUTPUT:\n# Phone(s) found in str1 :  454-333-2344\n# Pattern not found\n</code></pre> <p>Note that when use <code>[re_comp].search()</code> the <code>[res].group()</code> returns the first match.</p> <p>if you want to return multiple matches, you will have to use <code>[re_comp].findall()</code> this will return a list instead.</p>"},{"location":"python_docs/regex_doc/#grouping-expressions","title":"Grouping Expressions","text":"<p>You can divide your regex into different parts. for instance you want to seperate the country code from the phone number.</p> <pre><code>str1 = 'this is the first no +454-333-2344 the second is'\n\nphone_re = re.compile(r'(\\+\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\n\n# for the first string\nn = phone_re.search(str1)\nif n : print(\"code = \", n.group(1),\", Phone = \", n.group(2))\n\n#OUTPUT:\n# country code =  +454 , Phone =  333-2344\n</code></pre>"},{"location":"python_docs/regex_doc/#match-zero-or-more-with-star","title":"Match Zero or More with Star","text":"<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; suprex = re.compile(r'Super(wo)*man')\n&gt;&gt;&gt; o1 = suprex.search(\"The Superman's adventure\") \n&gt;&gt;&gt; o1.group()\n'Superman'\n\n&gt;&gt;&gt; o2 = suprex.search(\"The Superwomans adventure\")\n&gt;&gt;&gt; o2.group()\n'Superwoman'\n\n&gt;&gt;&gt; o2 = suprex.search(\"The Superwowowowowomans adventure\")   \n&gt;&gt;&gt; o2.group()\n'Superwowowowowoman'\n</code></pre>"},{"location":"python_docs/regex_doc/#match-one-or-more-with-the-plus","title":"Match one or more with the Plus","text":"<pre><code>&gt;&gt;&gt; suprex = re.compile(r'Super(wo)+man') \n&gt;&gt;&gt; o2 = suprex.search(\"The Superwowowowowomans adventure\")\n&gt;&gt;&gt; o2.group()\n'Superwowowowowoman'\n\n&gt;&gt;&gt; o2 = suprex.search(\"The Supermans adventure\")           \n&gt;&gt;&gt; o2 == None\nTrue\n</code></pre> <p>If there are one or more pattern in group <code>(wo)</code> in the string. If at least one is not available it returns <code>None</code></p>"},{"location":"python_docs/regex_doc/#match-specific-repitions-with-braces","title":"Match Specific Repitions with Braces","text":"<p>so if you have <code>(do){3}</code> will match <code>dododo</code> and nothing more or less</p> <pre><code>&gt;&gt;&gt; rex1 = re.compile(r'(do){3}')               \n&gt;&gt;&gt; o = rex1.search('This is the dododo pizza') \n&gt;&gt;&gt; o.group()\n'dododo'\n\n&gt;&gt;&gt; o = rex1.search('This is the dodo pizza') \n&gt;&gt;&gt; # Result: None\n</code></pre>"},{"location":"python_docs/regex_doc/#greedy-or-non-greedy-matching","title":"Greedy or Non-greedy Matching","text":"<p>if you write <code>(do){2, 4}</code> it will match two, three or four instance of pattern</p> <pre><code>&gt;&gt;&gt; rex1 = re.compile(r'(do){2,4}') \n&gt;&gt;&gt; o = rex1.search('This is the dododododo pizza') \n&gt;&gt;&gt; o.group()\n'dodododo'\n</code></pre> <p>You might wonder why not retrieve the first two <code>dodo</code> istead of four <code>dodododo</code>. The reason being by default, python regex is greedy i.e it will retrieve the highest pattern. for it to be non greedy we use the <code>?</code></p> <pre><code>&gt;&gt;&gt; rex1 = re.compile(r'(do){2,4}?') # NON-GREEDY\n&gt;&gt;&gt; o = rex1.search('This is the dododododo pizza')\n&gt;&gt;&gt; o.group()\n'dodo'\n</code></pre>"},{"location":"python_docs/regex_doc/#the-findall-method","title":"The findall() Method","text":"<p><code>findall()</code> returns the strings of every match in the search string. This is returned as a list</p> <pre><code>&gt;&gt;&gt; rex1 = re.compile(r'Super\\w{3,5}') \n&gt;&gt;&gt; rex1.findall('The new  Superwoman, Superman, Superdog and Supergirl')\n\n['Superwoman', 'Superman', 'Superdog', 'Supergirl']\n</code></pre> <p>If there are groups in the regex, the method will return a list of tuple</p> <pre><code>&gt;&gt;&gt; rex1 = re.compile(r'(Super\\w)(\\w+)')  \n&gt;&gt;&gt; rex1.findall('The new  Superwoman, Superman, Superdog and Supergirl')\n\n[('Superw', 'oman'), ('Superm', 'an'), ('Superd', 'og'), ('Superg', 'irl')]\n</code></pre>"},{"location":"python_docs/regex_doc/#making-our-own-character-class","title":"Making our own character class","text":"<p>There might be times when you just what to match a set of characters say just vowels, say first 5 alphabet or maybe just some numbers and the default character classes a too broad. You can use the square bracket.</p> Regex Character class Description <code>\\d</code> Any numeric digit from 0 to 9 same as <code>(0|1|2|3|4|5|6|7|8|9)</code> or <code>[0-9]</code> <code>\\D</code> Any that is not a Numeric from 0 to 9 <code>\\w</code> Any letter, numeric digit or the underscore(matching \"word\") <code>\\W</code> Any not \"Word\" <code>\\s</code> matching space, tab, newline characters <code>\\S</code> matching not space <p>Example to demonstrate character class usage:</p> <pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; xregx = re.compile(r'\\d+\\s\\w+')\n&gt;&gt;&gt; xregx.findall('12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids) \n\n['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids'  ]\n</code></pre> <p><pre><code>&gt;&gt;&gt; crex = re.compile(r'b[a-fA-F]+s') # [abcdefABCDEF]\n&gt;&gt;&gt; crex.findall(\"The bacs and the bades is fading abacs not aback bees are beads or beefs\") \n\n['bacs', 'bades', 'bacs', 'bees', 'beads', 'beefs']\n</code></pre> The carets character negate the selection</p> <pre><code>&gt;&gt;&gt; crex = re.compile(r'b[^a-f]+s')                                                                      \n&gt;&gt;&gt; crex.findall(\"The bacs boys bxings and blins and the bades is fading abacs not aback\")\n['boys', 'bxings', 'blins']\n</code></pre>"},{"location":"python_docs/regex_doc/#beginwith-and-endwith-sign-characters","title":"BeginWith(^) and EndWith($) sign characters","text":"<p>You can specify a match most occur at the begin of a search text with (^) e.g. <code>r'^Ade'</code> this match <code>Adeoye is going home</code> any string start with the match. Similarly ($) match at the end of any searched text e.g. <code>r'\\d$'</code> match <code>the fure is 2112</code> ending with a number.</p> <pre><code>&gt;&gt;&gt; beginWithRegex = re.compile(r'^Ade') \n&gt;&gt;&gt; o = beginWithRegex.search('Adeoye  but omoAde or Ade#1234') \n&gt;&gt;&gt; o.group()\n\n'Ade'\n\n&gt;&gt;&gt; o = beginWithRegex.search('Is also Adegbite, but omoAde')        \n&gt;&gt;&gt; o == None\n\nTrue\n</code></pre> <p>Similarly demonstrating endswith</p> <pre><code>&gt;&gt;&gt; endWithRegex = re.compile(r'\\d$')\n&gt;&gt;&gt; o = endWithRegex.search('Adeoye  but omoAde or Ade#1234') \n&gt;&gt;&gt; o.group()\n\n'4'\n</code></pre> <p>Combining the two characters</p> <pre><code>&gt;&gt;&gt; wholeStringIsNum = re.compile(r'^\\d+$') \n&gt;&gt;&gt; o = wholeStringIsNum.search('0814889453332') \n&gt;&gt;&gt; o.group()\n\n'0814889453332'\n\n&gt;&gt;&gt; o = wholeStringIsNum.search('0814adef445332')\n&gt;&gt;&gt; o==None\n\nTrue\n</code></pre> <p> Caret (^) Usage</p> <p>Caret has two use, first inside character class negation <code>[^aeiou]</code> Not vowel in this case. It can also be use as match begin-with as we have seen above</p>"},{"location":"python_docs/regex_doc/#the-wildcard-character","title":"the wildcard character","text":"<p>the dot(.) is consider a wildcard character as it can be use the represent any character, be it text, number or special character in a string. The only exception is space, newline or tab.</p> <pre><code>&gt;&gt;&gt; anRegex = re.compile(r'.an') \n&gt;&gt;&gt; anRegex.findall(\"He ran to the  can in the car but ban in a tan in a 2an %an /an whan? \") \n\n['ran', 'can', 'ban', 'tan', '2an', '%an', '/an', 'han']\n</code></pre>"},{"location":"python_docs/regex_doc/#matching-everything-with-a-dot-star","title":"Matching Everything with a Dot-Star","text":"<p>what (.*) does is match literal everything.</p> <pre><code>&gt;&gt;&gt; nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)')                                          \n&gt;&gt;&gt; names = nameRegex.search(\"First Name: Kinokola Last Name: Omotayo\") \n&gt;&gt;&gt; names.groups()\n\n('Kinokola', 'Omotayo')\n&gt;&gt;&gt;\n</code></pre> <p>The dot star by default uses the greedy mode by default. To use the non-greedy mode, use <code>(.*?)</code> instead.</p> <pre><code>nonGreedyRex = re.compile(r'&lt;.*?&gt;')\n&gt;&gt;&gt; mo = nonGreedyRex.search(\"&lt;To serve&gt; or &lt;Not to serve&gt;\") \n&gt;&gt;&gt; mo.group()\n\n'&lt;To serve&gt;'\n\n&gt;&gt;&gt; greedyRex = re.compile(r'&lt;.*&gt;')  \n&gt;&gt;&gt; mo = greedyRex.search(\"&lt;To serve&gt; or &lt;Not to serve&gt;\")    \n&gt;&gt;&gt; mo.group()\n\n'&lt;To serve&gt; or &lt;Not to serve&gt;'\n\n&gt;&gt;&gt; notgreedyRex = re.compile(r'&lt;.*?&gt;') \n&gt;&gt;&gt; mo = notgreedyRex.findall(\"&lt;To serve&gt; or &lt;Not to serve&gt;\")    \n&gt;&gt;&gt; mo\n\n['&lt;To serve&gt;', '&lt;Not to serve&gt;']\n</code></pre>"},{"location":"python_docs/regex_doc/#regex-code-table","title":"Regex Code Table","text":"pattern code Description <code>\\d</code> Any numeric digit from 0 to 9 same as <code>(0|1|2|3|4|5|6|7|8|9)</code> or <code>[0-9]</code> <code>\\D</code> Any that is not a Numeric from 0 to 9 <code>\\w</code> Any letter, numeric digit or the underscore(matching \"word\") <code>\\W</code> Any not \"Word\" <code>\\s</code> matching space, tab, newline characters <code>\\S</code> matching not space <code>^</code> a match most occur at the begin of a search text .<code>r'^Ade'</code> this match <code>Adeoye is going home</code> <code>$</code> A match most occur at the end of  searched text e.g. <code>r'\\d$'</code> match <code>the fure is 2112</code> <code>[0-5]</code> this a shorten numeric character class for <code>(0|1|2|3|4|5)</code>or <code>[012345]</code> <code>[a-zA-Z0-9]</code> a letter  will match all lower, upper letters and numbers you can use <code>\\w</code> instead <code>[^a-z]</code> placing the caret charater (^) means you are negating your class <code>^\\d+$</code> string must contain all numbers <code>Bat(wo)?man</code> ? means the <code>(wo)</code> is optional so in regex like <code>Super(wo)?man</code>, it will find <code>Superman</code> but if no <code>Superwoman</code> <code>Bat(wo)*man</code> select zero or more <code>(wo)</code> in <code>Bat Batman Batwowowoman</code> select in order of arrangement <code>'Super\\w+'</code> Select one or more words after <code>Super</code> select <code>['Superwoman', 'Superman', 'Superdog', 'Supergirl']</code>"},{"location":"python_docs/tkinter_doc/","title":"Introduction to Tkinter","text":""},{"location":"python_docs/tkinter_doc/#basic-examples","title":"Basic examples","text":"<p>Basic example here </p> <pre><code>import tkinter as tk\n\nBG_COLOR = \"#222\"\nFG_COLOR = \"#eee\"\n\nwindow_tk = tk.Tk()\n\n# create window basic\nwindow_tk.title(\"Test Program\")\nwindow_tk.minsize(width=300, height=300)\nwindow_tk.config(bg=BG_COLOR)\n\n\n# Label example\nlabel1 = tk.Label(text=\"User name:\", font=(\"Cursive\", 10, \"italic\"))\nlabel1.config(bg=f\"{BG_COLOR}444\", fg=FG_COLOR)\nlabel1.pack()\n\n# Entry\ninput1 = tk.Entry()\ninput1.pack()\n\nwindow_tk.mainloop()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"python_docs/tkinter_doc/#introducing-other-tkinter-widget","title":"Introducing other Tkinter widget","text":"<p> <pre><code>import tkinter as tk\n\nBG_COLOR = \"#222\"\nFG_COLOR = \"#eee\"\n\n\nwin = tk.Tk()\nwin.title(\"Basic demo\")\nwin.minsize(width=500, height=500)\nwin.config(bg=BG_COLOR)\n\n# Entries==============================#\nentry = tk.Entry(width=30)\n\n# Add some text to begin with\nentry.insert(tk.END, string=\"Some text begin with\")\nprint(entry.get()) # Get text in entry\nentry.pack()\n\n# Button===============================#\ndef action(): print(\"Btn: Just do it!\")\nbtn = tk.Button(text=\"Click it!\", command=action).pack()\n\n# Text Widget =========================#\ntext = tk.Text(height=10, width=30)\ntext.focus() # Puts cursor in textbox\ntext.insert(tk.END, \"Example of multi-line.\") # Text to begin with\n\n# '1.0' means get line \"1\" from \"0\" character\nprint()\ntext.pack()\n\n# Get the Text Content\ndef text_action(): \n    text_val = text.get(\"1.0\", tk.END)\n    label1.config(text=text_val)\n\nbtn1 = tk.Button(text=\"Get Text Content\", command=text_action)\nbtn1.pack()\nlabel1 = tk.Label(text=\"\", fg=FG_COLOR, bg=BG_COLOR)\nlabel1.pack()\n\n# SpinBox ===================&gt;\ndef spinbox_action(): print(spinbox.get())\n\nspinbox = tk.Spinbox(from_=1, to=6, width=5, command=spinbox_action)\nspinbox.pack()\n\n\n# Scale =====================&gt;\ndef scale_action(value): print(value)\n\nscale = tk.Scale(from_=0, to=100, command=scale_action)\nscale.pack()\n\n# CheckBox ==================&gt;\ndef checkbtn_action():\n    # print '1' - ON,  '0' - OFF\n    print(checked_state.get())\n\n# variable to hold check\nchecked_state = tk.IntVar()\n\ncheckbutton = tk.Checkbutton(text=\"Turn off Nude\", variable=checked_state, command=checkbtn_action)\ncheckbutton.pack()\n\n# Radio Button ==============&gt;\ndef radio_action():\n    print(radio_state.get())\n\n# variable to hold which value is checked\nradio_state = tk.IntVar()\n\nradiobtn1 = tk.Radiobutton(text=\"30 sec\", value=30, variable=radio_state, command=radio_action)\nradiobtn2 = tk.Radiobutton(text=\"60 sec\", value=60, variable=radio_state, command=radio_action)\nradiobtn3 = tk.Radiobutton(text=\"2 mins\", value=99, variable=radio_state, command=radio_action)\nradiobtn1.pack()\nradiobtn2.pack()\nradiobtn3.pack()\n\n\n# List Box ================&gt;\ndef listbox_action(event):\n    # Get current selection from listbox\n    print(listbox.get(listbox.curselection()))\n\nfruits = [\"Apple\", \"Pear\", \"Orange\", \"Banana\"]\n\nlistbox = tk.Listbox(height=4)\nfor i in range(len(fruits)): listbox.insert(i, fruits[i])\n\nlistbox.bind(\"&lt;&lt;ListboxSelect&gt;&gt;\", listbox_action) # Attach to the function\nlistbox.pack()\n\nwin.mainloop()\n</code></pre></p>"},{"location":"python_docs/tkinter_doc/#basic-image-loading","title":"Basic image loading","text":"<pre><code>root = tk.Tk()\nroot.title(\"Pomodoro\")\nroot.config(padx=100, pady=50)\n\n# Create the canvas \ncanvas = tk.Canvas(width=200, height=224)\n\n# loading image\ntomato_img = tk.PhotoImage(file=\"day28-pomodoro/blue_apple.png\")\ncanvas.create_image(103, 112, image = tomato_img)\ncanvas.pack()\n\n\n\nroot.mainloop()\n</code></pre> <p>Result </p>"},{"location":"python_docs/tkinter_doc/#full-ui-setup-for-pomodoro","title":"Full UI setup for Pomodoro","text":"<pre><code># ---------------------------- UI SETUP\nroot = tk.Tk()\nroot.title(\"Pomodoro\")\nroot.config(padx=50, pady=50, bg=YELLOW)\n\n# Timer Stage label\ntimer_stage_label = tk.Label(text=\"Timer\", fg=GREEN, bg=YELLOW, font=(FONT_NAME, 35, \"bold\"), pady=20)\ntimer_stage_label.grid(row=0, column=1)\n\n# Create the canvas \ncanvas = tk.Canvas(width=200, height=224, bg=YELLOW, highlightthickness=0)\n\n# loading image\ntomato_img = tk.PhotoImage(file=\"day28-pomodoro/tomato.png\")\ncanvas.create_image(100, 112, image = tomato_img)\ncanvas.create_text(103, 130, text=\"00:00\", fill=\"white\", font=(FONT_NAME, 35, \"bold\" ))\ncanvas.grid(row=1, column=1)\n\n# Start Button\nstart_btn = tk.Button(text=\"Start\", font=BUTTON_FONT)\nstart_btn.grid(row=2, column=0)\n\n# Reset Button\nreset_btn = tk.Button(text=\"Reset\", font=BUTTON_FONT)\nreset_btn.grid(row=2, column=2)\n\n# Check mark Label\nmarks_label= tk.Label(text=\"\u2714\ufe0f\", fg=GREEN, bg=YELLOW, font=(\"Arial\", 20))\nmarks_label.grid(row=3, column=1)\n</code></pre>"},{"location":"python_docs/tkinter_doc/#canvas-shapes-in-tkinter","title":"Canvas Shapes in Tkinter","text":"<pre><code>import tkinter as tk \n\nclass Shape:\n    def __init__(self, main = None):\n        self.main = main\n\n        # Calls create method of class Shape\n        self.create()\n\n    def create(self):\n\n        # Creates a object of class canvas\n        # with the help of this we can create different shapes\n        self.canvas = tk.Canvas(self.main)\n\n        # Creates a circle of diameter 80\n        self.canvas.create_oval(10, 10, 80, 80, \n                            outline = \"black\", fill = \"white\",\n                            width = 2)\n\n        # Creates an ellipse with H. diameter: 210 and V. diameter: 80\n        self.canvas.create_oval(110, 10, 210, 80,\n                            outline = \"red\", fill = \"green\",\n                            width = 2)\n\n        # Creates a rectangle of 60 x 50 (width x height)\n        self.canvas.create_rectangle(230, 10, \n                                     290, # pos_x(230) + width(60)\n                                      60, # pos_y(10) + height(50)\n                                outline = \"black\", fill = \"blue\",\n                                width = 2)\n\n        # Creates an arc of 210 deg (it also have soval shape of 90, 100)\n        self.canvas.create_arc(30, 200, 90, 100, start = 0,\n                          extent = 210, outline = \"green\",\n                          fill = \"red\", width = 2)\n\n        points = [150, 100, 200, 120, 240, 180,\n                  210, 200, 150, 150, 100, 200]\n\n        # Creates a polygon\n        self.canvas.create_polygon(points, outline = \"blue\",\n                              fill = \"orange\", width = 2)\n        # Pack the canvas to the main window and make it expandable\n        self.canvas.pack(fill = tk.BOTH, expand = 1)\n\nif __name__ == \"__main__\":\n\n    # object of class Tk, responsible for creating\n    # a tkinter toplevel window\n    root = tk.Tk()\n    shape = Shape(root)\n\n    # Sets the title to Shapes\n    root.title(\"Shapes\")\n\n    # Sets the geometry and position\n    # of window on the screen\n    root.geometry(\"400x300\")\n\n    # Infinite loop breaks only by interrupt\n    root.mainloop()\n</code></pre> <p>The document was originally from geeksforgeeks</p>"},{"location":"python_docs/tkinter_doc/#loading-image-to-tkinter","title":"Loading image to Tkinter","text":""},{"location":"python_docs/tkinter_doc/#load_tk_image-function","title":"load_tk_image function","text":"<pre><code>import tkinter as tk\nfrom PIL import ImageTk, Image\n\n\ndef load_image(filepath, new_width = None, new_height= None, reduce_by=1) :\n    '''\n    This loads image using Image class from the PIL Library\n\n    Parameters: \n    filepath (string) : path to the image file\n    new_width (int) : Specify new resize width, None if not specified\n    new_height (int) : specify new resize height, None if not specified\n    reduce_by(float) : proportional resizing by value specified\n\n    Returns:\n    Image : PIL class for Images '''\n\n    import math\n    img = Image.open(filepath)\n\n    if new_width and new_height:\n        img = img.resize((new_width, new_height))\n\n    elif new_width and not new_height:\n        aspect_ratio = img.size[1]/img.size[0]\n        img = img.resize((new_width, math.floor(new_width*aspect_ratio)))\n\n    elif new_height and not new_width:\n        aspect_ratio = img.size[0] /img.size[1]\n        img = img.resize((math.floor(new_height*aspect_ratio), new_height))\n\n    elif reduce_by &lt; 1:\n        img = img.resize((math.floor(img.size[0]*reduce_by), # height\n                            math.floor(img.size[1]*reduce_by))) # weight\n\n    return img\n</code></pre>"},{"location":"python_docs/tkinter_doc/#loading-single-image","title":"Loading single image","text":"<pre><code># MAIN ==========================================\n\nmw = tk.Tk()\nmw.geometry(\"400x400\")\nmw.title(\"Img Btn text\")\n\n\nimg1 = load_image(\"image_timer/imgs/amogo.png\", 100)\nimg_btn = tk.Button(image=img1, compound=tk.LEFT, text=\"Sample 1\")\nimg_btn.pack()\n\nmw.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#loading-multiple-images-pack-view","title":"Loading multiple Images pack view","text":"<pre><code>mw = tk.Tk()\nmw.geometry(\"400x400\")\nmw.title(\"Img Btn text\")\n\nimg_btn_list={} # Container to hold the images\nfor img in glob.glob(\"image_timer\\imgs\\*.png\"):\n\n    img1 =  ImageTk.PhotoImage(load_image(img, 100))\n    name = os.path.splitext(os.path.basename(img))[0] # get the name\n    img_btn = tk.Button(image=img1, compound=tk.LEFT, text=name)\n    img_btn.pack()\n    img_btn_list.setdefault(img1, img_btn)\n\nmw.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#loading-multiple-images-in-grid-view","title":"Loading multiple Images in Grid View","text":"<pre><code># ... def load_image \n\nmw = tk.Tk()\nmw.geometry(\"400x400\")\nmw.title(\"Img Btn text\")\n\nimg_btn_list={} # Container to hold the images\nindex = 0\nfor img in glob.glob(\"image_timer\\imgs\\*.png\"):\n    row = index//3\n    col =  index%3\n    img1 = ImageTk.PhotoImage(load_image(img, 70))\n\n    name = os.path.splitext(os.path.basename(img))[0] # get the name\n\n    img_btn = tk.Button(image=img1, compound=tk.LEFT, \n                        text= f\"{name[:6]}...\" if len(name)&gt; 6 else name )\n    img_btn.grid(row=row ,column=col)\n    img_btn_list.setdefault(img1, img_btn)\n    index+=1\n\nmw.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#choose-image-loading-multiple-images-in-grid-view","title":"Choose Image &amp; Loading Multiple Images in grid View","text":"<pre><code># ... def load_image \n\ndef openfile():\n    new_img_files = fd.askopenfilenames(parent=win, title=\"Choose a File\")\n    print(win.splitlist(new_img_files))\n\n    display_images(new_img_files)\n\n\n\nimg_btn_list={} # Container to hold the images\n\ndef display_images(img_files):\n    index = 0\n    # for img in glob.glob(\"image_timer\\imgs\\*.png\"):\n    for img in img_files:\n        print(img)\n        row = index//4\n        col =  index%3\n        img1 = ImageTk.PhotoImage(load_image(img, 70))\n\n        name = os.path.splitext(os.path.basename(img))[0] # get the name\n\n        img_btn = tk.Button(images_frame, image=img1, compound=tk.LEFT, text= f\"{name[:6]}...\" if len(name)&gt; 6 else name )\n        img_btn.grid(row=row ,column=col)\n        img_btn_list.setdefault(img1, img_btn)\n        index+=1\n\nwin = tk.Tk()\nwin.minsize(400, 400)\nwin.title(\"Img Btn text\")\n\nselect_frame = tk.LabelFrame(win, text=\"select Images\", padx=10, pady=10,)\nselect_frame.pack()\nimages_frame = tk.LabelFrame(win, text=\"image list\", padx=10, pady=10,)\nimages_frame.pack()\n\nfile_btn =  tk.Button(select_frame, text=\"select Image files\",  command=openfile)\nfile_btn.grid(row=1, column=1)\n\n\nwin.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#working-with-grid-view-configuration","title":"Working with Grid view Configuration","text":"<p>For each widget, you can adjust base on how much space you want them the take</p> <p>check on the tkinter grid configure for widget on pythontutorial.net for better explanation</p>"},{"location":"python_docs/tkinter_doc/#working-with-toplevel","title":"Working with TopLevel","text":"<pre><code>import tkinter as tk\n\ndef activate_toplevel1():\n    top1 = tk.Toplevel()\n    top1.minsize(150, 150)\n    top1.title(\"I AM TOP-LEVEL 1\")\n\n    label_top1 = tk.LabelFrame(top1, text=\"Top 1 Label\", padx=10, pady=10)\n    tk.Button(label_top1, text=\"CLiCK ME\", command=open_topLevel2).pack()\n    tk.Button(label_top1, text=\"Exit\", fg=\"red\", command=top1.destroy).pack()\n\n    label_top1.pack()\n\n    top1.mainloop()\n\n\ndef open_topLevel2():\n    tp2 = tk.Toplevel()\n    tp2.geometry(\"250x400\")\n    tp2.title(\"Top 2\")\n\n    tk.Label(tp2, text=\"this is my label\").pack()\n    tk.Button(tp2, text=\"Exit\", fg=\"red\", command=tp2.destroy).pack()\n    tk.Button(tp2, text=\"Exit Main\", fg=\"red\", command=win.destroy).pack()\n\n    tp2.mainloop()\n\n\nwin  = tk.Tk()\nwin.minsize(250, 250)\nwin.title(\"Top level test\")\n\ntk.Label(win, text=\"This is the Main window\" ).pack()\ntk.Button(text=\"Start\", command=activate_toplevel1).pack()\n\nwin.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#loading-image-preview-in-another-window","title":"Loading image preview in another window","text":"<pre><code>def view_image(self, image, filename):\n\n        self.top1 = tk.Toplevel()\n        self.top1.minsize(300, 300)\n        self.top1.title(\"Image view\")\n\n        label1 = tk.Label(self.top1, text=f\"Image:{filename}\")\n        label1.pack()\n\n        canvas_width = image.width() +20\n        canvas_height = image.height() +20 \n        self.canvas = tk.Canvas(self.top1, width=canvas_width, height=canvas_height)\n        self.canvas.pack(padx=10, pady=10)\n        self.canvas.create_image(canvas_width/2, canvas_height/2, image=image)\n\n        self.top1.mainloop()\n\n\ndef display_images(self,img_files):\n        # ... Some prev. codes\n        index = 0\n        row = 0; col = 0\n        for img in img_files:\n            print(img)\n            row = index//4\n            col =  index%3\n            cropped_image = ImageTk.PhotoImage(load_image(img, 70))\n            full_image =ImageTk.PhotoImage(load_image(img))\n            name = os.path.splitext(os.path.basename(img))[0] # get the name\n\n            img_btn = tk.Button(self.images_frame, \n                image=cropped_image, compound=tk.LEFT, \n                text= f\"{name[:6]}...\" if len(name)&gt; 6 else name,\n                command=partial(self.view_image, full_image, name) \n                )\n\n\n            img_btn.grid(row=row ,column=col)\n            self.img_btn_list.setdefault(cropped_image, img_btn)\n            index+=1\n</code></pre>"},{"location":"python_docs/tkinter_doc/#get-the-window-screen-width-and-height","title":"Get the window screen width and height","text":"<pre><code>#Create an instance of tkinter frame\nwin= Tk()\n\n#Set the geometry of frame\nwin.geometry(\"650x250\")\n\n#Get the current screen width and height\nscreen_width = win.winfo_screenwidth()\nscreen_height = win.winfo_screenheight()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#ttk-button-styling","title":"ttk Button styling","text":"<pre><code>s = ttk.Style()\ns.configure('my.TButton', font=('Helvetica', 12))\nb = ttk.Button(mainframe, text='Press me', style='my.TButton',\ncommand=foo)\n</code></pre> <p>To style everything in your root</p> <pre><code>s = ttk.Style()\ns.configure('.', font=('Helvetica', 12))\n</code></pre>"},{"location":"python_docs/tkinter_doc/#basic-keyboard-keybind-in-tkinter","title":"Basic Keyboard keybind in tkinter","text":"<pre><code>import tkinter as tk\nimport tkinter.ttk as ttk\n\nwin = tk.Tk()\nwin.minsize(300, 500)\nwin.title(\"Keyboard evernt Bind Test\")\nwin.config(padx=20)\n\nfram1 = ttk.LabelFrame(win, text=\"Keyboard Bind\", padding=\"20 20\")\nfram1.pack()\n\nlabel1 = ttk.Label(fram1, text= \"Event Goes\", background=\"#ffffee\", padding=(20, 10))\nlabel1.pack(fill=tk.X)\n\n\n# General key bind\nwin.bind(\"&lt;Key&gt;\", lambda e : label1.config(text=f\"{e.char}, {e.keysym}, {e.keycode}\"))\n\n# Using lambda expression to bind key event\nwin.bind(\"a\", lambda e : label1.config(text=\"key small 'a' is pressed\"))\nwin.bind(\"A\", lambda e : label1.config(text=\"key Capital 'A' is pressed\")) # Note its case sensitive\n# key sequence example\nwin.bind(\"aZ\", lambda e : label1.config(text=\"aZ in is pressed\")) # only when the other is fulfilled\n\n# Special keys binding\n# &lt;Return&gt;, &lt;Up&gt;, &lt;Right&gt; &lt;Down&gt; - arrows\n# &lt;space&gt;, &lt;less&gt;\ncount = 0\ndef add_count(num) : \n    global count\n    count += num\n    return count\n\nwin.bind(\"&lt;Up&gt; \", lambda e : print(e.keysym, add_count(1)) )\nwin.bind(\"&lt;Down&gt; \", lambda e : print(e.keysym, add_count(-1)) )\n\n# Combined special keys bind with \nwin.bind(\"&lt;Control-Up&gt;\", lambda e : print(e.keysym, \"Control-up\"))\nwin.bind(\"&lt;Alt-m&gt;\", lambda e : print(e.keysym, \"Alt m pressed key\"))\nwin.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#basic-of-message-box-in-tkinter","title":"Basic of message box in tkinter","text":"<pre><code>import tkinter as tk\nimport tkinter.messagebox as msgbox\nimport tkinter.ttk as ttk\n\nwin = tk.Tk()\n\nwin.minsize(300, 300)\nwin.title(\"testing msg Box\")\n\ndef showmsg(type):\n    output = None\n\n    if type == \"AYNC\":\n        output = msgbox.askyesnocancel(title = \"Example0\", message=\"Do you know what to do? \", parent=win)\n\n    elif type == \"AYN\":\n        output = msgbox.askyesno(title= \"Exampe1\", message=\"Do you know me?\")\n\n    elif type == \"AQ\":\n        output = msgbox.askquestion(title=\"about you\", message=\"tell me about you\")\n\n    elif type == \"SI\":\n        output = msgbox.showinfo(\"showinfo example\", \"this is a message box\")\n\n    print(f\"Message {type} output is : {output}\" )\n\n\nbtn1 = ttk.Button(win, text= \"Press me!! AYNC \" , padding=\"10 10\", command= lambda : showmsg(\"AYNC\"))\nbtn2 = ttk.Button(win, text= \"Press me!! AYN \" , padding=\"10 10\", command= lambda : showmsg(\"AYN\"))\nbtn3 = ttk.Button(win, text= \"Press me!! AYQ \" , padding=\"10 10\", command= lambda : showmsg(\"AQ\"))\nbtn4 = ttk.Button(win, text= \"Press me!! SI \" , padding=\"10 10\", command= lambda : showmsg(\"SI\"))\nbtn1.pack()\nbtn2.pack()\nbtn3.pack()\nbtn4.pack()\n\nwin.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#scrollable-frame-example","title":"Scrollable Frame - Example","text":"<p>This is extracted from the code at blog.teclado scrollable frame</p> <pre><code>import tkinter as tk\nfrom tkinter import ttk\n\nwin = tk.Tk()\nwin.title(\"Testing Scrollabe Frame\")\nwin.minsize(300, 300)\nwin.config(padx=20, pady=20)\n\ns = ttk.Style()\ns.configure('my.TLabelframe', borderwidth=20, relief='solid', labelmargins=20, background=\"#ff99aa\")\ns.configure('my.TLabelframe.Label', font=('Helvetica', 10, 'italic'))\n\n# contianer to hold canvas\ncontainer = ttk.LabelFrame(win, text=\"Container Frame\", width=400, height=200, style=\"my.TLabelframe\", padding=(20, 20))\n\ncanvas = tk.Canvas(container)\nscrollbar = ttk.Scrollbar(container, orient=\"vertical\", command=canvas.yview)\n\ns.configure(\"my2.TLabelframe\", background=\"#ffaa00\")\nscrollable_frame = ttk.Frame(canvas, style=\"my2.TLabelframe\")\n\nscrollable_frame.bind(\n        \"&lt;Configure&gt;\", \n        lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\")))\n\ncanvas.create_window((0,0), window=scrollable_frame, anchor=\"nw\")\ncanvas.configure(yscrollcommand=scrollbar.set)\n\n# Load widget into the container\nfor i in range(50):\n    row_count = i // 4\n    col_count =  i % 4\n    ttk.Button(scrollable_frame, text=f\"Some Button \", padding=(20, 10)).grid(row=row_count, column=col_count, sticky=tk.N)\n\ncontainer.pack()\ncanvas.pack(side=\"left\", fill=\"both\", expand=True)\nscrollbar.pack(side=\"right\", fill=\"y\")\n\nwin.mainloop()\n</code></pre>"},{"location":"python_docs/tkinter_doc/#scrollable-frame-class","title":"Scrollable Frame class","text":"Scrollable.py<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\nclass ScrollableFrame(ttk.LabelFrame):\n    def __init__(self, container, *args, **kwargs):\n        super().__init__(container, *args, **kwargs)\n        canvas = tk.Canvas(self)\n        scrollbar = ttk.Scrollbar(self, orient=\"vertical\", command=canvas.yview)\n        scrollbar_h = ttk.Scrollbar(self, orient=\"horizontal\", command=canvas.xview)\n        self.scrollable_frame = ttk.Frame(canvas)\n\n        self.scrollable_frame.bind(\n            \"&lt;Configure&gt;\",\n            lambda e: canvas.configure(\n                scrollregion=canvas.bbox(\"all\")\n            )\n        )\n\n        canvas.create_window((0, 0), window=self.scrollable_frame, anchor=\"nw\")\n\n        canvas.configure(yscrollcommand=scrollbar.set)\n        canvas.configure(xscrollcommand=scrollbar_h.set)\n\n        scrollbar_h.pack(side=\"bottom\", fill=\"x\")\n        scrollbar.pack(side=\"right\", fill=\"y\")\n        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n</code></pre> main.py<pre><code>    ...\n    # Display list Frame\n    self.images_frame = ScrollableFrame(self.win, padding=(10,10))\n    self.images_frame.pack(fill=tk.BOTH)\n    ...\n    for img in img_files:\n        ...\n        new_img.display_button(self.images_frame, row_count, col_count)\n</code></pre>"},{"location":"python_docs/work_with_excel/","title":"Working With Excel Files","text":""},{"location":"python_docs/work_with_excel/#basics-get-value-from-a-cell","title":"Basics - Get value from a cell","text":"<p>first install <code>openpyxl</code>package on your computer</p> <p>I have download my xlsx file</p> <p></p> <p>Sample code:</p> <pre><code>import openpyxl as xl\n\nwb = xl.load_workbook('bookkeeping.xlsx')\n\nincome_sht = wb['INCOME']\nprint(income_sht['b7'].value) # get b7 cell value\nprint(income_sht.cell(7,3).value) # Another way to get row and column cell\n</code></pre>"},{"location":"python_docs/work_with_excel/#updating-a-column-value","title":"Updating a column value","text":"<pre><code>import openpyxl as xl\n\nwb = xl.load_workbook('bookkeeping.xlsx')\n\nincome_sht = wb['INCOME']\n\nfor row in range(4, 7+1):\n    # income amount\n    inc_amount = income_sht.cell(row, 3).value\n    print(inc_amount)\n\n    # corrected 'neccesity amount' \n    necc_amount = float(inc_amount)* 0.5\n\n    # get cell in 'neccesity col' and update it \n    necc_cell = income_sht.cell(row, 4)\n    necc_cell.value = necc_amount\n\n# create a copy of the excel file\nwb.save('bookkeeping2.xlsx')\n</code></pre>"},{"location":"python_docs/work_with_excel/#drawing-a-barchart-of-values","title":"Drawing a Barchart of Values","text":"<pre><code>import openpyxl as xl\nfrom openpyxl.chart import BarChart, Reference\n\nwb = xl.load_workbook('bookkeeping.xlsx')\n\nincome_sht = wb['INCOME']\n\nfor row in range(4, 7+1):\n    # income amount\n    inc_amount = income_sht.cell(row, 3).value\n    print(inc_amount)\n\n    # corrected 'neccesity amount' \n    necc_amount = float(inc_amount)* 0.5\n\n    # get 'neccesity col' and update it \n    necc_cell = income_sht.cell(row, 4)\n    necc_cell.value = necc_amount\n\n# Get the rows and column to draw\nvalues_to_draw = Reference(income_sht, \n                           min_row=4, max_row=8,\n                            min_col=4, max_col=4)\n\n# draw on the xl file\nchart = BarChart()\nchart.add_data(values_to_draw)\nincome_sht.add_chart(chart, 'b12')\n\n# create a copy of the excel file\nwb.save('bookkeeping2.xlsx')\n</code></pre>"},{"location":"python_docs/zcode_examples/","title":"Code Examples","text":""},{"location":"python_docs/zcode_examples/#conways-game-of-life","title":"Conway's Game of Life","text":"<pre><code># Conway's Game of Life\n\nimport random, time, copy\n\nWIDTH = 60\nHEIGHT = 20\n\n# create a list of list for the cells:\nnextCells = []\nfor x in range(WIDTH):\n    column = [] # Create a new column\n    for y in range(HEIGHT):\n        if random.randint(0,1) == 0:\n            column.append('#') # Add a living cell\n        else:\n            column.append(' ') # Add a dead cell\n    nextCells.append(column) # nextCells is a list of column lists.\n\nwhile True: # Main program loop\n    print('\\n'*5) # Seperate each step with newlines\n    currentCells = copy.deepcopy(nextCells)\n\n    # Print currentCells on the screen:\n    for y in range(HEIGHT):\n        for x in range(WIDTH):\n            print(currentCells[x][y], end='') # Print # or space\n        print() # Print a newline at the end of the row\n\n    # Calculate the next step's cell based on current step's cells:\n    for x in range(WIDTH):\n        for y in range(HEIGHT):\n            # Get neighbouring coordinates\n            # '% WIDTH' ensures leftCoord is always between 0 and WIDTH - 1\n            leftCoord = (x - 1) % WIDTH\n            rightCoord = (x + 1) % WIDTH\n            aboveCoord = (y - 1) % HEIGHT\n            belowCoord = (y + 1) % HEIGHT\n\n            # Count number of living neighbors\n            numNeighbours = 0\n            if currentCells[leftCoord][aboveCoord] == '#':\n                numNeighbours += 1 # Top left neighbor is alive\n            if currentCells[x][aboveCoord] == '#':\n                numNeighbours += 1 # Top neighbor is alive\n            if currentCells[rightCoord][aboveCoord] == '#':\n                numNeighbours += 1 # Top right neighbor is alive\n            if currentCells[leftCoord][y] == '#':\n                numNeighbours += 1 # Left neighbor is alive\n            if currentCells [rightCoord][y] == '#':\n                numNeighbours += 1 # right neighbor is alive\n            if currentCells[leftCoord][belowCoord] == '#':\n                numNeighbours += 1 # Bottom-left neighbor is alive\n            if currentCells[x][belowCoord] == '#':\n                numNeighbours += 1 # Bottom neighbor is alive\n            if currentCells[rightCoord][belowCoord] == '#':\n                numNeighbours += 1 # Bottom-right neighbor is alive\n\n            # Set cell based on Conway's Game of life rules:\n            if currentCells[x][y] == '#' and (numNeighbours == 2 or numNeighbours == 3):\n                # living cells with 2 or 3 neighbors stay alive\n                nextCells[x][y] = '#'\n            elif currentCells[x][y] == ' ' and numNeighbours == 3:\n                # Dead cells with 3 neighbors become alive:\n                nextCells[x][y] = '#'\n            else:\n                # Everything else dies or stays dead:\n                nextCells[x][y] = ' '\n\n    time.sleep(1) # Add a 1-second pause or reduce flickering\n</code></pre>"},{"location":"python_docs/zcode_examples/#ceaser-cypher","title":"Ceaser Cypher","text":"<p>This is based on tutorial offered by Angela Yu</p>"},{"location":"python_docs/zcode_examples/#version-1","title":"Version 1:","text":"<pre><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', \n            'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',' ']\n\n\n# function 'encrypt' that takes the 'text' and 'shift' as inputs.\ndef encrypt(plain_text, shift_amount):\n\n    #shift each letter of the 'text' forwards in the alphabet by the shift \n    # amount and print the encrypted text.  \n    encode_text=\"\"\n    for letter in plain_text:\n        new_index = alphabet.index(letter) + shift_amount # shift the index\n\n        if(new_index &gt; len(alphabet)-1): # if index is out of range\n            new_index = (new_index % (len(alphabet))) # circle back to begin index\n\n        encode_text += alphabet[new_index]\n\n    print(encode_text)\n\n# function 'decrypt' takes text and shift amount\ndef decrypt(cipher_text, shift_amount):\n\n     decode_text=\"\"\n     for letter in cipher_text:\n        orig_index = alphabet.index(letter) - shift_amount # shift the index\n\n        if(orig_index &lt; 0): # index in -ve\n            orig_index = (len(alphabet)) + orig_index # go to end index\n\n        decode_text += alphabet[orig_index]\n\n     print(decode_text)\n\ndef user_direction():\n\n    direction = input(\"Type 'encode' to encrypt, type 'decode' to decrypt:\\n\")\n    text = input(\"Type your message:\\n\").lower()\n    shift = int(input(\"Type the shift number:\\n\"))\n\n    if direction == \"encode\":\n        encrypt(plain_text=text, shift_amount=shift) \n    elif direction == \"decode\":\n        decrypt(cipher_text=text, shift_amount=shift)\n\nuser_direction()\n</code></pre>"},{"location":"python_docs/zcode_examples/#version-2-my-version","title":"Version 2 : My version","text":"<pre><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', \n            'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',' ']\n\n# ceaser function 'encrpyt' and 'decrpyt' text\ndef ceasar(cipher_direction, input_text, shift_amount):\n\n    cypher_text=\"\"\n\n    for letter in input_text:\n        if cipher_direction == \"encode\":\n            new_index = alphabet.index(letter) + shift_amount # shift the index\n\n            if(new_index &gt; len(alphabet)-1): # if index is out of range\n                new_index = (new_index % (len(alphabet))) # circle back to begin index\n\n\n        elif cipher_direction == \"decode\":\n            new_index = alphabet.index(letter) - shift_amount # shift the index\n\n            if(new_index &lt; 0): # index in -ve\n                new_index = (len(alphabet)) + new_index # go to end index\n\n        cypher_text += alphabet[new_index]\n\n    print(f\"The {cipher_direction}d text is {cypher_text}\")\n\n\n\ndef user_direction():\n\n    direction = input(\"Type 'encode' to encrypt, type 'decode' to decrypt:\\n\")\n    text = input(\"Type your message:\\n\").lower()\n    shift = int(input(\"Type the shift number:\\n\"))\n\n    ceasar(direction, input_text=text, shift_amount=shift) \n\nuser_direction()\n</code></pre>"},{"location":"python_docs/zcode_examples/#version-3-final","title":"Version 3: Final","text":"<pre><code>alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', \n            'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',' ']\n\nfrom art import ceaser_logo\n\n\n# ceaser function 'encrpyt' and 'decrpyt' text\ndef ceasar(cipher_direction, input_text, shift_amount):\n\n    cypher_text=\"\"\n\n    for char in input_text:\n\n        if char in alphabet: \n            position = alphabet.index(char) \n\n            if cipher_direction == \"decode\": \n                new_position = position - shift_amount\n                if(new_position &lt; 0): # index in -ve\n                    new_position = (len(alphabet)) + new_position # go to end index\n\n            elif cipher_direction == \"encode\":\n                new_position = position + shift_amount\n                if(new_position &gt; len(alphabet)-1): # if index is out of range\n                    new_position = (new_position % (len(alphabet))) # circle back to begin index\n\n            cypher_text += alphabet[new_position]\n        else:\n            cypher_text += char\n\n    print(f\"The {cipher_direction}d text is &lt;&lt;{cypher_text}&gt;&gt;\")\n\n\n\ndef main():\n    print(ceaser_logo)\n\n    terminal=\"Y\"\n    while(terminal != \"N\" ):\n        direction = input(\"Type 'encode' to encrypt, type 'decode' to decrypt:\\n\")\n        if(direction != \"encode\" and direction != \"decode\"):\n            print(f\"{direction} is not acceptable type 'encode' or 'decode'\" )\n            continue\n\n        text = input(\"Type your message:\\n\").lower()\n\n        shift = int(input(\"Type the shift number:\\n\")) % len(alphabet)\n\n        ceasar(direction, input_text=text, shift_amount=shift) \n\n        terminal= input(\"Type 'Y' to start or 'N' to exit:\\n \").upper()\n\nmain()\n</code></pre>"},{"location":"python_docs/zcode_examples/#black-jack-card-game","title":"Black Jack Card game","text":"<pre><code>import random\nimport os \nfrom art import blackjack_logo\n\n# cards\ndef deal_card():\n    \"\"\"Deal random cards\"\"\"\n    cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]\n    card = random.choice(cards)\n    return card\n\ndef calculate_score(cards):\n    \"\"\"Take a list of cards and returns the score cal. from cards \"\"\"\n    if sum(cards) == 21 and len(cards) == 2:\n        return 0 # score of blackjack\n\n    # Ace card use case\n    if 11 in cards and sum(cards) &gt; 21:\n        cards.remove(11)\n        cards.append(1)\n    return sum(cards)\n\ndef compare(user_sc, computer_sc):\n    if user_sc == computer_sc:\n        return \"Draw Scores\"\n    elif computer_sc == 0:\n        return \"You Lose, opponent has blackjack\"\n    elif user_sc == 0:\n        return \"You Win with a blackjack\"\n    elif user_sc &gt; 21:\n        return \"You went over, you lose\"\n    elif computer_sc &gt; 21:\n        return \"Opponent went over, You win\"\n    elif user_sc &gt; computer_sc:\n        return \"You win\"\n    else:\n        return \"You lose\"\n\n\n\ndef play_game():\n\n    print(blackjack_logo)\n\n    user_cards = []\n    computer_cards = []\n    is_game_over = False\n\n    for _ in range(2):\n        user_cards.append(deal_card())\n        computer_cards.append(deal_card())\n\n    # for the users\n    while not is_game_over:\n        # if the user or computer has blackjack(0) or if the score is over 21, game ends\n        user_score = calculate_score(user_cards)\n        computer_score = calculate_score(computer_cards)\n        print(f\"  Your cards: {user_cards}, current score: {user_score}\")\n        print(f\"  Computer's first card: {computer_cards[0]}\")\n\n        if user_score == 0 or computer_score == 0 or user_score &gt; 21:\n            is_game_over = True \n        else:\n            user_should_deal = input(\" Type 'y' to get another card, type 'n' to pass: \")\n            if user_should_deal == 'y':\n                user_cards.append(deal_card())\n            else:\n                is_game_over = True\n\n\n    # case of computer card deal\n    while computer_score != 0 and computer_score &lt; 17:\n        computer_cards.append(deal_card())\n        computer_score = calculate_score(computer_cards)\n\n    # print game details\n    print(f\" Your final hand: {user_cards}, final score: {user_score}\")\n    print(f\" Computer's final hand: {computer_cards}, final score: {computer_score}\")\n    # compare the computer and user score\n    print(compare(user_sc=user_score, computer_sc=computer_score))\n\nplay_game()\n\nwhile input(\"Do you want to keep playing the game? y/n:\") == 'y':\n    os.system('cls')\n    play_game()\n</code></pre>"},{"location":"python_docs/zcode_examples/#guess-game","title":"Guess Game","text":"<pre><code>from random import randint\n\nEASY_LEVEL_LIFE = 10\nHARD_LEVEL_LIFE = 5\n\ndef check_answer(guess, answer, turns):\n    \"\"\"check answer angainst guess, return the 'turns' \"\"\"\n    if guess &gt; answer:\n        print(\"Too high\")\n        return turns - 1\n\n    elif guess &lt; answer:\n        print(\"Too low\")\n        return turns - 1\n    else:\n        print(f\"You got it! The answer is {answer}\")\n        return turns\n\n\ndef set_difficulty():\n    level = input(\"Choose a difficulty, Type 'easy' or 'hard'\")\n    if level == 'easy':\n        return EASY_LEVEL_LIFE\n    else:\n        return HARD_LEVEL_LIFE\n\n\n\ndef guess_game():\n    print(\"Welcome to the Number Guessing Game!\")\n    print(\"I'm thinking of a number between 1 and 100\")\n    # let computer guess\n    computer_ans = randint(1, 100)\n    # print(f\"DEV::the correct answer is {computer_ans}\")\n\n    turns = set_difficulty()\n\n    # repeat the guessing functionality \n    user_guess = 0\n    while user_guess != computer_ans:\n        # Notify the number of life left\n        print(f\"You have {turns} turns left\")\n\n        #Let the user guess a number\n        user_guess = int(input(\"What is the number: \"))\n\n        # Check if the number guessed is correct\n        turns = check_answer(turns=turns, guess=user_guess, answer=computer_ans)\n\n        if turns == 0:\n            print(\"You run out of guesses, Your Loss\")\n            return\n        elif user_guess != computer_ans:\n            print(\"Guess again!\\n\")\n\nguess_game()\n</code></pre>"},{"location":"python_docs/zcode_examples/#higherlower-my-version","title":"HigherLower My Version","text":"<pre><code>from game_data import hl_data\nimport random\n\n\n# fetch ig data at random\ndef gen_random_account():\n    \"\"\"Generate two ig account at random, returns the data\"\"\"\n    return random.choice(hl_data)\n\n\n# function to check whose data is greater\ndef check_user_guess(data1, data2, guess):\n    \"\"\"Check whose followers is greater and returns the greater data\"\"\"\n\n    if guess == 'H' and data2[\"follower_count\"] &gt; data1[\"follower_count\"]:\n        print(f\"Correct, {data2['name']}, followers: {data2['follower_count']} &gt; {data1['name']}, followers: {data1['follower_count']}\\n\")\n\n    elif guess == 'L' and data2[\"follower_count\"] &lt; data1[\"follower_count\"]:\n        print(f\"Correct, {data2['name']}, followers: {data2['follower_count']} &lt; {data1['name']}, followers: {data1['follower_count']}\\n\")\n\n    elif guess == 'H' and data2[\"follower_count\"] &lt; data1[\"follower_count\"]:\n        print(f\"Wrong, {data2['name']}, followers: {data2['follower_count']} &lt; {data1['name']}, followers: {data1['follower_count']}\\n\")\n        return\n\n    elif guess == 'L' and data2[\"follower_count\"] &gt; data1[\"follower_count\"]:\n        print(f\"Wrong, {data2['name']}, followers: {data2['follower_count']} &gt; {data1['name']}, followers: {data1['follower_count']}\\n\")\n        return\n\n    return data2\n\n\n\nuser_score = 0\n\n# data 1, data 2\ncurrent_data = gen_random_account()\n\nwhile current_data != None:\n\n    next_data = gen_random_account()\n\n    # Case of same data, get new random acct.\n    if current_data == next_data:\n        next_data = gen_random_account()\n\n    # Ask user which is greater data1 or data 2\n    user_suggest = input(f\"\\nthe acct. A=&gt;  {current_data['name']} has {current_data['follower_count']} Million follwers,\\nand acct. B=&gt; is {next_data['name']}, is B Higer or Lower(H\\L): \").upper()\n\n    current_data = check_user_guess(data1=current_data, data2=next_data, guess=user_suggest)\n    if current_data == None:\n        print(\"sorry! You Lose, Your score is \", user_score )\n    else:\n        user_score+= 1\n</code></pre>"},{"location":"python_docs/zcode_examples/#writing-letters-to-multiple-invites","title":"Writing Letters to Multiple Invites","text":"<pre><code>#TODO: Create a letter using starting_letter.txt \nplaceholder = \"[name]\" # Names to be replaced\n\nwith open(\"./MailMerge/Input/Names/invited_names.txt\", mode='r') as file:\n    name_list = [f.strip() for f in file.readlines()]\n\n# open the \"example.txt\"\nwith open(\"./MailMerge/Input/Letters/starting_letter.txt\", mode='r') as letter_content:\n    template_letter = letter_content.read()\n\nfor name in name_list: \n    # replace name in temp letter\n    new_letter = template_letter.replace(placeholder, name)\n    # write a new letter \n    with open(f\"./MailMerge/Output/ReadyToSend/invited_for_{name}.txt\", mode='w') as completed_letter:\n        completed_letter.write(new_letter)\n</code></pre> <p>Directory File structure </p>"},{"location":"python_docs/zcode_examples/#nato-words-listdictionary-comprehension","title":"NATO Words list/Dictionary Comprehension","text":"<pre><code>import pandas as pd\n\nnato_data = pd.read_csv(\"./day26-list-comp/nato_alphabet.csv\")\n\nnato_dict = {row.letter: row.code for(index, row) in nato_data.iterrows() }\n\n# get the user name input\nuser_name = input(\"Enter your name:\").upper()\n\nuser_nato_name = [nato_dict[nato] for nato in user_name ]\nprint(user_nato_name)\n</code></pre>"},{"location":"python_docs/zcode_examples/#podomoro-gui","title":"Podomoro - GUI","text":"<pre><code>import tkinter as tk\nimport math\n# ---------------------------- CONSTANTS \nPINK = \"#e2979c\"\nRED = \"#e7305b\"\nGREEN = \"#9bdeac\"\nYELLOW = \"#f7f5dd\"\nFONT_NAME = \"Courier\"\nWORK_MIN = 0.2 #25\nSHORT_BREAK_MIN = 0.05 #5\nLONG_BREAK_MIN = 0.1 #20\nBUTTON_FONT = (\"Consolas\", 15, \"bold\") \nis_countdown = False\nis_count_finished = False\ng_c = 0\nreps = 0\ntimer = None\n\n# ---------------------------- TIMER RESET \ndef reset_timer():\n    global reps\n    reps = 0\n    root.after_cancel(timer)\n    canvas.itemconfig(timer_text, text=\"00:00\")\n    title_label.config(text=\"Timer\")\n    checks_label.config(text=\"\")\n\n\n# ---------------------------- TIMER MECHANISM \n\ndef play_pause():\n    global is_countdown\n\n    if not is_count_finished: # not done\n        is_countdown = not is_countdown # flip count\n\n        # continue countdown\n        if g_c &gt; 0 and is_countdown:\n            pause_btn.config(text=\"Pause\")\n            count_down(g_c, 0)\n        else:\n            pause_btn.config(text=\"Play\")\n\ndef start_timer():\n    global is_count_finished\n    global is_countdown\n    global g_c\n    global reps\n    # start all over again\n    is_count_finished = False\n    is_countdown = True\n    g_c = 0\n\n    reps+=1\n\n    work_sec = int(WORK_MIN * 60)\n    short_break_sec = int(SHORT_BREAK_MIN * 60)\n    long_break_sec = int(LONG_BREAK_MIN * 60)\n\n\n    if reps %8 == 0:\n        count_down(long_break_sec, 0)\n        title_label.config(text=\"Long Break\", fg=GREEN)\n    elif reps %2 == 0:\n        count_down(short_break_sec, 0)\n        title_label.config(text=\"Short Break\", fg=PINK)\n    else:\n        count_down(work_sec, 0)\n        title_label.config(text=\"Work Time\", fg=RED)\n\n    print(\"Starting count_down\")\n\n\n# ---------------------------- COUNTDOWN MECHANISM \n\ndef count_down(count, g_count):\n    global is_count_finished\n    global is_countdown\n    global g_c\n    global timer\n\n    # end count once '0'\n    if count == 0 : \n        is_count_finished = True\n        g_c = 0\n        print(\"==Finished Count==\")\n    if is_countdown:\n        g_count = count # global count\n        count_min = math.floor(count/60)\n        count_sec = count % 60\n\n        canvas.itemconfig(timer_text, text=f\"{count_min:02d}:{count_sec:02d}\")\n        if count &gt; 0:\n            timer = root.after(1000, count_down, count - 1, g_count)\n        else:\n            start_timer()\n            marks =\"\"\n            work_sessions = math.floor(reps/2)\n            for _ in range(work_sessions):\n                marks += \"\u2714\ufe0f\"\n            checks_label.config(text=marks)\n    else:\n        g_c = g_count # update global count\n        print(g_count)\n\n# ---------------------------- UI SETUP ------------------------------- #\nroot = tk.Tk()\nroot.title(\"Pomodoro\")\nroot.config(padx=50, pady=50, bg=YELLOW)\n\n\n# Timer Stage label\ntitle_label = tk.Label(text=\"Timer\", fg=GREEN, bg=YELLOW, font=(FONT_NAME, 35, \"bold\"), pady=20)\ntitle_label.grid(row=0, column=1)\n\n# Create the canvas \ncanvas = tk.Canvas(width=200, height=224, bg=YELLOW, highlightthickness=0)\n\n# loading image\ntomato_img = tk.PhotoImage(file=\"day28-pomodoro/tomato.png\")\ncanvas.create_image(100, 112, image = tomato_img)\ntimer_text = canvas.create_text(103, 130, text=\"00:00\", fill=\"white\", font=(FONT_NAME, 35, \"bold\" ))\ncanvas.grid(row=1, column=1)\n\n# count_down(5)\n\n# Start Button\nstart_btn = tk.Button(text=\"Start\", font=BUTTON_FONT, command=start_timer)\nstart_btn.grid(row=2, column=0)\n\n# pause button\npause_btn = tk.Button(text=f\"Pause\", font=BUTTON_FONT, command=play_pause)\npause_btn.grid(row=3, column=0)\n\n# Reset Button\nreset_btn = tk.Button(text=\"Reset\", font=BUTTON_FONT, command=reset_timer)\nreset_btn.grid(row=2, column=2)\n\n# Check mark Label\nchecks_label= tk.Label(fg=GREEN, bg=YELLOW, font=(\"Arial\", 8))\nchecks_label.grid(row=3, column=1)\n\n\nroot.mainloop()\n</code></pre>"},{"location":"python_docs/zcode_examples/#timer-code","title":"Timer code","text":"<p>To see the the Timer code file Click here</p>"},{"location":"python_docs/zcode_examples/#flash-card-code","title":"Flash Card - Code","text":"<pre><code>import tkinter as tk\nimport pandas as pd\nimport random\n\n\nBACKGROUND_COLOR = \"#B1DDC6\"\napp_dir = \"./day31-flashcard\"\ncurrent_card= {}\n\n# Load the Csv data\ntry:\n    data = pd.read_csv(f\"{app_dir}/data/words_to_learn.csv\")\nexcept FileNotFoundError:\n    original_data = pd.read_csv(f\"{app_dir}/data/french_words.csv\")\n    to_learn = original_data.to_dict(orient='records')\nelse:\n    to_learn = data.to_dict(orient='records')\n\n\ndef next_card():\n    global current_card, flip_timer\n    win.after_cancel(flip_timer) # remove timer if next\n    current_card = random.choice(to_learn)\n\n    # flip to the front card\n    canvas.itemconfig(card_title, text=\"French\", fill=\"#ff00aa\")\n    canvas.itemconfig(card_word, text=current_card[\"French\"], fill=\"#aa00ff\")\n    canvas.itemconfig(card_bg, image=card_front_img)\n    flip_timer = win.after(3000, flip_card) # recreate the timer\n\n\ndef flip_card():\n    # flip the the backcard\n    canvas.itemconfig(card_title, text=\"English\", fill = \"#333\")\n    canvas.itemconfig(card_word, text=current_card[\"English\"], fill=\"#fff\")\n    canvas.itemconfig(card_bg, image=card_back_img)\n\ndef is_known():\n    to_learn.remove(current_card)\n    data = pd.DataFrame(to_learn)\n    data.to_csv(f\"{app_dir}/data/words_to_learn.csv\", index=False)\n    next_card()\n\nwin = tk.Tk()\nwin.title(\"flash card\")\nwin.config(bg=BACKGROUND_COLOR, padx=20, pady=20)\nflip_timer = win.after(3000, func=flip_card)\n\n# Load the Images data\nwrong_img = tk.PhotoImage(file=f\"{app_dir}/images/wrong.png\")\nright_img = tk.PhotoImage(file=f\"{app_dir}/images/right.png\")\ncard_front_img = tk.PhotoImage(file=f\"{app_dir}/images/card_front.png\")\ncard_back_img = tk.PhotoImage(file=f\"{app_dir}/images/card_back.png\")\n\n# Flash cards widgets\ncvs_width = 800\ncvs_height = 530 \ncanvas = tk.Canvas(win, width=cvs_width, height=cvs_height, highlightthickness=0, background=BACKGROUND_COLOR)\ncanvas.grid(row=0, column=0, columnspan=2)\n\n# Front Image BG\ncard_bg = canvas.create_image(cvs_width/2, cvs_height/2, image=card_front_img)\n# Title Text\ncard_title = canvas.create_text(400, 150, text=\"French\", fill=\"#ff00aa\", font=(\"Ariel\", 30, \"italic\") )\n# Word text\ncard_word = canvas.create_text(400, 235, text=\"Voudrais\", fill=\"#aa00ff\", font=(\"Ariel\", 60, \"bold\"))\n\n\n# Button widgets\nunknown_btn = tk.Button(win, image=wrong_img, highlightthickness=0, border=0, command=next_card)\nknown_button = tk.Button(win, image=right_img, highlightthickness=0, border=0, command=is_known)\nunknown_btn.grid(row=1, column=0)\nknown_button.grid(row=1, column=1)\n\nnext_card()\n\nwin.mainloop()\n</code></pre>"},{"location":"python_docs/zcode_examples/#scrapping-zillow-clone-and-input-the-data","title":"Scrapping Zillow-clone and Input the data","text":"<pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom bs4 import BeautifulSoup\nfrom prettyprinter import pprint\nimport requests, time\n\n\n# Scrapping the zillow-clone website online\nresponse = requests.get(\"https://appbrewery.github.io/Zillow-Clone/\")\nhtml_doc = response.text\n\nsoup = BeautifulSoup(html_doc, \"html.parser\")\n\nhouse_data = []\nhouses_html = soup.select(selector=\".StyledPropertyCardDataWrapper\")\nhouse1 = houses_html[0]\n\nfor house in houses_html:\n    info = {}\n    info[\"addr\"] = house.find('a').get_text().strip().replace(\"|\",\",\" )\n    info[\"price\"] = house.find(class_=\"PropertyCardWrapper__StyledPriceLine\").get_text().strip().split('/')[0].replace(\"+\",\"\")\n    info[\"link\"] = house.find('a').get('href')\n    house_data.append(info)\n\n\n# Selenium filling the form on google docs\n\nchrom_options = webdriver.ChromeOptions()\nchrom_options.add_experimental_option(\"detach\", True)\ndriver = webdriver.Chrome(options=chrom_options)\n\n\ndriver.get(\"https://docs.google.com/forms/d/e/1FAIpQLSescRSkofMMxnEiZ9VQTHJni15Nn3iOmoqWJkmkSjPDOH4CvQ/viewform?usp=sf_link\")\n\n# wait 3secs\ntime.sleep(8)\n\nfor info in house_data[:10]:\n\n    # fill the address\n    addr_form = driver.find_element(By.XPATH, value='//*[@id=\"mG61Hd\"]/div[2]/div/div[2]/div[1]/div/div/div[2]/div/div[1]/div/div[1]/input')\n    addr_form.click()\n    addr_form.send_keys(info[\"addr\"])\n    time.sleep(1)\n\n    # # fill the price\n    price_form = driver.find_element(By.XPATH, value='//*[@id=\"mG61Hd\"]/div[2]/div/div[2]/div[2]/div/div/div[2]/div/div[1]/div/div[1]/input')\n    price_form.click()\n    price_form.send_keys(info['price'])\n    time.sleep(1)\n\n\n    # # fill in the link\n    link_form = driver.find_element(By.XPATH, value='//*[@id=\"mG61Hd\"]/div[2]/div/div[2]/div[3]/div/div/div[2]/div/div[1]/div/div[1]/input')\n    link_form.click()\n    link_form.send_keys(info['link'])\n    time.sleep(1)\n\n    submit = driver.find_element(By.XPATH, '//*[@id=\"mG61Hd\"]/div[2]/div/div[3]/div[1]/div[1]/div')\n    submit.click()\n\n    time.sleep(5)\n\n    driver.get(\"https://docs.google.com/forms/d/e/1FAIpQLSescRSkofMMxnEiZ9VQTHJni15Nn3iOmoqWJkmkSjPDOH4CvQ/viewform?usp=sf_link\")\n\n    # wait 3secs\n    time.sleep(3)\n\n\n\ndriver.quit()\n</code></pre>"},{"location":"python_docs/zcode_examples/#love-calculator-worked-example","title":"Love Calculator (Worked Example)","text":"<pre><code>def calculate_love_score(name1, name2):\n    combined_names = name1 + name2\n    lower_names = combined_names.lower()\n\n    t = lower_names.count(\"t\")\n    r = lower_names.count(\"r\")\n    u = lower_names.count(\"u\")\n    e = lower_names.count(\"e\")\n    first_digit = t + r + u + e\n\n    l = lower_names.count(\"l\")\n    o = lower_names.count(\"o\")\n    v = lower_names.count(\"v\")\n    e = lower_names.count(\"e\")\n    second_digit = l + o + v + e\n\n\n    score = int(str(first_digit) + str(second_digit))\n    print(score)\n\ncalculate_love_score(\"Kanye West\", \"Kim Kardashian\")\n</code></pre>"},{"location":"python_docs/zcode_examples/#love-calculator-my-worked","title":"Love Calculator (My Worked)","text":"<pre><code>def calculate_love_score(name1, name2):\n    true_count = {}\n    love_count = {}\n    sum_t = sum_l = 0\n    names = name1 + name2\n    for ch in names.upper():\n\n        if ch in 'TRUE':\n            true_count.setdefault(ch, 0)\n            true_count[ch] += 1\n\n        if ch in 'LOVE':\n            love_count.setdefault(ch, 0)\n            love_count[ch] += 1\n\n    for (_, v) in true_count.items(): sum_t+=v\n    for (_, v) in love_count.items() : sum_l+=v\n    print(str(sum_t) + str(sum_l))\n\ncalculate_love_score(\"Angela Yu\", \"Jack Bauer\")\n</code></pre>"},{"location":"python_docs/zcode_examples/#student-grades","title":"Student Grades","text":"<pre><code>student_scores = {\n    'Harry': 88,\n    'Ron': 78,\n    'Hermione': 95,\n    'Draco': 75,\n    'Neville': 60\n}\n\n\nstudent_grades ={}\n\nfor name, score in student_scores.items():\n\n    if 91 &lt; score &lt; 100:\n        student_grades[name] = \"Outstanding\" \n    elif 81 &lt; score &lt; 90 :\n        student_grades[name] = \"Exceeds Expectations\"\n    elif 71 &lt; score &lt; 80:\n        student_grades[name] = \"Acceptable\"\n    elif score &lt;= 70:\n        student_grades[name] = \"Fail\"\n\nprint(student_grades)\n</code></pre>"},{"location":"python_docs/zcode_examples/#site-downloader","title":"Site Downloader","text":"<pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nimport os, time, requests, random\nfrom prettyprinter import pprint\n\n\ndef download_image(url, save_as):\n\n    # download image an save in current work dir\n    res = requests.get(url, stream=True)\n\n    # Output total file size\n    total_size = int(res.headers.get('content-length', 0))\n    total_size_kb = round(total_size/1024, 2)\n\n    # Download info:\n    print(f\"Downloading - {os.path.basename(save_as)}\")\n    print(f\"File size - {total_size_kb}kb\")\n\n\n    done = downloaded = 0\n    with open(save_as, 'wb') as file:\n\n        # iterate over content to download\n        chunk_size = int(total_size/100)\n        for data in res.iter_content(chunk_size=chunk_size):\n            file.write(data)\n            downloaded += chunk_size\n            done += 1\n\n            # print download progress\n            progress =f\"[{'='*(int(done/2))}|({done}%){round(downloaded/1024, 2)}/{total_size_kb}]\" \n            print(progress, end=\"\\r\")\n\n\n            # Download is complete\n            if downloaded &gt;= total_size:\n                done = 100\n                progress =f\"[{'='*(int(done/2))}|({done}%){total_size_kb}/{total_size_kb}kb]\" \n                print(progress)\n\ndef download_from_site(save_to_dir):\n\n    for page in page_data:\n\n        comic_page_link = page['link']\n        title = page['title']\n\n        # load the new page\n        driver.get(comic_page_link)\n        time.sleep(2)\n\n        # create directory in pictures folder\n        comic_name = comic_page_link.split(\"/\")[-2]\n\n        # get img path online\n        img_path = driver.find_element(By.CSS_SELECTOR, value=\".photo img\").get_attribute(\"src\")\n\n        # create directory if not already existing\n        if not os.path.isdir(save_to_dir):\n            os.makedirs(save_to_dir)\n\n        # download image to new folder\n        download_image(img_path, f\"{save_to_dir}/{comic_name}-{title}.jpg\")\n\n        # Wait a little for going to next page\n        time.sleep(random.randint(1, 6))\n\n\n\nchrom_options = webdriver.ChromeOptions()\nchrom_options.add_experimental_option(\"detach\", True)\ndriver = webdriver.Chrome(options=chrom_options)\n\ncomic_page = \"https://site.to.download.com/dir1/dir2/dir3/issue-page\"\ndriver.get(comic_page)\n\npage_list = driver.find_elements(By.CLASS_NAME , \"c-tile\")\n\nprint(\"\\n\".join([str({\"title\": page.get_attribute('title'), \"link\":page.get_attribute('href')}) for page in page_list]))\npage_data = [{\"title\": page.get_attribute('title'), \"link\":page.get_attribute('href')} for page in page_list]\n\nres = input(\"Do you want to continue? y/n : \")\n\nif res == 'n' or res == 'N':\n    driver.quit()\n\nelse :\n    # create directory in pictures folder\n    comic_page_link = comic_page\n    comic_page_directories = comic_page_link.split(\"/\")[5:] # Get necessary directory\n    site_name = \"SiteName\"\n    comic_folder = f\"C:/Users/adegb/Pictures/{site_name}/{'/'.join(comic_page_directories)}\"\n\n    download_from_site(save_to_dir=comic_folder)\n\n\n    print(f\"All {len(page_list)} pages succefully downloaded \")\n\n    driver.quit()\n</code></pre>"},{"location":"python_docs/zshortcuts/","title":"Jupyter Notebook ShortCuts","text":"ShortCut Description <code>A</code> Add cell above current cell <code>B</code> Add cell below current cell <code>D+D</code> Delete current cell <code>Y</code> Change cell to coding cell <code>M</code> Change cell to Markdown cell <code>1 to 6</code> Change the heading type h1 to h6 <code>CTR + SH + -</code> (edit mode) Split the code into another cell <code>CTR + SH + M</code> (Norm mode) Combine code cell Below"}]}